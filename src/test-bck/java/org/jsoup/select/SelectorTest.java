/*
 * This file was automatically generated by EvoSuite
 * Tue Mar 22 22:15:51 GMT 2022
 */

package org.jsoup.select;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.Node;
import org.jsoup.select.Elements;
import org.jsoup.select.Evaluator;
import org.jsoup.select.Selector;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true,
        useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)
public class SelectorTest extends Selector_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      Element element0 = mock(Element.class, new ViolatedAssumptionAnswer());
      doReturn((-907)).when(element0).childNodeSize();
      doReturn(node0).when(element0).nextSibling();
      doReturn((String) null, (String) null).when(element0).outerHtml();
      Element element1 = mock(Element.class, new ViolatedAssumptionAnswer());
      doReturn((-907)).when(element1).childNodeSize();
      doReturn((Element) null).when(element1).nextSibling();
      doReturn((String) null, (String) null).when(element1).outerHtml();
      Evaluator evaluator0 = mock(Evaluator.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(evaluator0).matches(any(org.jsoup.nodes.Element.class) , any(org.jsoup.nodes.Element.class));
      Elements elements0 = Selector.select(evaluator0, element1);
      Elements elements1 = Selector.select(",a", element0);
      Elements elements2 = Selector.filterOut(elements0, elements1);
      assertEquals(1, elements2.size());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Element element0 = mock(Element.class, new ViolatedAssumptionAnswer());
      doReturn((-907)).when(element0).childNodeSize();
      doReturn((Element) null).when(element0).nextSibling();
      doReturn((String) null).when(element0).outerHtml();
      Evaluator evaluator0 = mock(Evaluator.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(evaluator0).matches(any(org.jsoup.nodes.Element.class) , any(org.jsoup.nodes.Element.class));
      Elements elements0 = Selector.select(evaluator0, element0);
      Elements elements1 = Selector.filterOut(elements0, elements0);
      assertEquals(0, elements1.size());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Element element0 = mock(Element.class, new ViolatedAssumptionAnswer());
      doReturn((-907), (-907)).when(element0).childNodeSize();
      doReturn((Element) null, (Element) null).when(element0).nextSibling();
      doReturn((String) null, (String) null, (String) null).when(element0).outerHtml();
      Evaluator evaluator0 = mock(Evaluator.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(evaluator0).matches(any(org.jsoup.nodes.Element.class) , any(org.jsoup.nodes.Element.class));
      Elements elements0 = Selector.select(evaluator0, element0);
      Elements elements1 = Selector.select(",a", (Iterable<Element>) elements0);
      assertEquals(1, elements1.size());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      // Undeclared exception!
      try { 
        Selector.selectFirst("BHEaxZO=", (Element) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query 'BHEaxZO=': unexpected token at '='
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }
}
