/*
 * This file was automatically generated by EvoSuite
 * Tue Mar 22 23:31:53 GMT 2022
 */

package org.jsoup.internal;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.IOException;
import java.io.InputStream;
import java.net.SocketTimeoutException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jsoup.internal.ConstrainableInputStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ConstrainableInputStream_ESTest extends ConstrainableInputStream_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      InputStream inputStream0 = mock(InputStream.class, new ViolatedAssumptionAnswer());
      doReturn(1428).when(inputStream0).read(any(byte[].class) , anyInt() , anyInt());
      ConstrainableInputStream constrainableInputStream0 = ConstrainableInputStream.wrap(inputStream0, 1, 1);
      ConstrainableInputStream constrainableInputStream1 = constrainableInputStream0.timeout(1, 1);
      ConstrainableInputStream constrainableInputStream2 = constrainableInputStream1.timeout(1, 0L);
      constrainableInputStream2.markSupported();
      constrainableInputStream1.mark(3202);
      ConstrainableInputStream constrainableInputStream3 = constrainableInputStream1.timeout((-1143L), (-1143L));
      constrainableInputStream3.timeout(0L, 0L);
      constrainableInputStream1.readToByteBuffer(197);
      constrainableInputStream3.timeout(0L, 0L);
      constrainableInputStream1.close();
      constrainableInputStream3.readToByteBuffer(1);
      try { 
        constrainableInputStream3.reset();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.BufferedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      InputStream inputStream0 = mock(InputStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(inputStream0).available();
      doReturn(536, 0).when(inputStream0).read(any(byte[].class) , anyInt() , anyInt());
      ConstrainableInputStream constrainableInputStream0 = ConstrainableInputStream.wrap(inputStream0, 3262, 3262);
      ConstrainableInputStream constrainableInputStream1 = constrainableInputStream0.timeout(0L, 0L);
      ConstrainableInputStream constrainableInputStream2 = ConstrainableInputStream.wrap(constrainableInputStream1, 3262, 3262);
      constrainableInputStream0.mark(564);
      constrainableInputStream2.markSupported();
      constrainableInputStream2.timeout(0L, 0L);
      constrainableInputStream2.readToByteBuffer(3073);
      System.setCurrentTimeMillis(536);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      InputStream inputStream0 = mock(InputStream.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(inputStream0).read(any(byte[].class) , anyInt() , anyInt());
      int int0 = 26;
      ConstrainableInputStream constrainableInputStream0 = ConstrainableInputStream.wrap(inputStream0, 26, 26);
      // Undeclared exception!
      constrainableInputStream0.readToByteBuffer(2147483635);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      InputStream inputStream0 = null;
      ConstrainableInputStream constrainableInputStream0 = ConstrainableInputStream.wrap((InputStream) null, 1022, 0);
      byte[] byteArray0 = new byte[0];
      constrainableInputStream0.read(byteArray0);
      try { 
        constrainableInputStream0.available();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.BufferedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      InputStream inputStream0 = mock(InputStream.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(inputStream0).read(any(byte[].class) , anyInt() , anyInt());
      ConstrainableInputStream constrainableInputStream0 = ConstrainableInputStream.wrap(inputStream0, 785, 785);
      long long0 = 0L;
      ConstrainableInputStream constrainableInputStream1 = constrainableInputStream0.timeout(0L, 0L);
      int int0 = 0;
      ConstrainableInputStream constrainableInputStream2 = ConstrainableInputStream.wrap(constrainableInputStream1, 785, 0);
      // Undeclared exception!
      constrainableInputStream2.readToByteBuffer(0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      InputStream inputStream0 = mock(InputStream.class, new ViolatedAssumptionAnswer());
      ConstrainableInputStream constrainableInputStream0 = ConstrainableInputStream.wrap(inputStream0, 1, 1);
      ConstrainableInputStream constrainableInputStream1 = constrainableInputStream0.timeout(0L, 0L);
      constrainableInputStream1.timeout(1L, (-325L));
      try { 
        constrainableInputStream0.readToByteBuffer(0);
        fail("Expecting exception: SocketTimeoutException");
      
      } catch(SocketTimeoutException e) {
         //
         // Read timeout
         //
         verifyException("org.jsoup.internal.ConstrainableInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      System.setCurrentTimeMillis(108L);
      int int0 = 1;
      ConstrainableInputStream constrainableInputStream0 = ConstrainableInputStream.wrap((InputStream) null, 1, 1);
      ConstrainableInputStream constrainableInputStream1 = constrainableInputStream0.timeout(1000000L, 108L);
      byte[] byteArray0 = new byte[0];
      constrainableInputStream1.read(byteArray0);
      ConstrainableInputStream.wrap(constrainableInputStream1, 32759, 216);
      try { 
        constrainableInputStream0.readToByteBuffer(5176);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.BufferedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      InputStream inputStream0 = mock(InputStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(inputStream0).read(any(byte[].class) , anyInt() , anyInt());
      ConstrainableInputStream constrainableInputStream0 = ConstrainableInputStream.wrap(inputStream0, 3262, 3262);
      ConstrainableInputStream constrainableInputStream1 = constrainableInputStream0.timeout(0L, 0L);
      ConstrainableInputStream constrainableInputStream2 = ConstrainableInputStream.wrap(constrainableInputStream1, 3262, 3262);
      constrainableInputStream0.mark(564);
      constrainableInputStream2.markSupported();
      constrainableInputStream2.timeout(0L, 0L);
      constrainableInputStream2.readToByteBuffer(3073);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      InputStream inputStream0 = mock(InputStream.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(inputStream0).read(any(byte[].class) , anyInt() , anyInt());
      int int0 = 1428;
      ConstrainableInputStream constrainableInputStream0 = ConstrainableInputStream.wrap(inputStream0, 1428, 1428);
      long long0 = 222L;
      constrainableInputStream0.readToByteBuffer(1428);
      byte[] byteArray0 = new byte[7];
      byte byte0 = (byte)34;
      byteArray0[0] = byte0;
      byte byte1 = (byte)85;
      byteArray0[1] = byte1;
      byte byte2 = (byte) (-1);
      byteArray0[2] = byte2;
      byte byte3 = (byte)6;
      byteArray0[3] = byte3;
      byte byte4 = (byte) (-41);
      byteArray0[4] = byte4;
      byte byte5 = (byte)79;
      byteArray0[5] = byte5;
      byte byte6 = (byte) (-48);
      byteArray0[6] = byte6;
      constrainableInputStream0.read(byteArray0);
      ConstrainableInputStream constrainableInputStream1 = constrainableInputStream0.timeout(long0, long0);
      ConstrainableInputStream.wrap(constrainableInputStream1, int0, int0);
      int int1 = 1051;
      int int2 = (-3681);
      constrainableInputStream0.read(byteArray0, int1, int2);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      InputStream inputStream0 = mock(InputStream.class, new ViolatedAssumptionAnswer());
      ConstrainableInputStream constrainableInputStream0 = ConstrainableInputStream.wrap(inputStream0, 661, 0);
      ConstrainableInputStream constrainableInputStream1 = constrainableInputStream0.timeout(1004L, 1000000L);
      // Undeclared exception!
      try { 
        constrainableInputStream1.readToByteBuffer((-1240));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxSize must be 0 (unlimited) or larger
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      int int0 = 3227;
      ConstrainableInputStream.wrap((InputStream) null, 3227, 3227);
      long long0 = (-803L);
      // Undeclared exception!
      try { 
        ConstrainableInputStream.wrap((InputStream) null, 3227, (-4561));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be true
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      int int0 = 0;
      ConstrainableInputStream constrainableInputStream0 = ConstrainableInputStream.wrap((InputStream) null, 2215, 0);
      ConstrainableInputStream constrainableInputStream1 = constrainableInputStream0.timeout(2215, 2215);
      constrainableInputStream0.timeout(0, 1L);
      ConstrainableInputStream constrainableInputStream2 = ConstrainableInputStream.wrap(constrainableInputStream0, 0, 2215);
      int int1 = 1699;
      ConstrainableInputStream.wrap(constrainableInputStream2, 2215, 1699);
      try { 
        constrainableInputStream1.readToByteBuffer(1699);
        fail("Expecting exception: SocketTimeoutException");
      
      } catch(SocketTimeoutException e) {
         //
         // Read timeout
         //
         verifyException("org.jsoup.internal.ConstrainableInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      int int0 = 535;
      ConstrainableInputStream constrainableInputStream0 = ConstrainableInputStream.wrap((InputStream) null, 535, 535);
      int int1 = 315;
      ConstrainableInputStream constrainableInputStream1 = ConstrainableInputStream.wrap(constrainableInputStream0, 535, 315);
      byte[] byteArray0 = new byte[0];
      constrainableInputStream1.read(byteArray0);
      long long0 = (-1L);
      try { 
        constrainableInputStream0.reset();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Resetting to invalid mark
         //
         verifyException("java.io.BufferedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      // Undeclared exception!
      try { 
        ConstrainableInputStream.wrap((InputStream) null, (-1), (-4434));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Buffer size <= 0
         //
         verifyException("java.io.BufferedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      InputStream inputStream0 = mock(InputStream.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(inputStream0).read(any(byte[].class) , anyInt() , anyInt());
      ConstrainableInputStream constrainableInputStream0 = ConstrainableInputStream.wrap(inputStream0, 3262, 3262);
      // Undeclared exception!
      constrainableInputStream0.readToByteBuffer(3262);
  }
}
