/*
 * This file was automatically generated by EvoSuite
 * Tue Mar 22 23:31:02 GMT 2022
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.nodes.Attribute;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Entities;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class Attribute_ESTest extends Attribute_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Attribute attribute0 = new Attribute("H", (String) null);
      assertNull(attribute0.getValue());
      assertEquals("H", attribute0.getKey());
      assertNotNull(attribute0);
      
      attribute0.hashCode();
      assertNull(attribute0.getValue());
      assertEquals("H", attribute0.getKey());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Attribute attribute0 = Attribute.createFromEncoded("91 YkA~PR", "himy");
      assertEquals("himy", attribute0.getValue());
      assertEquals("91 YkA~PR", attribute0.getKey());
      assertNotNull(attribute0);
      
      attribute0.hashCode();
      assertEquals("himy", attribute0.getValue());
      assertEquals("91 YkA~PR", attribute0.getKey());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Attribute attribute0 = new Attribute("^T0$qn5Tn7+", (String) null);
      assertNull(attribute0.getValue());
      assertEquals("^T0$qn5Tn7+", attribute0.getKey());
      assertNotNull(attribute0);
      
      Attribute attribute1 = new Attribute("^T0$qn5Tn7+", "^T0$qn5Tn7+");
      assertTrue(attribute1.equals((Object)attribute0));
      assertEquals("^T0$qn5Tn7+", attribute1.getKey());
      assertEquals("^T0$qn5Tn7+", attribute1.getValue());
      assertNotNull(attribute1);
      
      boolean boolean0 = attribute0.equals(attribute1);
      assertFalse(boolean0);
      assertFalse(attribute0.equals((Object)attribute1));
      assertTrue(attribute1.equals((Object)attribute0));
      assertNull(attribute0.getValue());
      assertEquals("^T0$qn5Tn7+", attribute0.getKey());
      assertEquals("^T0$qn5Tn7+", attribute1.getKey());
      assertEquals("^T0$qn5Tn7+", attribute1.getValue());
      assertNotSame(attribute0, attribute1);
      assertNotSame(attribute1, attribute0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Attribute attribute0 = new Attribute("^T0$qn5Tn7+", "^T0$qn5Tn7+");
      assertEquals("^T0$qn5Tn7+", attribute0.getValue());
      assertEquals("^T0$qn5Tn7+", attribute0.getKey());
      assertNotNull(attribute0);
      
      Attribute attribute1 = attribute0.clone();
      assertTrue(attribute1.equals((Object)attribute0));
      assertEquals("^T0$qn5Tn7+", attribute0.getValue());
      assertEquals("^T0$qn5Tn7+", attribute0.getKey());
      assertEquals("^T0$qn5Tn7+", attribute1.getValue());
      assertEquals("^T0$qn5Tn7+", attribute1.getKey());
      assertNotSame(attribute0, attribute1);
      assertNotSame(attribute1, attribute0);
      assertNotNull(attribute1);
      
      boolean boolean0 = attribute0.equals(attribute1);
      assertTrue(boolean0);
      assertTrue(attribute0.equals((Object)attribute1));
      assertTrue(attribute1.equals((Object)attribute0));
      assertEquals("^T0$qn5Tn7+", attribute0.getValue());
      assertEquals("^T0$qn5Tn7+", attribute0.getKey());
      assertEquals("^T0$qn5Tn7+", attribute1.getValue());
      assertEquals("^T0$qn5Tn7+", attribute1.getKey());
      assertNotSame(attribute0, attribute1);
      assertNotSame(attribute1, attribute0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Attribute attribute0 = new Attribute("^T0$qn5Tn7+", (String) null);
      assertNull(attribute0.getValue());
      assertEquals("^T0$qn5Tn7+", attribute0.getKey());
      assertNotNull(attribute0);
      
      Attribute attribute1 = attribute0.clone();
      assertTrue(attribute1.equals((Object)attribute0));
      assertNull(attribute0.getValue());
      assertEquals("^T0$qn5Tn7+", attribute0.getKey());
      assertNull(attribute1.getValue());
      assertEquals("^T0$qn5Tn7+", attribute1.getKey());
      assertNotSame(attribute0, attribute1);
      assertNotSame(attribute1, attribute0);
      assertNotNull(attribute1);
      
      boolean boolean0 = attribute0.equals(attribute1);
      assertTrue(boolean0);
      assertTrue(attribute0.equals((Object)attribute1));
      assertTrue(attribute1.equals((Object)attribute0));
      assertNull(attribute0.getValue());
      assertEquals("^T0$qn5Tn7+", attribute0.getKey());
      assertNull(attribute1.getValue());
      assertEquals("^T0$qn5Tn7+", attribute1.getKey());
      assertNotSame(attribute0, attribute1);
      assertNotSame(attribute1, attribute0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Attribute attribute0 = new Attribute("default", "default");
      assertEquals("default", attribute0.getKey());
      assertEquals("default", attribute0.getValue());
      assertNotNull(attribute0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = attribute0.equals(object0);
      assertFalse(boolean0);
      assertEquals("default", attribute0.getKey());
      assertEquals("default", attribute0.getValue());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Attribute attribute0 = Attribute.createFromEncoded("J26vr>Nw?DR/A\"Fxsi", "sortable");
      assertEquals("sortable", attribute0.getValue());
      assertEquals("J26vr>Nw?DR/A\"Fxsi", attribute0.getKey());
      assertNotNull(attribute0);
      
      boolean boolean0 = attribute0.equals((Object) null);
      assertFalse(boolean0);
      assertEquals("sortable", attribute0.getValue());
      assertEquals("J26vr>Nw?DR/A\"Fxsi", attribute0.getKey());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      assertEquals(0, attributes0.size());
      assertNotNull(attributes0);
      
      Attribute attribute0 = new Attribute("2d0X(?4y=\"2d0X(?4y\"", "2d0X(?4y=\"2d0X(?4y\"", attributes0);
      assertEquals(0, attributes0.size());
      assertEquals("2d0X(?4y=\"2d0X(?4y\"", attribute0.getValue());
      assertEquals("2d0X(?4y=\"2d0X(?4y\"", attribute0.getKey());
      assertNotNull(attribute0);
      
      Attribute attribute1 = Attribute.createFromEncoded("2d0X(?4y=\"2d0X(?4y\"=\"2d0X(?4y=&quot;2d0X(?4y&quot;\"", "2d0X(?4y=\"2d0X(?4y\"");
      assertFalse(attribute1.equals((Object)attribute0));
      assertEquals("2d0X(?4y=\"2d0X(?4y\"=\"2d0X(?4y=&quot;2d0X(?4y&quot;\"", attribute1.getKey());
      assertEquals("2d0X(?4y=\"2d0X(?4y\"", attribute1.getValue());
      assertNotSame(attribute1, attribute0);
      assertNotNull(attribute1);
      
      boolean boolean0 = attribute0.equals(attribute1);
      assertFalse(boolean0);
      assertFalse(attribute0.equals((Object)attribute1));
      assertFalse(attribute1.equals((Object)attribute0));
      assertEquals(0, attributes0.size());
      assertEquals("2d0X(?4y=\"2d0X(?4y\"", attribute0.getValue());
      assertEquals("2d0X(?4y=\"2d0X(?4y\"", attribute0.getKey());
      assertEquals("2d0X(?4y=\"2d0X(?4y\"=\"2d0X(?4y=&quot;2d0X(?4y&quot;\"", attribute1.getKey());
      assertEquals("2d0X(?4y=\"2d0X(?4y\"", attribute1.getValue());
      assertNotSame(attribute0, attribute1);
      assertNotSame(attribute1, attribute0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Attribute attribute0 = new Attribute("^T0$qn5Tn7+", (String) null);
      assertNull(attribute0.getValue());
      assertEquals("^T0$qn5Tn7+", attribute0.getKey());
      assertNotNull(attribute0);
      
      boolean boolean0 = attribute0.isBooleanAttribute();
      assertTrue(boolean0);
      assertNull(attribute0.getValue());
      assertEquals("^T0$qn5Tn7+", attribute0.getKey());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      assertEquals(0, attributes0.size());
      assertNotNull(attributes0);
      
      Attribute attribute0 = new Attribute("2d0X(?4y=\"2d0X(?4y\"", "2d0X(?4y=\"2d0X(?4y\"", attributes0);
      assertEquals(0, attributes0.size());
      assertEquals("2d0X(?4y=\"2d0X(?4y\"", attribute0.getValue());
      assertEquals("2d0X(?4y=\"2d0X(?4y\"", attribute0.getKey());
      assertNotNull(attribute0);
      
      boolean boolean0 = attribute0.isBooleanAttribute();
      assertFalse(boolean0);
      assertEquals(0, attributes0.size());
      assertEquals("2d0X(?4y=\"2d0X(?4y\"", attribute0.getValue());
      assertEquals("2d0X(?4y=\"2d0X(?4y\"", attribute0.getKey());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Attribute attribute0 = new Attribute("default", "default");
      assertEquals("default", attribute0.getValue());
      assertEquals("default", attribute0.getKey());
      assertNotNull(attribute0);
      
      boolean boolean0 = attribute0.isBooleanAttribute();
      assertTrue(boolean0);
      assertEquals("default", attribute0.getValue());
      assertEquals("default", attribute0.getKey());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Attribute attribute0 = Attribute.createFromEncoded("U]nPswzU", "");
      assertEquals("", attribute0.getValue());
      assertEquals("U]nPswzU", attribute0.getKey());
      assertNotNull(attribute0);
      
      String string0 = attribute0.toString();
      assertEquals("U]nPswzU=\"\"", string0);
      assertEquals("", attribute0.getValue());
      assertEquals("U]nPswzU", attribute0.getKey());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Attribute attribute0 = new Attribute("[", (String) null);
      assertNull(attribute0.getValue());
      assertEquals("[", attribute0.getKey());
      assertNotNull(attribute0);
      
      String string0 = attribute0.toString();
      assertEquals("[", string0);
      assertNull(attribute0.getValue());
      assertEquals("[", attribute0.getKey());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.outline());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertNotNull(document_OutputSettings0);
      
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.xml;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.syntax(document_OutputSettings_Syntax0);
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.outline());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings0.syntax());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings1.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertNotNull(document_OutputSettings1);
      
      boolean boolean0 = Attribute.shouldCollapseAttribute("sO,i", (String) null, document_OutputSettings1);
      assertFalse(boolean0);
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.outline());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings0.syntax());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings1.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      boolean boolean0 = Attribute.isDataAttribute("data-noresize");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      boolean boolean0 = Attribute.isDataAttribute("data-");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      assertEquals(0, attributes0.size());
      assertNotNull(attributes0);
      
      Attributes attributes1 = attributes0.put("r5", "%lgS1LiYI_K,\u0005");
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      assertNotNull(attributes1);
      
      Attribute attribute0 = new Attribute("j4XfR*", "j4XfR*", attributes1);
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals("j4XfR*", attribute0.getKey());
      assertEquals("j4XfR*", attribute0.getValue());
      assertNotNull(attribute0);
      
      attribute0.setKey("r5");
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals("j4XfR*", attribute0.getValue());
      assertEquals("r5", attribute0.getKey());
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      
      String string0 = attribute0.setValue("]::04+d&|KPzZojAu");
      assertEquals("%lgS1LiYI_K,\u0005", string0);
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals("]::04+d&|KPzZojAu", attribute0.getValue());
      assertEquals("r5", attribute0.getKey());
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      assertEquals(0, attributes0.size());
      assertNotNull(attributes0);
      
      Attribute attribute0 = new Attribute("j4XfR*", "j4XfR*", attributes0);
      assertEquals(0, attributes0.size());
      assertEquals("j4XfR*", attribute0.getValue());
      assertEquals("j4XfR*", attribute0.getKey());
      assertNotNull(attribute0);
      
      String string0 = attribute0.setValue("]::04+d&|KPzZojAu");
      assertEquals("", string0);
      assertEquals(0, attributes0.size());
      assertEquals("j4XfR*", attribute0.getKey());
      assertEquals("]::04+d&|KPzZojAu", attribute0.getValue());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Attribute attribute0 = Attribute.createFromEncoded("J26vr>Nw?DR/A\"Fxsi", "sortable");
      assertEquals("J26vr>Nw?DR/A\"Fxsi", attribute0.getKey());
      assertEquals("sortable", attribute0.getValue());
      assertNotNull(attribute0);
      
      Attributes attributes0 = new Attributes();
      assertEquals(0, attributes0.size());
      assertNotNull(attributes0);
      
      Attributes attributes1 = attributes0.put(attribute0);
      assertEquals("J26vr>Nw?DR/A\"Fxsi", attribute0.getKey());
      assertEquals("sortable", attribute0.getValue());
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      assertNotNull(attributes1);
      
      attributes0.normalize();
      assertEquals(1, attributes0.size());
      assertSame(attributes0, attributes1);
      
      attribute0.setKey("sortable");
      assertEquals("sortable", attribute0.getValue());
      assertEquals("sortable", attribute0.getKey());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Attribute attribute0 = new Attribute("/u.6;\"A+Jv3U_e=", "/u.6;\"A+Jv3U_e=");
      assertEquals("/u.6;\"A+Jv3U_e=", attribute0.getValue());
      assertEquals("/u.6;\"A+Jv3U_e=", attribute0.getKey());
      assertNotNull(attribute0);
      
      attribute0.setKey("/u.6;\"A+Jv3U_e=");
      assertEquals("/u.6;\"A+Jv3U_e=", attribute0.getValue());
      assertEquals("/u.6;\"A+Jv3U_e=", attribute0.getKey());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Attribute attribute0 = new Attribute("Tee10j^8y.&>}ka", "Tee10j^8y.&>}ka", (Attributes) null);
      assertEquals("Tee10j^8y.&>}ka", attribute0.getValue());
      assertEquals("Tee10j^8y.&>}ka", attribute0.getKey());
      assertNotNull(attribute0);
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertNotNull(document_OutputSettings0);
      
      boolean boolean0 = attribute0.shouldCollapseAttribute(document_OutputSettings0);
      assertFalse(boolean0);
      assertEquals("Tee10j^8y.&>}ka", attribute0.getValue());
      assertEquals("Tee10j^8y.&>}ka", attribute0.getKey());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Attribute attribute0 = new Attribute("default", "default");
      assertEquals("default", attribute0.getKey());
      assertEquals("default", attribute0.getValue());
      assertNotNull(attribute0);
      
      String string0 = attribute0.toString();
      assertEquals("default", string0);
      assertEquals("default", attribute0.getKey());
      assertEquals("default", attribute0.getValue());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Attribute attribute0 = new Attribute("default", "default");
      assertEquals("default", attribute0.getKey());
      assertEquals("default", attribute0.getValue());
      assertNotNull(attribute0);
      
      boolean boolean0 = attribute0.isDataAttribute();
      assertFalse(boolean0);
      assertEquals("default", attribute0.getKey());
      assertEquals("default", attribute0.getValue());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Attribute attribute0 = Attribute.createFromEncoded("J26vr>Nw?DR/A\"Fxsi", "sortable");
      assertEquals("sortable", attribute0.getValue());
      assertEquals("J26vr>Nw?DR/A\"Fxsi", attribute0.getKey());
      assertNotNull(attribute0);
      
      Attributes attributes0 = new Attributes();
      assertEquals(0, attributes0.size());
      assertNotNull(attributes0);
      
      Attributes attributes1 = attributes0.put(attribute0);
      assertEquals("sortable", attribute0.getValue());
      assertEquals("J26vr>Nw?DR/A\"Fxsi", attribute0.getKey());
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      assertNotNull(attributes1);
      
      attribute0.setKey("sortable");
      assertEquals("sortable", attribute0.getValue());
      assertEquals("sortable", attribute0.getKey());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Attribute attribute0 = Attribute.createFromEncoded("J26vr>Nw?DR/A\"Fxsi", "sortable");
      attribute0.html();
  }
}
