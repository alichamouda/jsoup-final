/*
 * This file was automatically generated by EvoSuite
 * Tue Mar 22 23:36:24 GMT 2022
 */

package org.jsoup;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.InputStream;
import java.io.UnsupportedEncodingException;
import java.net.URL;
import java.nio.charset.Charset;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.jsoup.Jsoup;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Entities;
import org.jsoup.parser.Parser;
import org.jsoup.safety.Whitelist;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true,
        useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true)
public class Jsoup_ESTest extends Jsoup_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MockFile mockFile0 = new MockFile("kSQFqD>{%1jf^}:", "");
      File file0 = mockFile0.getAbsoluteFile();
      MockFile mockFile1 = new MockFile(file0, "Wol");
      try { 
        Jsoup.parse((File) mockFile1, "Wol", "");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Jsoup.parse("nq28`5*Dr?Yv", "org.jsoup.Jsoup");
      Whitelist whitelist0 = Whitelist.none();
      Jsoup.clean("org.jsoup.Jsoup", whitelist0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-69);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      try { 
        Jsoup.parse((InputStream) byteArrayInputStream0, "org.jsoup.Jsoup", "");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String string0 = null;
      Whitelist whitelist0 = Whitelist.basicWithImages();
      Whitelist.basicWithImages();
      // Undeclared exception!
      try { 
        Jsoup.isValid((String) null, whitelist0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Whitelist whitelist0 = new Whitelist();
      Jsoup.clean("T%RxZF,s9", whitelist0);
      Jsoup.parse("#e");
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Jsoup.parse("", "s,8~nEzEIsdY");
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      // Undeclared exception!
      try { 
        Jsoup.parse((URL) null, 28);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URL must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      // Undeclared exception!
      try { 
        Jsoup.connect("org.jsoup.parser.ParseErrorList");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Malformed URL: org.jsoup.parser.ParseErrorList
         //
         verifyException("org.jsoup.helper.HttpConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Jsoup.parse("s}\u0000d!>", "s}\u0000d!>", parser0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      File file0 = MockFile.createTempFile("u%5:M6`T-", "");
      // Undeclared exception!
      try { 
        Jsoup.parse(file0, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Jsoup.parse((InputStream) null, ":%s(%dn%+d)", ":%s(%dn%+d)", parser0);
      Whitelist whitelist0 = Whitelist.none();
      Whitelist whitelist1 = whitelist0.preserveRelativeLinks(false);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.xml;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.syntax(document_OutputSettings_Syntax0);
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.prettyPrint(false);
      Charset charset0 = Charset.defaultCharset();
      Document.OutputSettings document_OutputSettings3 = document_OutputSettings2.charset(charset0);
      Document.OutputSettings document_OutputSettings4 = document_OutputSettings3.outline(false);
      Jsoup.clean(":%s(%dn%+d)", "Z", whitelist1, document_OutputSettings4);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String string0 = "g\"";
      Jsoup.parseBodyFragment("g\"");
      MockFile mockFile0 = new MockFile("g\"", "g\"");
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        MockFile.createTempFile("g\"", "g\"", (File) mockFile0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }
}
