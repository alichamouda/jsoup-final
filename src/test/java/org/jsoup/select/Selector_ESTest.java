/*
 * This file was automatically generated by EvoSuite
 * Tue Mar 22 23:33:01 GMT 2022
 */

package org.jsoup.select;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.Node;
import org.jsoup.select.Elements;
import org.jsoup.select.Evaluator;
import org.jsoup.select.Selector;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Selector_ESTest extends Selector_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Evaluator evaluator0 = mock(Evaluator.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(evaluator0).matches(any(org.jsoup.nodes.Element.class) , any(org.jsoup.nodes.Element.class));
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      Element element0 = mock(Element.class, new ViolatedAssumptionAnswer());
      doReturn((-1), (-1)).when(element0).childNodeSize();
      doReturn((String) null).when(element0).toString();
      doReturn("").when(element0).attr(anyString());
      doReturn(node0, node0).when(element0).nextSibling();
      doReturn((String) null, (String) null).when(element0).outerHtml();
      Element element1 = Selector.selectFirst("[%s!=%s]", element0);
      Elements elements0 = Selector.select(evaluator0, element1);
      Evaluator evaluator1 = mock(Evaluator.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(evaluator1).matches(any(org.jsoup.nodes.Element.class) , any(org.jsoup.nodes.Element.class));
      Elements elements1 = Selector.select(evaluator1, element1);
      Elements elements2 = Selector.filterOut(elements0, elements1);
      assertEquals(1, elements2.size());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      Element element0 = mock(Element.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(element0).childNodeSize();
      doReturn("value", "value").when(element0).tagName();
      doReturn((String) null).when(element0).toString();
      doReturn(node0).when(element0).nextSibling();
      doReturn((String) null, (String) null).when(element0).outerHtml();
      Element element1 = Selector.selectFirst("value", element0);
      Elements elements0 = Selector.select("value", element1);
      Elements elements1 = Selector.filterOut(elements0, elements0);
      assertEquals(0, elements1.size());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Evaluator evaluator0 = mock(Evaluator.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(evaluator0).matches(any(org.jsoup.nodes.Element.class) , any(org.jsoup.nodes.Element.class));
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      Element element0 = mock(Element.class, new ViolatedAssumptionAnswer());
      doReturn(0, (-1381)).when(element0).childNodeSize();
      doReturn((String) null).when(element0).toString();
      doReturn("|%Yju8<q1YC;`JC08", "[%s!=%s]").when(element0).attr(anyString());
      doReturn(node0, node0).when(element0).nextSibling();
      doReturn((String) null, (String) null, (String) null).when(element0).outerHtml();
      Element element1 = Selector.selectFirst("[%s!=%s]", element0);
      Elements elements0 = Selector.select(evaluator0, element1);
      Elements elements1 = Selector.select("[%s!=%s]", (Iterable<Element>) elements0);
      assertEquals(1, elements1.size());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      Selector.SelectorParseException selector_SelectorParseException0 = new Selector.SelectorParseException("[%s!=%s]", objectArray0);
  }
}
