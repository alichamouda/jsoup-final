/*
 * This file was automatically generated by EvoSuite
 * Tue Mar 22 23:27:59 GMT 2022
 */

package org.jsoup.select;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.List;
import java.util.Stack;
import java.util.regex.Pattern;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.CDataNode;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.FormElement;
import org.jsoup.nodes.PseudoTextElement;
import org.jsoup.parser.ParseSettings;
import org.jsoup.parser.Tag;
import org.jsoup.select.Elements;
import org.jsoup.select.NodeFilter;
import org.jsoup.select.NodeVisitor;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Elements_ESTest extends Elements_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Tag tag0 = Tag.valueOf("*");
      CDataNode cDataNode0 = new CDataNode("org.eclipse.jetty.util.thread.ScheduledExecutorScheduler");
      Attributes attributes0 = cDataNode0.attributes();
      FormElement formElement0 = new FormElement(tag0, "bg'4lJv@Zery", attributes0);
      Elements elements0 = formElement0.getAllElements();
      List<FormElement> list0 = elements0.forms();
      assertTrue(list0.contains(formElement0));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Document document0 = new Document("R=Z)5'rP%LT7Rb4p");
      Elements elements0 = document0.getElementsByIndexGreaterThan((-1601));
      List<FormElement> list0 = elements0.forms();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Document document0 = new Document("");
      Elements elements0 = document0.getElementsByAttributeStarting("5R3e/o;IU");
      Element element0 = elements0.last();
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Document document0 = new Document(")bud");
      Pattern pattern0 = Pattern.compile("");
      Elements elements0 = document0.getElementsMatchingOwnText(pattern0);
      Element element0 = elements0.last();
      assertEquals(0, element0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Document document0 = Document.createShell("");
      Elements elements0 = document0.siblingElements();
      Element element0 = elements0.first();
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Document document0 = Document.createShell("R=Z)5'rP%LT7Rb4p");
      Elements elements0 = document0.getElementsByIndexGreaterThan((-1601));
      boolean boolean0 = elements0.is("a");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Document document0 = Document.createShell("6;\n7AV5");
      Pattern pattern0 = Pattern.compile("6;\n7AV5", (-1576));
      Elements elements0 = document0.getElementsMatchingOwnText(pattern0);
      // Undeclared exception!
      try { 
        elements0.eq((-1576));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Document document0 = Document.createShell("Qb|oc8");
      Elements elements0 = document0.getElementsByClass("[7,NzqFJ`");
      Elements elements1 = elements0.eq(105);
      assertNotSame(elements0, elements1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Document document0 = new Document("R=Z)5'rP%LT7Rb4p");
      Elements elements0 = document0.getElementsByIndexGreaterThan((-1601));
      // Undeclared exception!
      try { 
        elements0.remove();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Document document0 = new Document("R=Z)5'rP%LT7Rb4p");
      Elements elements0 = document0.getElementsByIndexGreaterThan((-1601));
      Elements elements1 = elements0.prevAll();
      Elements elements2 = elements1.remove();
      assertTrue(elements2.isEmpty());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Document document0 = Document.createShell("R=Z)5'rP%LT7Rb4p");
      Elements elements0 = document0.getElementsByIndexGreaterThan((-1601));
      elements0.empty();
      assertEquals(0, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Document document0 = new Document("");
      Elements elements0 = document0.getElementsByAttributeValueNot("|BX3TUx<}Z", "hy;");
      // Undeclared exception!
      try { 
        elements0.unwrap();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Tag tag0 = Tag.valueOf("org.jsoup.safety.Cleaner$CleaningVisitor");
      Element element0 = new Element(tag0, "4eu");
      Elements elements0 = element0.siblingElements();
      Elements elements1 = elements0.unwrap();
      assertSame(elements0, elements1);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Element[] elementArray0 = new Element[1];
      Elements elements0 = new Elements(elementArray0);
      // Undeclared exception!
      try { 
        elements0.wrap("YmwRPiM01");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Elements", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Document document0 = new Document("");
      Elements elements0 = document0.getElementsByAttributeStarting("5R3e/o;IU");
      Elements elements1 = elements0.wrap("5R3e/o;IU");
      assertSame(elements1, elements0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Document document0 = Document.createShell("MOX]<APj8");
      Elements elements0 = document0.getElementsContainingOwnText((String) null);
      // Undeclared exception!
      try { 
        elements0.after("MOX]<APj8");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Document document0 = Document.createShell("MOX]<APj8");
      Elements elements0 = document0.getElementsContainingOwnText((String) null);
      Elements elements1 = elements0.nextAll("PUBLIC");
      elements1.after("MOX]<APj8");
      assertEquals(0, elements1.size());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Document document0 = Document.createShell("MOX]<APj8");
      Elements elements0 = document0.getElementsContainingOwnText((String) null);
      // Undeclared exception!
      try { 
        elements0.before("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Stack<Element> stack0 = new Stack<Element>();
      Elements elements0 = new Elements((Collection<Element>) stack0);
      Elements elements1 = elements0.before("");
      assertSame(elements0, elements1);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Element[] elementArray0 = new Element[3];
      Elements elements0 = new Elements(elementArray0);
      // Undeclared exception!
      try { 
        elements0.prepend((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Elements", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Document document0 = new Document("");
      Elements elements0 = document0.getElementsByAttributeStarting("5R3e/o;IU");
      Elements elements1 = elements0.prepend("5R3e/o;IU");
      assertTrue(elements1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Document document0 = Document.createShell("org.jsoup.nodes.Document$OutputSettings");
      Elements elements0 = document0.getAllElements();
      elements0.html("");
      assertEquals(0, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Document document0 = Document.createShell("Qb|oc8");
      Elements elements0 = document0.getElementsByClass("[7,NzqFJ`");
      Elements elements1 = elements0.tagName("Qb|oc8");
      assertEquals(0, elements1.size());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Document document0 = Document.createShell("R=Z)5'rP%LT7Rb4p");
      Elements elements0 = document0.getElementsByIndexGreaterThan((-1601));
      String string0 = elements0.outerHtml();
      assertEquals("<html>\n <head></head>\n <body></body>\n</html>\n<html>\n <head></head>\n <body></body>\n</html>\n<head></head>\n<body></body>", string0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Document document0 = new Document("R=Z)5'rP%LT7Rb4p");
      Document document1 = document0.normalise();
      Elements elements0 = document1.getElementsByIndexGreaterThan((-1601));
      String string0 = elements0.html();
      assertEquals("<html>\n <head></head>\n <body></body>\n</html>\n<head></head>\n<body></body>\n\n", string0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Document document0 = Document.createShell("org.jsoup.nodes.Document$OutputSettings");
      Elements elements0 = document0.getAllElements();
      elements0.append("org.jsoup.nodes.Document$OutputSettings");
      List<String> list0 = elements0.eachText();
      assertEquals(2, document0.childNodeSize());
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Document document0 = new Document("R=Z)5'rP%LT7Rb4p");
      Elements elements0 = document0.getElementsByIndexGreaterThan((-1601));
      List<String> list0 = elements0.eachText();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Document document0 = Document.createShell("org.jsoup.nodes.Document$OutputSettings");
      Elements elements0 = document0.getAllElements();
      elements0.append("org.jsoup.nodes.Document$OutputSettings");
      boolean boolean0 = elements0.hasText();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Document document0 = new Document("R=Z)5'rP%LT7Rb4p");
      Elements elements0 = document0.getElementsByIndexGreaterThan((-1601));
      boolean boolean0 = elements0.hasText();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Document document0 = Document.createShell("org.jsoup.nodes.Document$OutputSettings");
      Elements elements0 = document0.getAllElements();
      Elements elements1 = elements0.append("org.jsoup.nodes.Document$OutputSettings");
      String string0 = elements1.text();
      assertEquals(2, document0.childNodeSize());
      assertEquals("org.jsoup.nodes.Document$OutputSettings org.jsoup.nodes.Document$OutputSettings org.jsoup.nodes.Document$OutputSettings org.jsoup.nodes.Document$OutputSettings org.jsoup.nodes.Document$OutputSettings org.jsoup.nodes.Document$OutputSettings org.jsoup.nodes.Document$OutputSettings org.jsoup.nodes.Document$OutputSettings org.jsoup.nodes.Document$OutputSettings", string0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Document document0 = Document.createShell("org.jsoup.nodes.Document$OutputSettings");
      Elements elements0 = document0.getAllElements();
      Elements elements1 = elements0.val("org.jsoup.nodes.Document$OutputSettings");
      assertSame(elements1, elements0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Document document0 = Document.createShell("R=Z)5'rP%LT7Rb4p");
      Elements elements0 = document0.getElementsByIndexGreaterThan((-1601));
      String string0 = elements0.val();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Tag tag0 = Tag.valueOf("]yd!t,|0f)EB=?]qsr");
      CDataNode cDataNode0 = new CDataNode("<|h");
      Attributes attributes0 = cDataNode0.attributes();
      Element element0 = new Element(tag0, "<>", attributes0);
      Elements elements0 = element0.getElementsContainingText("]yd!t,|0f)EB=?]qsr");
      String string0 = elements0.val();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Document document0 = Document.createShell("R=Z)5'rP%LT7Rb4p");
      Elements elements0 = document0.getElementsByIndexGreaterThan((-1601));
      elements0.addClass("R=Z)5'rP%LT7Rb4p");
      elements0.toggleClass("a");
      boolean boolean0 = elements0.hasClass("a");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Document document0 = new Document("R=Z)5'rP%LT7Rb4p");
      Elements elements0 = document0.getElementsByIndexGreaterThan((-1601));
      boolean boolean0 = elements0.hasClass("R=Z)5'rP%LT7Rb4p");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Document document0 = new Document("R=Z)5'rP%LT7Rb4p");
      Elements elements0 = document0.getElementsByIndexGreaterThan((-1601));
      Elements elements1 = elements0.removeClass("R=Z)5'rP%LT7Rb4p");
      assertSame(elements1, elements0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Document document0 = new Document("R=Z)5'rP%LT7Rb4p");
      Elements elements0 = document0.getElementsByIndexGreaterThan((-1601));
      Elements elements1 = elements0.removeAttr("R=Z)5'rP%LT7Rb4p");
      assertEquals(1, elements1.size());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Document document0 = new Document("");
      Elements elements0 = document0.getElementsByAttributeValueNot("|BX3TUx<}Z", "hy;");
      Elements elements1 = elements0.attr("^%Y/", "3l@e`$@|hjCX#qf$\"");
      assertEquals(1, elements1.size());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Document document0 = Document.createShell("org.jsoup.nodes.Document$OutputSettings");
      Elements elements0 = document0.getAllElements();
      document0.attr("", "org.jsoup.nodes.Document$OutputSettings");
      List<String> list0 = elements0.eachAttr("");
      assertTrue(list0.contains("org.jsoup.nodes.Document$OutputSettings"));
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("=+W]\"NF~-~Q0", parseSettings0);
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put("", "YFO'4");
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "=+W]\"NF~-~Q0", attributes1);
      Elements elements0 = pseudoTextElement0.getAllElements();
      boolean boolean0 = elements0.hasAttr("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Document document0 = new Document("i`830ewf0qE");
      Elements elements0 = document0.getElementsMatchingOwnText("");
      boolean boolean0 = elements0.hasAttr("hD7#oFr0");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Document document0 = new Document("i`830ewf0qE");
      Elements elements0 = document0.getElementsMatchingOwnText("");
      String string0 = elements0.attr("i`830ewf0qE");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Document document0 = Document.createShell("org.jsoup.nodes.Document$OutputSettings");
      Elements elements0 = document0.getAllElements();
      Elements elements1 = elements0.clone();
      assertFalse(elements1.isEmpty());
      assertNotSame(elements1, elements0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Document document0 = Document.createShell("org.jsoup.nodes.Document$OutputSettings");
      Elements elements0 = document0.getAllElements();
      Elements elements1 = elements0.next();
      assertEquals(1, elements1.size());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Tag tag0 = Tag.valueOf("org.jsoup.safety.Cleaner$CleaningVisitor");
      Element element0 = new Element(tag0, "4eu");
      Elements elements0 = element0.siblingElements();
      String string0 = elements0.toString();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Document document0 = Document.createShell("MOX]<APj8");
      Elements elements0 = document0.getElementsContainingOwnText((String) null);
      // Undeclared exception!
      try { 
        elements0.prev("MOX]<APj8");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query 'MOX]<APj8': unexpected token at ']<APj8'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Elements elements0 = new Elements();
      // Undeclared exception!
      try { 
        elements0.not("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Element[] elementArray0 = new Element[3];
      Elements elements0 = new Elements(elementArray0);
      // Undeclared exception!
      try { 
        elements0.tagName("oGdF(CjqW;HS#(/4 -");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Elements", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Document document0 = Document.createShell("MOX]<APj8");
      Elements elements0 = document0.getElementsContainingOwnText((String) null);
      NodeVisitor nodeVisitor0 = mock(NodeVisitor.class, new ViolatedAssumptionAnswer());
      Elements elements1 = elements0.traverse(nodeVisitor0);
      assertSame(elements1, elements0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Document document0 = new Document("%.P7XV\"10oE{_");
      Elements elements0 = document0.getElementsByAttributeStarting("%.P7XV\"10oE{_");
      // Undeclared exception!
      try { 
        elements0.select("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Document document0 = new Document("R=Z)5'rP%LT7Rb4p");
      Elements elements0 = document0.getElementsByIndexGreaterThan((-1601));
      Elements elements1 = elements0.parents();
      assertTrue(elements1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Document document0 = Document.createShell("org.jsoup.nodes.Document$OutputSettings");
      Elements elements0 = document0.getAllElements();
      Elements elements1 = elements0.nextAll();
      assertEquals(1, elements1.size());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Document document0 = Document.createShell("");
      Elements elements0 = document0.children();
      assertEquals(1, elements0.size());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Document document0 = Document.createShell("6;\n7AV5");
      Pattern pattern0 = Pattern.compile("6;\n7AV5", (-1576));
      Elements elements0 = document0.getElementsMatchingOwnText(pattern0);
      NodeFilter nodeFilter0 = mock(NodeFilter.class, new ViolatedAssumptionAnswer());
      Elements elements1 = elements0.filter(nodeFilter0);
      assertSame(elements0, elements1);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Document document0 = Document.createShell("org.jsoup.nodes.Document$OutputSettings");
      Elements elements0 = document0.getAllElements();
      // Undeclared exception!
      try { 
        elements0.prevAll("org.jsoup.nodes.Document$OutputSettings");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query 'org.jsoup.nodes.Document$OutputSettings': unexpected token at '$OutputSettings'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Document document0 = Document.createShell("R=Z)5'rP%LT7Rb4p");
      Elements elements0 = document0.getElementsByIndexGreaterThan((-1601));
      Elements elements1 = elements0.prev();
      assertEquals(1, elements1.size());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Document document0 = new Document("&/x");
      Elements elements0 = document0.getElementsMatchingText("");
      // Undeclared exception!
      try { 
        elements0.next("");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query '': unexpected token at ''
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }
}
