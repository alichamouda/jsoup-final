/*
 * This file was automatically generated by EvoSuite
 * Tue Mar 22 23:33:04 GMT 2022
 */

package org.jsoup.helper;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.FileDescriptor;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.net.MalformedURLException;
import java.net.Proxy;
import java.net.URI;
import java.net.URL;
import java.nio.charset.IllegalCharsetNameException;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Stack;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.net.MockInetSocketAddress;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.jsoup.Connection;
import org.jsoup.helper.HttpConnection;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.CDataNode;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.FormElement;
import org.jsoup.nodes.Node;
import org.jsoup.parser.ParseErrorList;
import org.jsoup.parser.ParseSettings;
import org.jsoup.parser.Parser;
import org.jsoup.parser.Tag;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class HttpConnection_ESTest extends HttpConnection_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String string0 = "multipart/form-data";
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create("multipart/form-data", "multipart/form-data");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      httpConnection_KeyVal0.toString();
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      URL uRL0 = MockURL.getHttpExample();
      httpConnection_Request0.url(uRL0);
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      httpConnection_Response0.addHeader("m1VP7", "multipart/form-data=multipart/form-data");
      try { 
        HttpConnection.Response.execute(httpConnection_Request0, httpConnection_Response0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // HTTP error fetching URL
         //
         verifyException("org.jsoup.helper.HttpConnection$Response", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "'Yj]0t(|");
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.pollFirst();
      linkedList0.add("'Yj]0t(|");
      URI uRI0 = MockURI.aHttpURI;
      URI uRI1 = MockURI.parseServerAuthority(uRI0);
      URL uRL0 = MockURI.toURL(uRI1);
      httpConnection_Response0.url = uRL0;
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      hashMap0.put((String) null, linkedList0);
      httpConnection_Response0.processResponseHeaders(hashMap0);
      httpConnection_Response0.processResponseHeaders(hashMap0);
      // Undeclared exception!
      try { 
        httpConnection_Response0.parse();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Request must be executed (with .execute(), .get(), or .post() before parsing response
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      System.setCurrentTimeMillis(648L);
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      httpConnection_Request0.header("User-Agent", "InputStream data not supported in URL query string.");
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null);
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create("tqlsP!vF6W^", "tqlsP!vF6W^", (InputStream) pushbackInputStream0);
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.data((Connection.KeyVal) httpConnection_KeyVal0);
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      httpConnection_Request0.headers = (Map<String, List<String>>) hashMap0;
      Proxy.Type proxy_Type0 = Proxy.Type.HTTP;
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress(95);
      Proxy proxy0 = new Proxy(proxy_Type0, mockInetSocketAddress0);
      HttpConnection.Request httpConnection_Request2 = httpConnection_Request1.proxy(proxy0);
      Connection.Request connection_Request0 = httpConnection_Request2.maxBodySize(95);
      httpConnection_Request0.followRedirects(true);
      // Undeclared exception!
      try { 
        HttpConnection.Response.execute(connection_Request0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "'Yj]0t(|");
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.pollFirst();
      linkedList0.add("'Yj]0t(|");
      URI uRI0 = MockURI.aHttpURI;
      URI uRI1 = MockURI.parseServerAuthority(uRI0);
      URL uRL0 = MockURI.toURL(uRI1);
      httpConnection_Response0.url = uRL0;
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      hashMap0.put("'Yj]0t(|", linkedList0);
      httpConnection_Response0.processResponseHeaders(hashMap0);
      httpConnection_Response0.processResponseHeaders(hashMap0);
      // Undeclared exception!
      try { 
        httpConnection_Response0.parse();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Request must be executed (with .execute(), .get(), or .post() before parsing response
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      httpConnection_Response0.charset("Referer");
      httpConnection_Response0.processResponseHeaders(hashMap0);
      httpConnection_Response0.contentType();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      Map<String, List<String>> map0 = httpConnection_Response0.headers;
      httpConnection_Response0.removeHeader("QqS*8-\"YwK)XToF");
      httpConnection_Response0.headers = map0;
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      httpConnection_Response0.header("gzip", "kU*|Wt6g(Lc6");
      hashMap0.replace("", (List<String>) null, (List<String>) null);
      Vector<String> vector0 = new Vector<String>();
      vector0.add("B}WjELe#_WI=");
      hashMap0.put("", (List<String>) null);
      hashMap0.put("", vector0);
      // Undeclared exception!
      try { 
        httpConnection_Response0.processResponseHeaders(hashMap0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.proxy("hm0H*U SGB", 47);
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create("can't create unsecure trust manager", ".rj6>[E*");
      HttpConnection.KeyVal httpConnection_KeyVal1 = httpConnection_KeyVal0.value("hm0H*U SGB");
      HttpConnection.Request httpConnection_Request2 = httpConnection_Request1.data((Connection.KeyVal) httpConnection_KeyVal1);
      Proxy proxy0 = Proxy.NO_PROXY;
      HttpConnection.Request httpConnection_Request3 = httpConnection_Request2.proxy(proxy0);
      HttpConnection.Request httpConnection_Request4 = httpConnection_Request3.timeout(47);
      httpConnection_Request4.maxBodySize();
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      // Undeclared exception!
      try { 
        HttpConnection.Response.execute(httpConnection_Request2, httpConnection_Response0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String string0 = "multipart/form-data";
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create("multipart/form-data", "multipart/form-data");
      httpConnection_KeyVal0.toString();
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      Proxy proxy0 = Proxy.NO_PROXY;
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.proxy(proxy0);
      httpConnection_KeyVal0.value("p");
      URL uRL0 = MockURL.getFileExample();
      httpConnection_Request1.url(uRL0);
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      httpConnection_Response0.addHeader("m1VP7", "multipart/form-data=multipart/form-data");
      try { 
        HttpConnection.Response.execute(httpConnection_Request0, httpConnection_Response0);
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Only http & https protocols supported
         //
         verifyException("org.jsoup.helper.HttpConnection$Response", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      Proxy proxy0 = Proxy.NO_PROXY;
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.proxy(proxy0);
      String string0 = "set-cookie";
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        httpConnection_Request1.postDataCharset("set-cookie");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // set-cookie
         //
         verifyException("org.jsoup.helper.HttpConnection$Request", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      System.setCurrentTimeMillis(0L);
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      HttpConnection.Response httpConnection_Response1 = httpConnection_Response0.charset("C78,4~MvG>Hg<r$");
      httpConnection_Response0.charset();
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      Connection.Method connection_Method0 = Connection.Method.POST;
      httpConnection_Response1.method = connection_Method0;
      // Undeclared exception!
      try { 
        httpConnection_Request0.proxy("watch", (-678));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // port out of range:-678
         //
         verifyException("java.net.InetSocketAddress", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      httpConnection_Request0.addHeader(".Y<kg|v", ".Y<kg|v");
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.proxy(".Y<kg|v", 0);
      Proxy proxy0 = Proxy.NO_PROXY;
      HttpConnection.Request httpConnection_Request2 = httpConnection_Request1.proxy(".Y<kg|v", 0);
      httpConnection_Request2.requestBody(".Y<kg|v");
      httpConnection_Request0.timeout();
      // Undeclared exception!
      try { 
        HttpConnection.Response.execute(httpConnection_Request0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      String string0 = "blIxs`h[S|rM~W@&7kd";
      HttpConnection.Response httpConnection_Response1 = httpConnection_Response0.charset("blIxs`h[S|rM~W@&7kd");
      httpConnection_Response1.statusCode();
      // Undeclared exception!
      try { 
        HttpConnection.KeyVal.create("", "0\"tTZ36vBC~");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Data key must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      HttpConnection.Response httpConnection_Response1 = httpConnection_Response0.charset("_.2?OV$:EHQ2[.@");
      String string0 = "S}c";
      httpConnection_Request0.proxy("S}c", 3);
      URL uRL0 = MockURL.getHttpExample();
      String string1 = "A=J^ZuAS7CH#a6y";
      httpConnection_Request0.requestBody("A=J^ZuAS7CH#a6y");
      httpConnection_Response1.url = uRL0;
      httpConnection_Request0.addHeader("S}c", (String) null);
      // Undeclared exception!
      try { 
        Document.createShell((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      Map<String, List<String>> map0 = httpConnection_Response0.headers;
      httpConnection_Response0.removeHeader("QqS*8-\"YwK)XToF");
      httpConnection_Response0.cookie("QqS*8-\"YwK)XToF", "QqS*8-\"YwK)XToF");
      httpConnection_Response0.headers = map0;
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      httpConnection_Response0.header("gzip", "kU*|Wt6g(Lc6");
      hashMap0.replace("", (List<String>) null, (List<String>) null);
      Vector<String> vector0 = new Vector<String>();
      hashMap0.put("", (List<String>) null);
      hashMap0.put("", vector0);
      httpConnection_Response0.processResponseHeaders(hashMap0);
      httpConnection_Response0.statusMessage();
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      httpConnection_Request0.followRedirects(false);
      // Undeclared exception!
      try { 
        httpConnection_Request0.timeout((-1278));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Timeout milliseconds must be 0 (infinite) or greater
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.parser((Parser) null);
      HttpConnection.Request httpConnection_Request2 = httpConnection_Request1.timeout(0);
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create(")Zwf<5u", ")Zwf<5u", (InputStream) dataInputStream0);
      HttpConnection.KeyVal httpConnection_KeyVal1 = httpConnection_KeyVal0.value("SSL");
      HttpConnection.KeyVal httpConnection_KeyVal2 = httpConnection_KeyVal1.key("SSL");
      HttpConnection.KeyVal httpConnection_KeyVal3 = httpConnection_KeyVal2.inputStream((InputStream) null);
      HttpConnection.Request httpConnection_Request3 = httpConnection_Request2.data((Connection.KeyVal) httpConnection_KeyVal3);
      httpConnection_Request3.validateTLSCertificates();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      Connection.Method connection_Method0 = Connection.Method.OPTIONS;
      httpConnection_Request0.method = connection_Method0;
      Parser parser0 = Parser.xmlParser();
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.parser(parser0);
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      httpConnection_Request0.headers = (Map<String, List<String>>) hashMap0;
      Parser.htmlParser();
      httpConnection_Request1.data();
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create("^^1F-d):au?", "E9?-e7,Zv");
      httpConnection_KeyVal0.contentType("E9?-e7,Zv");
      httpConnection_KeyVal0.contentType("r");
      httpConnection_KeyVal0.key();
      httpConnection_Request1.ignoreContentType();
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      HttpConnection.Response httpConnection_Response1 = httpConnection_Response0.charset("fd");
      // Undeclared exception!
      try { 
        httpConnection_Response1.bodyAsBytes();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Request must be executed (with .execute(), .get(), or .post() before getting response body
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      // Undeclared exception!
      try { 
        HttpConnection.connect((URL) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URL must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      httpConnection_Request0.addHeader("!!`.]]$7", "zEW=};UY:");
      httpConnection_Request0.ignoreContentType(false);
      httpConnection_Request0.followRedirects();
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create("!!`.]]$7", "");
      HttpConnection.KeyVal httpConnection_KeyVal1 = httpConnection_KeyVal0.key("rrNBNvN:R-F[sW,4");
      httpConnection_KeyVal1.value();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create("i", "                    ");
      HttpConnection.KeyVal httpConnection_KeyVal1 = httpConnection_KeyVal0.value("i");
      httpConnection_KeyVal1.hasInputStream();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      assertNotNull(httpConnection_Request0);
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNull(httpConnection_Request0.requestBody());
      assertTrue(httpConnection_Request0.validateTLSCertificates());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertTrue(httpConnection_Request0.followRedirects());
      
      Proxy proxy0 = Proxy.NO_PROXY;
      assertNotNull(proxy0);
      assertEquals(Proxy.Type.DIRECT, proxy0.type());
      assertEquals("DIRECT", proxy0.toString());
      
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.proxy(proxy0);
      assertNotNull(httpConnection_Request1);
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNull(httpConnection_Request0.requestBody());
      assertTrue(httpConnection_Request0.validateTLSCertificates());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(Proxy.Type.DIRECT, proxy0.type());
      assertEquals("DIRECT", proxy0.toString());
      assertTrue(httpConnection_Request1.validateTLSCertificates());
      assertTrue(httpConnection_Request1.followRedirects());
      assertEquals(30000, httpConnection_Request1.timeout());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertEquals(1048576, httpConnection_Request1.maxBodySize());
      assertNull(httpConnection_Request1.requestBody());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request1, httpConnection_Request0);
      
      String string0 = httpConnection_Request0.postDataCharset();
      assertEquals("UTF-8", string0);
      assertNotNull(string0);
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNull(httpConnection_Request0.requestBody());
      assertTrue(httpConnection_Request0.validateTLSCertificates());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertTrue(httpConnection_Request0.followRedirects());
      assertSame(httpConnection_Request0, httpConnection_Request1);
      
      httpConnection_Request1.validateTLSCertificates(true);
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNull(httpConnection_Request0.requestBody());
      assertTrue(httpConnection_Request0.validateTLSCertificates());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(Proxy.Type.DIRECT, proxy0.type());
      assertEquals("DIRECT", proxy0.toString());
      assertTrue(httpConnection_Request1.validateTLSCertificates());
      assertTrue(httpConnection_Request1.followRedirects());
      assertEquals(30000, httpConnection_Request1.timeout());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertEquals(1048576, httpConnection_Request1.maxBodySize());
      assertNull(httpConnection_Request1.requestBody());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request1, httpConnection_Request0);
      
      Parser parser0 = Parser.xmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      Parser parser1 = parser0.setTrackErrors((-1167));
      assertNotNull(parser1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      
      ParseSettings parseSettings0 = parser0.settings();
      assertNotNull(parseSettings0);
      assertFalse(parser0.isTrackErrors());
      assertSame(parser0, parser1);
      
      Parser parser2 = Parser.htmlParser();
      assertNotNull(parser2);
      assertFalse(parser2.equals((Object)parser0));
      assertFalse(parser2.equals((Object)parser1));
      assertFalse(parser2.isTrackErrors());
      assertNotSame(parser2, parser0);
      assertNotSame(parser2, parser1);
      
      Parser parser3 = parser1.settings(parseSettings0);
      assertNotNull(parser3);
      assertFalse(parser0.equals((Object)parser2));
      assertFalse(parser1.equals((Object)parser2));
      assertFalse(parser3.equals((Object)parser2));
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertFalse(parser3.isTrackErrors());
      assertSame(parser0, parser1);
      assertSame(parser0, parser3);
      assertNotSame(parser0, parser2);
      assertSame(parser1, parser0);
      assertSame(parser1, parser3);
      assertNotSame(parser1, parser2);
      assertNotSame(parser3, parser2);
      assertSame(parser3, parser0);
      assertSame(parser3, parser1);
      
      List<Node> list0 = Parser.parseXmlFragment("UTF-8", "UTF-8");
      assertNotNull(list0);
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      
      Parser parser4 = parser1.settings((ParseSettings) null);
      assertNotNull(parser4);
      assertFalse(parser0.equals((Object)parser2));
      assertFalse(parser1.equals((Object)parser2));
      assertFalse(parser4.equals((Object)parser2));
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertFalse(parser4.isTrackErrors());
      assertSame(parser0, parser1);
      assertSame(parser0, parser3);
      assertNotSame(parser0, parser2);
      assertSame(parser0, parser4);
      assertSame(parser1, parser0);
      assertSame(parser1, parser3);
      assertSame(parser1, parser4);
      assertNotSame(parser1, parser2);
      assertSame(parser4, parser0);
      assertSame(parser4, parser1);
      assertNotSame(parser4, parser2);
      assertSame(parser4, parser3);
      
      HttpConnection.Request httpConnection_Request2 = httpConnection_Request1.parser(parser1);
      assertNotNull(httpConnection_Request2);
      assertFalse(parser0.equals((Object)parser2));
      assertFalse(parser1.equals((Object)parser2));
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNull(httpConnection_Request0.requestBody());
      assertTrue(httpConnection_Request0.validateTLSCertificates());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(Proxy.Type.DIRECT, proxy0.type());
      assertEquals("DIRECT", proxy0.toString());
      assertTrue(httpConnection_Request1.validateTLSCertificates());
      assertTrue(httpConnection_Request1.followRedirects());
      assertEquals(30000, httpConnection_Request1.timeout());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertEquals(1048576, httpConnection_Request1.maxBodySize());
      assertNull(httpConnection_Request1.requestBody());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals(1048576, httpConnection_Request2.maxBodySize());
      assertTrue(httpConnection_Request2.validateTLSCertificates());
      assertTrue(httpConnection_Request2.followRedirects());
      assertNull(httpConnection_Request2.requestBody());
      assertEquals(30000, httpConnection_Request2.timeout());
      assertEquals("UTF-8", httpConnection_Request2.postDataCharset());
      assertFalse(httpConnection_Request2.ignoreContentType());
      assertFalse(httpConnection_Request2.ignoreHttpErrors());
      assertSame(httpConnection_Request0, httpConnection_Request2);
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request1, httpConnection_Request0);
      assertSame(httpConnection_Request1, httpConnection_Request2);
      assertSame(parser0, parser1);
      assertSame(parser0, parser3);
      assertNotSame(parser0, parser2);
      assertSame(parser0, parser4);
      assertSame(parser1, parser0);
      assertSame(parser1, parser3);
      assertSame(parser1, parser4);
      assertNotSame(parser1, parser2);
      assertSame(httpConnection_Request2, httpConnection_Request1);
      assertSame(httpConnection_Request2, httpConnection_Request0);
      
      Connection.Request connection_Request0 = httpConnection_Request1.postDataCharset("UTF-8");
      assertNotNull(connection_Request0);
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNull(httpConnection_Request0.requestBody());
      assertTrue(httpConnection_Request0.validateTLSCertificates());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(Proxy.Type.DIRECT, proxy0.type());
      assertEquals("DIRECT", proxy0.toString());
      assertTrue(httpConnection_Request1.validateTLSCertificates());
      assertTrue(httpConnection_Request1.followRedirects());
      assertEquals(30000, httpConnection_Request1.timeout());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertEquals(1048576, httpConnection_Request1.maxBodySize());
      assertNull(httpConnection_Request1.requestBody());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertEquals(1048576, connection_Request0.maxBodySize());
      assertEquals("UTF-8", connection_Request0.postDataCharset());
      assertEquals(30000, connection_Request0.timeout());
      assertTrue(connection_Request0.followRedirects());
      assertTrue(connection_Request0.validateTLSCertificates());
      assertFalse(connection_Request0.ignoreHttpErrors());
      assertNull(connection_Request0.requestBody());
      assertFalse(connection_Request0.ignoreContentType());
      assertSame(httpConnection_Request0, httpConnection_Request2);
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request0, connection_Request0);
      assertSame(httpConnection_Request1, connection_Request0);
      assertSame(httpConnection_Request1, httpConnection_Request0);
      assertSame(httpConnection_Request1, httpConnection_Request2);
      assertSame(connection_Request0, httpConnection_Request1);
      assertSame(connection_Request0, httpConnection_Request2);
      assertSame(connection_Request0, httpConnection_Request0);
      
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      assertNotNull(httpConnection_Response0);
      assertEquals(0, httpConnection_Response0.statusCode());
      assertNull(httpConnection_Response0.contentType());
      assertNull(httpConnection_Response0.charset());
      assertNull(httpConnection_Response0.statusMessage());
      
      HashMap<String, List<String>> hashMap0 = null;
      try {
        hashMap0 = new HashMap<String, List<String>>((-1167));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal initial capacity: -1167
         //
         verifyException("java.util.HashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      assertNotNull(httpConnection_Request0);
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertNull(httpConnection_Request0.requestBody());
      assertTrue(httpConnection_Request0.validateTLSCertificates());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      
      boolean boolean0 = httpConnection_Request0.ignoreHttpErrors();
      assertFalse(boolean0);
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertNull(httpConnection_Request0.requestBody());
      assertTrue(httpConnection_Request0.validateTLSCertificates());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      
      String string0 = "";
      URL uRL0 = MockURL.getHttpExample();
      assertNotNull(uRL0);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      
      HttpConnection.Request httpConnection_Request1 = (HttpConnection.Request)httpConnection_Request0.url(uRL0);
      assertNotNull(httpConnection_Request1);
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertNull(httpConnection_Request0.requestBody());
      assertTrue(httpConnection_Request0.validateTLSCertificates());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals(30000, httpConnection_Request1.timeout());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertEquals(1048576, httpConnection_Request1.maxBodySize());
      assertTrue(httpConnection_Request1.validateTLSCertificates());
      assertTrue(httpConnection_Request1.followRedirects());
      assertNull(httpConnection_Request1.requestBody());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request1, httpConnection_Request0);
      
      HttpConnection.Request httpConnection_Request2 = (HttpConnection.Request)httpConnection_Request0.requestBody(";k@,+})qYy~{l");
      assertNotNull(httpConnection_Request2);
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertTrue(httpConnection_Request0.validateTLSCertificates());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertEquals(";k@,+})qYy~{l", httpConnection_Request0.requestBody());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals(";k@,+})qYy~{l", httpConnection_Request2.requestBody());
      assertTrue(httpConnection_Request2.validateTLSCertificates());
      assertTrue(httpConnection_Request2.followRedirects());
      assertEquals(30000, httpConnection_Request2.timeout());
      assertEquals(1048576, httpConnection_Request2.maxBodySize());
      assertFalse(httpConnection_Request2.ignoreHttpErrors());
      assertEquals("UTF-8", httpConnection_Request2.postDataCharset());
      assertFalse(httpConnection_Request2.ignoreContentType());
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request0, httpConnection_Request2);
      assertSame(httpConnection_Request2, httpConnection_Request1);
      assertSame(httpConnection_Request2, httpConnection_Request0);
      
      ByteArrayInputStream byteArrayInputStream0 = null;
      try {
        byteArrayInputStream0 = new ByteArrayInputStream((byte[]) null, 0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      assertNotNull(httpConnection_Response0);
      assertNull(httpConnection_Response0.statusMessage());
      assertNull(httpConnection_Response0.contentType());
      assertEquals(0, httpConnection_Response0.statusCode());
      assertNull(httpConnection_Response0.charset());
      
      // Undeclared exception!
      try { 
        httpConnection_Response0.bodyAsBytes();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Request must be executed (with .execute(), .get(), or .post() before getting response body
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create("Sr+YN)\"l^o}y$L]LH", ":weby4L");
      assertNotNull(httpConnection_KeyVal0);
      assertFalse(httpConnection_KeyVal0.hasInputStream());
      assertEquals("Sr+YN)\"l^o}y$L]LH", httpConnection_KeyVal0.key());
      assertEquals(":weby4L", httpConnection_KeyVal0.value());
      assertNull(httpConnection_KeyVal0.contentType());
      
      HttpConnection.KeyVal httpConnection_KeyVal1 = httpConnection_KeyVal0.value("");
      assertNotNull(httpConnection_KeyVal1);
      assertEquals("", httpConnection_KeyVal0.value());
      assertFalse(httpConnection_KeyVal0.hasInputStream());
      assertEquals("Sr+YN)\"l^o}y$L]LH", httpConnection_KeyVal0.key());
      assertNull(httpConnection_KeyVal0.contentType());
      assertEquals("Sr+YN)\"l^o}y$L]LH", httpConnection_KeyVal1.key());
      assertNull(httpConnection_KeyVal1.contentType());
      assertEquals("", httpConnection_KeyVal1.value());
      assertFalse(httpConnection_KeyVal1.hasInputStream());
      assertSame(httpConnection_KeyVal0, httpConnection_KeyVal1);
      assertSame(httpConnection_KeyVal1, httpConnection_KeyVal0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-96);
      byteArray0[1] = (byte) (-38);
      byteArray0[2] = (byte)49;
      String string0 = httpConnection_KeyVal0.toString();
      assertEquals("Sr+YN)\"l^o}y$L]LH=", string0);
      assertNotNull(string0);
      assertEquals("", httpConnection_KeyVal0.value());
      assertFalse(httpConnection_KeyVal0.hasInputStream());
      assertEquals("Sr+YN)\"l^o}y$L]LH", httpConnection_KeyVal0.key());
      assertNull(httpConnection_KeyVal0.contentType());
      assertSame(httpConnection_KeyVal0, httpConnection_KeyVal1);
      
      byteArray0[3] = (byte) (-25);
      byteArray0[4] = (byte) (-19);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)14;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte) (-96), (byte) (-38), (byte)49, (byte) (-25), (byte) (-19), (byte)0, (byte)0, (byte)14}, byteArray0);
      assertEquals(8, byteArray0.length);
      assertEquals(8, byteArrayInputStream0.available());
      
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      assertNotNull(sequenceInputStream0);
      assertArrayEquals(new byte[] {(byte) (-96), (byte) (-38), (byte)49, (byte) (-25), (byte) (-19), (byte)0, (byte)0, (byte)14}, byteArray0);
      assertEquals(8, byteArray0.length);
      assertEquals(8, byteArrayInputStream0.available());
      
      int int0 = sequenceInputStream0.read();
      assertEquals(160, int0);
      assertArrayEquals(new byte[] {(byte) (-96), (byte) (-38), (byte)49, (byte) (-25), (byte) (-19), (byte)0, (byte)0, (byte)14}, byteArray0);
      assertEquals(8, byteArray0.length);
      assertEquals(7, byteArrayInputStream0.available());
      
      HttpConnection.KeyVal httpConnection_KeyVal2 = httpConnection_KeyVal1.inputStream((InputStream) sequenceInputStream0);
      assertNotNull(httpConnection_KeyVal2);
      assertArrayEquals(new byte[] {(byte) (-96), (byte) (-38), (byte)49, (byte) (-25), (byte) (-19), (byte)0, (byte)0, (byte)14}, byteArray0);
      assertEquals(8, byteArray0.length);
      assertEquals("", httpConnection_KeyVal0.value());
      assertEquals("Sr+YN)\"l^o}y$L]LH", httpConnection_KeyVal0.key());
      assertTrue(httpConnection_KeyVal0.hasInputStream());
      assertNull(httpConnection_KeyVal0.contentType());
      assertEquals("Sr+YN)\"l^o}y$L]LH", httpConnection_KeyVal1.key());
      assertNull(httpConnection_KeyVal1.contentType());
      assertEquals("", httpConnection_KeyVal1.value());
      assertTrue(httpConnection_KeyVal1.hasInputStream());
      assertEquals(7, byteArrayInputStream0.available());
      assertEquals("", httpConnection_KeyVal2.value());
      assertEquals("Sr+YN)\"l^o}y$L]LH", httpConnection_KeyVal2.key());
      assertNull(httpConnection_KeyVal2.contentType());
      assertTrue(httpConnection_KeyVal2.hasInputStream());
      assertSame(httpConnection_KeyVal0, httpConnection_KeyVal2);
      assertSame(httpConnection_KeyVal0, httpConnection_KeyVal1);
      assertSame(httpConnection_KeyVal1, httpConnection_KeyVal0);
      assertSame(httpConnection_KeyVal1, httpConnection_KeyVal2);
      assertSame(httpConnection_KeyVal2, httpConnection_KeyVal1);
      assertSame(httpConnection_KeyVal2, httpConnection_KeyVal0);
      
      String string1 = httpConnection_KeyVal2.toString();
      assertEquals("Sr+YN)\"l^o}y$L]LH=", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertArrayEquals(new byte[] {(byte) (-96), (byte) (-38), (byte)49, (byte) (-25), (byte) (-19), (byte)0, (byte)0, (byte)14}, byteArray0);
      assertEquals(8, byteArray0.length);
      assertEquals("", httpConnection_KeyVal0.value());
      assertEquals("Sr+YN)\"l^o}y$L]LH", httpConnection_KeyVal0.key());
      assertTrue(httpConnection_KeyVal0.hasInputStream());
      assertNull(httpConnection_KeyVal0.contentType());
      assertEquals("Sr+YN)\"l^o}y$L]LH", httpConnection_KeyVal1.key());
      assertNull(httpConnection_KeyVal1.contentType());
      assertEquals("", httpConnection_KeyVal1.value());
      assertTrue(httpConnection_KeyVal1.hasInputStream());
      assertEquals(7, byteArrayInputStream0.available());
      assertEquals("", httpConnection_KeyVal2.value());
      assertEquals("Sr+YN)\"l^o}y$L]LH", httpConnection_KeyVal2.key());
      assertNull(httpConnection_KeyVal2.contentType());
      assertTrue(httpConnection_KeyVal2.hasInputStream());
      assertSame(httpConnection_KeyVal0, httpConnection_KeyVal2);
      assertSame(httpConnection_KeyVal0, httpConnection_KeyVal1);
      assertSame(httpConnection_KeyVal1, httpConnection_KeyVal0);
      assertSame(httpConnection_KeyVal1, httpConnection_KeyVal2);
      assertSame(httpConnection_KeyVal2, httpConnection_KeyVal1);
      assertSame(httpConnection_KeyVal2, httpConnection_KeyVal0);
      
      InputStream inputStream0 = httpConnection_KeyVal2.inputStream();
      assertNotNull(inputStream0);
      assertArrayEquals(new byte[] {(byte) (-96), (byte) (-38), (byte)49, (byte) (-25), (byte) (-19), (byte)0, (byte)0, (byte)14}, byteArray0);
      assertEquals(8, byteArray0.length);
      assertEquals("", httpConnection_KeyVal0.value());
      assertEquals("Sr+YN)\"l^o}y$L]LH", httpConnection_KeyVal0.key());
      assertTrue(httpConnection_KeyVal0.hasInputStream());
      assertNull(httpConnection_KeyVal0.contentType());
      assertEquals("Sr+YN)\"l^o}y$L]LH", httpConnection_KeyVal1.key());
      assertNull(httpConnection_KeyVal1.contentType());
      assertEquals("", httpConnection_KeyVal1.value());
      assertTrue(httpConnection_KeyVal1.hasInputStream());
      assertEquals(7, byteArrayInputStream0.available());
      assertEquals("", httpConnection_KeyVal2.value());
      assertEquals("Sr+YN)\"l^o}y$L]LH", httpConnection_KeyVal2.key());
      assertNull(httpConnection_KeyVal2.contentType());
      assertTrue(httpConnection_KeyVal2.hasInputStream());
      assertSame(httpConnection_KeyVal0, httpConnection_KeyVal2);
      assertSame(httpConnection_KeyVal0, httpConnection_KeyVal1);
      assertSame(inputStream0, sequenceInputStream0);
      assertSame(httpConnection_KeyVal1, httpConnection_KeyVal0);
      assertSame(httpConnection_KeyVal1, httpConnection_KeyVal2);
      assertSame(sequenceInputStream0, inputStream0);
      assertSame(httpConnection_KeyVal2, httpConnection_KeyVal1);
      assertSame(httpConnection_KeyVal2, httpConnection_KeyVal0);
      
      HttpConnection.KeyVal httpConnection_KeyVal3 = httpConnection_KeyVal0.inputStream((InputStream) byteArrayInputStream0);
      assertNotNull(httpConnection_KeyVal3);
      assertArrayEquals(new byte[] {(byte) (-96), (byte) (-38), (byte)49, (byte) (-25), (byte) (-19), (byte)0, (byte)0, (byte)14}, byteArray0);
      assertEquals(8, byteArray0.length);
      assertEquals("", httpConnection_KeyVal0.value());
      assertEquals("Sr+YN)\"l^o}y$L]LH", httpConnection_KeyVal0.key());
      assertTrue(httpConnection_KeyVal0.hasInputStream());
      assertNull(httpConnection_KeyVal0.contentType());
      assertNull(httpConnection_KeyVal3.contentType());
      assertTrue(httpConnection_KeyVal3.hasInputStream());
      assertEquals("", httpConnection_KeyVal3.value());
      assertEquals("Sr+YN)\"l^o}y$L]LH", httpConnection_KeyVal3.key());
      assertEquals(7, byteArrayInputStream0.available());
      assertSame(httpConnection_KeyVal0, httpConnection_KeyVal3);
      assertSame(httpConnection_KeyVal0, httpConnection_KeyVal2);
      assertSame(httpConnection_KeyVal0, httpConnection_KeyVal1);
      assertSame(httpConnection_KeyVal3, httpConnection_KeyVal2);
      assertSame(httpConnection_KeyVal3, httpConnection_KeyVal1);
      assertSame(httpConnection_KeyVal3, httpConnection_KeyVal0);
      
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      assertNotNull(httpConnection_Request0);
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertTrue(httpConnection_Request0.validateTLSCertificates());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.timeout((int) (byte)0);
      assertNotNull(httpConnection_Request1);
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertTrue(httpConnection_Request0.validateTLSCertificates());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(0, httpConnection_Request0.timeout());
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals(0, httpConnection_Request1.timeout());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertNull(httpConnection_Request1.requestBody());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertEquals(1048576, httpConnection_Request1.maxBodySize());
      assertTrue(httpConnection_Request1.validateTLSCertificates());
      assertTrue(httpConnection_Request1.followRedirects());
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request1, httpConnection_Request0);
      
      HttpConnection.Request httpConnection_Request2 = httpConnection_Request1.data((Connection.KeyVal) httpConnection_KeyVal3);
      assertNotNull(httpConnection_Request2);
      assertArrayEquals(new byte[] {(byte) (-96), (byte) (-38), (byte)49, (byte) (-25), (byte) (-19), (byte)0, (byte)0, (byte)14}, byteArray0);
      assertEquals(8, byteArray0.length);
      assertEquals("", httpConnection_KeyVal0.value());
      assertEquals("Sr+YN)\"l^o}y$L]LH", httpConnection_KeyVal0.key());
      assertTrue(httpConnection_KeyVal0.hasInputStream());
      assertNull(httpConnection_KeyVal0.contentType());
      assertNull(httpConnection_KeyVal3.contentType());
      assertTrue(httpConnection_KeyVal3.hasInputStream());
      assertEquals("", httpConnection_KeyVal3.value());
      assertEquals("Sr+YN)\"l^o}y$L]LH", httpConnection_KeyVal3.key());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertTrue(httpConnection_Request0.validateTLSCertificates());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(0, httpConnection_Request0.timeout());
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals(0, httpConnection_Request1.timeout());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertNull(httpConnection_Request1.requestBody());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertEquals(1048576, httpConnection_Request1.maxBodySize());
      assertTrue(httpConnection_Request1.validateTLSCertificates());
      assertTrue(httpConnection_Request1.followRedirects());
      assertNull(httpConnection_Request2.requestBody());
      assertFalse(httpConnection_Request2.ignoreHttpErrors());
      assertEquals("UTF-8", httpConnection_Request2.postDataCharset());
      assertFalse(httpConnection_Request2.ignoreContentType());
      assertEquals(0, httpConnection_Request2.timeout());
      assertEquals(1048576, httpConnection_Request2.maxBodySize());
      assertTrue(httpConnection_Request2.followRedirects());
      assertTrue(httpConnection_Request2.validateTLSCertificates());
      assertEquals(7, byteArrayInputStream0.available());
      assertSame(httpConnection_KeyVal0, httpConnection_KeyVal3);
      assertSame(httpConnection_KeyVal0, httpConnection_KeyVal2);
      assertSame(httpConnection_KeyVal0, httpConnection_KeyVal1);
      assertSame(httpConnection_KeyVal3, httpConnection_KeyVal2);
      assertSame(httpConnection_KeyVal3, httpConnection_KeyVal1);
      assertSame(httpConnection_KeyVal3, httpConnection_KeyVal0);
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request0, httpConnection_Request2);
      assertSame(httpConnection_Request1, httpConnection_Request2);
      assertSame(httpConnection_Request1, httpConnection_Request0);
      assertSame(httpConnection_Request2, httpConnection_Request0);
      assertSame(httpConnection_Request2, httpConnection_Request1);
      
      // Undeclared exception!
      try { 
        httpConnection_Request2.proxy("Sr+YN)\"l^o}y$L]LH=", (-1664));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // port out of range:-1664
         //
         verifyException("java.net.InetSocketAddress", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      assertNotNull(httpConnection_Request0);
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertTrue(httpConnection_Request0.validateTLSCertificates());
      assertTrue(httpConnection_Request0.followRedirects());
      
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.parser((Parser) null);
      assertNotNull(httpConnection_Request1);
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertTrue(httpConnection_Request0.validateTLSCertificates());
      assertTrue(httpConnection_Request0.followRedirects());
      assertTrue(httpConnection_Request1.validateTLSCertificates());
      assertTrue(httpConnection_Request1.followRedirects());
      assertEquals(30000, httpConnection_Request1.timeout());
      assertEquals(1048576, httpConnection_Request1.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertNull(httpConnection_Request1.requestBody());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request1, httpConnection_Request0);
      
      HttpConnection.Request httpConnection_Request2 = (HttpConnection.Request)httpConnection_Request0.cookie("Interrupting {}", "Interrupting {}");
      assertNotNull(httpConnection_Request2);
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertTrue(httpConnection_Request0.validateTLSCertificates());
      assertTrue(httpConnection_Request0.followRedirects());
      assertFalse(httpConnection_Request2.ignoreHttpErrors());
      assertNull(httpConnection_Request2.requestBody());
      assertTrue(httpConnection_Request2.validateTLSCertificates());
      assertEquals(30000, httpConnection_Request2.timeout());
      assertEquals(1048576, httpConnection_Request2.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request2.postDataCharset());
      assertFalse(httpConnection_Request2.ignoreContentType());
      assertTrue(httpConnection_Request2.followRedirects());
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request0, httpConnection_Request2);
      assertSame(httpConnection_Request2, httpConnection_Request1);
      assertSame(httpConnection_Request2, httpConnection_Request0);
      
      HttpConnection.Request httpConnection_Request3 = (HttpConnection.Request)httpConnection_Request1.addHeader("Interrupting {}", "Interrupting {}");
      assertNotNull(httpConnection_Request3);
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertTrue(httpConnection_Request0.validateTLSCertificates());
      assertTrue(httpConnection_Request0.followRedirects());
      assertTrue(httpConnection_Request1.validateTLSCertificates());
      assertTrue(httpConnection_Request1.followRedirects());
      assertEquals(30000, httpConnection_Request1.timeout());
      assertEquals(1048576, httpConnection_Request1.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertNull(httpConnection_Request1.requestBody());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertEquals(1048576, httpConnection_Request3.maxBodySize());
      assertEquals(30000, httpConnection_Request3.timeout());
      assertTrue(httpConnection_Request3.followRedirects());
      assertTrue(httpConnection_Request3.validateTLSCertificates());
      assertFalse(httpConnection_Request3.ignoreHttpErrors());
      assertNull(httpConnection_Request3.requestBody());
      assertFalse(httpConnection_Request3.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request3.postDataCharset());
      assertSame(httpConnection_Request0, httpConnection_Request3);
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request0, httpConnection_Request2);
      assertSame(httpConnection_Request1, httpConnection_Request2);
      assertSame(httpConnection_Request1, httpConnection_Request0);
      assertSame(httpConnection_Request1, httpConnection_Request3);
      assertSame(httpConnection_Request3, httpConnection_Request1);
      assertSame(httpConnection_Request3, httpConnection_Request0);
      assertSame(httpConnection_Request3, httpConnection_Request2);
      
      HttpConnection.Request httpConnection_Request4 = httpConnection_Request1.proxy("lhN07P6R2C#E", 14);
      assertNotNull(httpConnection_Request4);
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertTrue(httpConnection_Request0.validateTLSCertificates());
      assertTrue(httpConnection_Request0.followRedirects());
      assertTrue(httpConnection_Request1.validateTLSCertificates());
      assertTrue(httpConnection_Request1.followRedirects());
      assertEquals(30000, httpConnection_Request1.timeout());
      assertEquals(1048576, httpConnection_Request1.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertNull(httpConnection_Request1.requestBody());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertNull(httpConnection_Request4.requestBody());
      assertFalse(httpConnection_Request4.ignoreHttpErrors());
      assertEquals(30000, httpConnection_Request4.timeout());
      assertFalse(httpConnection_Request4.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request4.postDataCharset());
      assertEquals(1048576, httpConnection_Request4.maxBodySize());
      assertTrue(httpConnection_Request4.validateTLSCertificates());
      assertTrue(httpConnection_Request4.followRedirects());
      assertSame(httpConnection_Request0, httpConnection_Request3);
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request0, httpConnection_Request4);
      assertSame(httpConnection_Request0, httpConnection_Request2);
      assertSame(httpConnection_Request1, httpConnection_Request2);
      assertSame(httpConnection_Request1, httpConnection_Request4);
      assertSame(httpConnection_Request1, httpConnection_Request0);
      assertSame(httpConnection_Request1, httpConnection_Request3);
      assertSame(httpConnection_Request4, httpConnection_Request0);
      assertSame(httpConnection_Request4, httpConnection_Request1);
      assertSame(httpConnection_Request4, httpConnection_Request3);
      assertSame(httpConnection_Request4, httpConnection_Request2);
      
      HttpConnection.Request httpConnection_Request5 = (HttpConnection.Request)httpConnection_Request0.ignoreContentType(false);
      assertNotNull(httpConnection_Request5);
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertTrue(httpConnection_Request0.validateTLSCertificates());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(30000, httpConnection_Request5.timeout());
      assertFalse(httpConnection_Request5.ignoreHttpErrors());
      assertNull(httpConnection_Request5.requestBody());
      assertTrue(httpConnection_Request5.validateTLSCertificates());
      assertTrue(httpConnection_Request5.followRedirects());
      assertEquals(1048576, httpConnection_Request5.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request5.postDataCharset());
      assertFalse(httpConnection_Request5.ignoreContentType());
      assertSame(httpConnection_Request0, httpConnection_Request3);
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request0, httpConnection_Request4);
      assertSame(httpConnection_Request0, httpConnection_Request5);
      assertSame(httpConnection_Request0, httpConnection_Request2);
      assertSame(httpConnection_Request5, httpConnection_Request4);
      assertSame(httpConnection_Request5, httpConnection_Request3);
      assertSame(httpConnection_Request5, httpConnection_Request2);
      assertSame(httpConnection_Request5, httpConnection_Request0);
      assertSame(httpConnection_Request5, httpConnection_Request1);
      
      HttpConnection.Request httpConnection_Request6 = (HttpConnection.Request)httpConnection_Request4.followRedirects(false);
      assertNotNull(httpConnection_Request6);
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertFalse(httpConnection_Request0.followRedirects());
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertTrue(httpConnection_Request0.validateTLSCertificates());
      assertTrue(httpConnection_Request1.validateTLSCertificates());
      assertEquals(30000, httpConnection_Request1.timeout());
      assertEquals(1048576, httpConnection_Request1.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertFalse(httpConnection_Request1.followRedirects());
      assertNull(httpConnection_Request1.requestBody());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertFalse(httpConnection_Request4.followRedirects());
      assertNull(httpConnection_Request4.requestBody());
      assertFalse(httpConnection_Request4.ignoreHttpErrors());
      assertEquals(30000, httpConnection_Request4.timeout());
      assertFalse(httpConnection_Request4.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request4.postDataCharset());
      assertEquals(1048576, httpConnection_Request4.maxBodySize());
      assertTrue(httpConnection_Request4.validateTLSCertificates());
      assertFalse(httpConnection_Request6.followRedirects());
      assertEquals(1048576, httpConnection_Request6.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request6.postDataCharset());
      assertFalse(httpConnection_Request6.ignoreContentType());
      assertTrue(httpConnection_Request6.validateTLSCertificates());
      assertFalse(httpConnection_Request6.ignoreHttpErrors());
      assertEquals(30000, httpConnection_Request6.timeout());
      assertNull(httpConnection_Request6.requestBody());
      assertSame(httpConnection_Request0, httpConnection_Request3);
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request0, httpConnection_Request4);
      assertSame(httpConnection_Request0, httpConnection_Request5);
      assertSame(httpConnection_Request0, httpConnection_Request6);
      assertSame(httpConnection_Request0, httpConnection_Request2);
      assertSame(httpConnection_Request1, httpConnection_Request6);
      assertSame(httpConnection_Request1, httpConnection_Request5);
      assertSame(httpConnection_Request1, httpConnection_Request2);
      assertSame(httpConnection_Request1, httpConnection_Request4);
      assertSame(httpConnection_Request1, httpConnection_Request0);
      assertSame(httpConnection_Request1, httpConnection_Request3);
      assertSame(httpConnection_Request4, httpConnection_Request0);
      assertSame(httpConnection_Request4, httpConnection_Request1);
      assertSame(httpConnection_Request4, httpConnection_Request3);
      assertSame(httpConnection_Request4, httpConnection_Request6);
      assertSame(httpConnection_Request4, httpConnection_Request2);
      assertSame(httpConnection_Request4, httpConnection_Request5);
      assertSame(httpConnection_Request6, httpConnection_Request3);
      assertSame(httpConnection_Request6, httpConnection_Request1);
      assertSame(httpConnection_Request6, httpConnection_Request0);
      assertSame(httpConnection_Request6, httpConnection_Request5);
      assertSame(httpConnection_Request6, httpConnection_Request2);
      assertSame(httpConnection_Request6, httpConnection_Request4);
      
      HttpConnection.Request httpConnection_Request7 = httpConnection_Request0.timeout(1656);
      assertNotNull(httpConnection_Request7);
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertFalse(httpConnection_Request0.followRedirects());
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals(1656, httpConnection_Request0.timeout());
      assertTrue(httpConnection_Request0.validateTLSCertificates());
      assertEquals("UTF-8", httpConnection_Request7.postDataCharset());
      assertFalse(httpConnection_Request7.ignoreContentType());
      assertFalse(httpConnection_Request7.followRedirects());
      assertFalse(httpConnection_Request7.ignoreHttpErrors());
      assertNull(httpConnection_Request7.requestBody());
      assertEquals(1656, httpConnection_Request7.timeout());
      assertTrue(httpConnection_Request7.validateTLSCertificates());
      assertEquals(1048576, httpConnection_Request7.maxBodySize());
      assertSame(httpConnection_Request0, httpConnection_Request3);
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request0, httpConnection_Request4);
      assertSame(httpConnection_Request0, httpConnection_Request5);
      assertSame(httpConnection_Request0, httpConnection_Request6);
      assertSame(httpConnection_Request0, httpConnection_Request2);
      assertSame(httpConnection_Request0, httpConnection_Request7);
      assertSame(httpConnection_Request7, httpConnection_Request3);
      assertSame(httpConnection_Request7, httpConnection_Request1);
      assertSame(httpConnection_Request7, httpConnection_Request4);
      assertSame(httpConnection_Request7, httpConnection_Request0);
      assertSame(httpConnection_Request7, httpConnection_Request2);
      assertSame(httpConnection_Request7, httpConnection_Request5);
      assertSame(httpConnection_Request7, httpConnection_Request6);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      assertNotNull(httpConnection_Request0);
      assertTrue(httpConnection_Request0.followRedirects());
      assertTrue(httpConnection_Request0.validateTLSCertificates());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertNull(httpConnection_Request0.requestBody());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertEquals(30000, httpConnection_Request0.timeout());
      
      Connection.Request connection_Request0 = httpConnection_Request0.maxBodySize(0);
      assertNotNull(connection_Request0);
      assertTrue(httpConnection_Request0.followRedirects());
      assertTrue(httpConnection_Request0.validateTLSCertificates());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals(0, httpConnection_Request0.maxBodySize());
      assertNull(httpConnection_Request0.requestBody());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertTrue(connection_Request0.validateTLSCertificates());
      assertTrue(connection_Request0.followRedirects());
      assertEquals(0, connection_Request0.maxBodySize());
      assertEquals(30000, connection_Request0.timeout());
      assertEquals("UTF-8", connection_Request0.postDataCharset());
      assertFalse(connection_Request0.ignoreContentType());
      assertNull(connection_Request0.requestBody());
      assertFalse(connection_Request0.ignoreHttpErrors());
      assertSame(httpConnection_Request0, connection_Request0);
      assertSame(connection_Request0, httpConnection_Request0);
      
      boolean boolean0 = false;
      HttpConnection.Request httpConnection_Request1 = (HttpConnection.Request)httpConnection_Request0.removeHeader("i<j,yPkJWC,Bv+4t>aP");
      assertNotNull(httpConnection_Request1);
      assertTrue(httpConnection_Request0.followRedirects());
      assertTrue(httpConnection_Request0.validateTLSCertificates());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals(0, httpConnection_Request0.maxBodySize());
      assertNull(httpConnection_Request0.requestBody());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertEquals(0, httpConnection_Request1.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertEquals(30000, httpConnection_Request1.timeout());
      assertTrue(httpConnection_Request1.followRedirects());
      assertTrue(httpConnection_Request1.validateTLSCertificates());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertNull(httpConnection_Request1.requestBody());
      assertSame(httpConnection_Request0, connection_Request0);
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request1, httpConnection_Request0);
      assertSame(httpConnection_Request1, connection_Request0);
      
      httpConnection_Request0.validateTLSCertificates(false);
      assertTrue(httpConnection_Request0.followRedirects());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals(0, httpConnection_Request0.maxBodySize());
      assertNull(httpConnection_Request0.requestBody());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.validateTLSCertificates());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertSame(httpConnection_Request0, connection_Request0);
      assertSame(httpConnection_Request0, httpConnection_Request1);
      
      HttpConnection.Request httpConnection_Request2 = (HttpConnection.Request)httpConnection_Request0.followRedirects(true);
      assertNotNull(httpConnection_Request2);
      assertTrue(httpConnection_Request0.followRedirects());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals(0, httpConnection_Request0.maxBodySize());
      assertNull(httpConnection_Request0.requestBody());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.validateTLSCertificates());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertEquals(0, httpConnection_Request2.maxBodySize());
      assertFalse(httpConnection_Request2.validateTLSCertificates());
      assertTrue(httpConnection_Request2.followRedirects());
      assertEquals(30000, httpConnection_Request2.timeout());
      assertFalse(httpConnection_Request2.ignoreHttpErrors());
      assertNull(httpConnection_Request2.requestBody());
      assertFalse(httpConnection_Request2.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request2.postDataCharset());
      assertSame(httpConnection_Request0, connection_Request0);
      assertSame(httpConnection_Request0, httpConnection_Request2);
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request2, httpConnection_Request0);
      assertSame(httpConnection_Request2, httpConnection_Request1);
      assertSame(httpConnection_Request2, connection_Request0);
      
      Proxy proxy0 = httpConnection_Request0.proxy();
      assertNull(proxy0);
      assertTrue(httpConnection_Request0.followRedirects());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals(0, httpConnection_Request0.maxBodySize());
      assertNull(httpConnection_Request0.requestBody());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.validateTLSCertificates());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertSame(httpConnection_Request0, connection_Request0);
      assertSame(httpConnection_Request0, httpConnection_Request2);
      assertSame(httpConnection_Request0, httpConnection_Request1);
      
      // Undeclared exception!
      try { 
        HttpConnection.Response.execute((Connection.Request) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Request must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      assertNotNull(httpConnection_Request0);
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertTrue(httpConnection_Request0.validateTLSCertificates());
      
      Proxy proxy0 = httpConnection_Request0.proxy();
      assertNull(proxy0);
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertTrue(httpConnection_Request0.validateTLSCertificates());
      
      String string0 = "";
      // Undeclared exception!
      try { 
        HttpConnection.KeyVal.create("", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Data key must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      assertNotNull(httpConnection_Request0);
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNull(httpConnection_Request0.requestBody());
      assertTrue(httpConnection_Request0.validateTLSCertificates());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.timeout(1721);
      assertNotNull(httpConnection_Request1);
      assertEquals(1721, httpConnection_Request0.timeout());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNull(httpConnection_Request0.requestBody());
      assertTrue(httpConnection_Request0.validateTLSCertificates());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals(1048576, httpConnection_Request1.maxBodySize());
      assertTrue(httpConnection_Request1.validateTLSCertificates());
      assertTrue(httpConnection_Request1.followRedirects());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertEquals(1721, httpConnection_Request1.timeout());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertNull(httpConnection_Request1.requestBody());
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request1, httpConnection_Request0);
      
      Proxy proxy0 = Proxy.NO_PROXY;
      assertNotNull(proxy0);
      assertEquals("DIRECT", proxy0.toString());
      assertEquals(Proxy.Type.DIRECT, proxy0.type());
      
      HttpConnection.Request httpConnection_Request2 = httpConnection_Request1.proxy(proxy0);
      assertNotNull(httpConnection_Request2);
      assertEquals(1721, httpConnection_Request0.timeout());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNull(httpConnection_Request0.requestBody());
      assertTrue(httpConnection_Request0.validateTLSCertificates());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals(1048576, httpConnection_Request1.maxBodySize());
      assertTrue(httpConnection_Request1.validateTLSCertificates());
      assertTrue(httpConnection_Request1.followRedirects());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertEquals(1721, httpConnection_Request1.timeout());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertNull(httpConnection_Request1.requestBody());
      assertEquals("DIRECT", proxy0.toString());
      assertEquals(Proxy.Type.DIRECT, proxy0.type());
      assertEquals("UTF-8", httpConnection_Request2.postDataCharset());
      assertFalse(httpConnection_Request2.ignoreHttpErrors());
      assertNull(httpConnection_Request2.requestBody());
      assertEquals(1721, httpConnection_Request2.timeout());
      assertTrue(httpConnection_Request2.validateTLSCertificates());
      assertFalse(httpConnection_Request2.ignoreContentType());
      assertEquals(1048576, httpConnection_Request2.maxBodySize());
      assertTrue(httpConnection_Request2.followRedirects());
      assertSame(httpConnection_Request0, httpConnection_Request2);
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request1, httpConnection_Request0);
      assertSame(httpConnection_Request1, httpConnection_Request2);
      assertSame(httpConnection_Request2, httpConnection_Request1);
      assertSame(httpConnection_Request2, httpConnection_Request0);
      
      HttpConnection.Request httpConnection_Request3 = httpConnection_Request2.proxy("+oNh(\"9ZuW'.1-p4", 1721);
      assertNotNull(httpConnection_Request3);
      assertEquals(1721, httpConnection_Request0.timeout());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNull(httpConnection_Request0.requestBody());
      assertTrue(httpConnection_Request0.validateTLSCertificates());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals(1048576, httpConnection_Request1.maxBodySize());
      assertTrue(httpConnection_Request1.validateTLSCertificates());
      assertTrue(httpConnection_Request1.followRedirects());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertEquals(1721, httpConnection_Request1.timeout());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertNull(httpConnection_Request1.requestBody());
      assertEquals("DIRECT", proxy0.toString());
      assertEquals(Proxy.Type.DIRECT, proxy0.type());
      assertEquals("UTF-8", httpConnection_Request2.postDataCharset());
      assertFalse(httpConnection_Request2.ignoreHttpErrors());
      assertNull(httpConnection_Request2.requestBody());
      assertEquals(1721, httpConnection_Request2.timeout());
      assertTrue(httpConnection_Request2.validateTLSCertificates());
      assertFalse(httpConnection_Request2.ignoreContentType());
      assertEquals(1048576, httpConnection_Request2.maxBodySize());
      assertTrue(httpConnection_Request2.followRedirects());
      assertNull(httpConnection_Request3.requestBody());
      assertFalse(httpConnection_Request3.ignoreHttpErrors());
      assertEquals(1721, httpConnection_Request3.timeout());
      assertEquals(1048576, httpConnection_Request3.maxBodySize());
      assertTrue(httpConnection_Request3.validateTLSCertificates());
      assertFalse(httpConnection_Request3.ignoreContentType());
      assertTrue(httpConnection_Request3.followRedirects());
      assertEquals("UTF-8", httpConnection_Request3.postDataCharset());
      assertSame(httpConnection_Request0, httpConnection_Request2);
      assertSame(httpConnection_Request0, httpConnection_Request3);
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request1, httpConnection_Request0);
      assertSame(httpConnection_Request1, httpConnection_Request3);
      assertSame(httpConnection_Request1, httpConnection_Request2);
      assertSame(httpConnection_Request2, httpConnection_Request3);
      assertSame(httpConnection_Request2, httpConnection_Request1);
      assertSame(httpConnection_Request2, httpConnection_Request0);
      assertSame(httpConnection_Request3, httpConnection_Request2);
      assertSame(httpConnection_Request3, httpConnection_Request1);
      assertSame(httpConnection_Request3, httpConnection_Request0);
      
      Parser parser0 = httpConnection_Request3.parser();
      assertNotNull(parser0);
      assertEquals(1721, httpConnection_Request0.timeout());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNull(httpConnection_Request0.requestBody());
      assertTrue(httpConnection_Request0.validateTLSCertificates());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals(1048576, httpConnection_Request1.maxBodySize());
      assertTrue(httpConnection_Request1.validateTLSCertificates());
      assertTrue(httpConnection_Request1.followRedirects());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertEquals(1721, httpConnection_Request1.timeout());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertNull(httpConnection_Request1.requestBody());
      assertEquals("DIRECT", proxy0.toString());
      assertEquals(Proxy.Type.DIRECT, proxy0.type());
      assertEquals("UTF-8", httpConnection_Request2.postDataCharset());
      assertFalse(httpConnection_Request2.ignoreHttpErrors());
      assertNull(httpConnection_Request2.requestBody());
      assertEquals(1721, httpConnection_Request2.timeout());
      assertTrue(httpConnection_Request2.validateTLSCertificates());
      assertFalse(httpConnection_Request2.ignoreContentType());
      assertEquals(1048576, httpConnection_Request2.maxBodySize());
      assertTrue(httpConnection_Request2.followRedirects());
      assertNull(httpConnection_Request3.requestBody());
      assertFalse(httpConnection_Request3.ignoreHttpErrors());
      assertEquals(1721, httpConnection_Request3.timeout());
      assertEquals(1048576, httpConnection_Request3.maxBodySize());
      assertTrue(httpConnection_Request3.validateTLSCertificates());
      assertFalse(httpConnection_Request3.ignoreContentType());
      assertTrue(httpConnection_Request3.followRedirects());
      assertEquals("UTF-8", httpConnection_Request3.postDataCharset());
      assertFalse(parser0.isTrackErrors());
      assertSame(httpConnection_Request0, httpConnection_Request2);
      assertSame(httpConnection_Request0, httpConnection_Request3);
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request1, httpConnection_Request0);
      assertSame(httpConnection_Request1, httpConnection_Request3);
      assertSame(httpConnection_Request1, httpConnection_Request2);
      assertSame(httpConnection_Request2, httpConnection_Request3);
      assertSame(httpConnection_Request2, httpConnection_Request1);
      assertSame(httpConnection_Request2, httpConnection_Request0);
      assertSame(httpConnection_Request3, httpConnection_Request2);
      assertSame(httpConnection_Request3, httpConnection_Request1);
      assertSame(httpConnection_Request3, httpConnection_Request0);
      
      // Undeclared exception!
      try { 
        HttpConnection.KeyVal.create((String) null, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Data key must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      assertNotNull(httpConnection_Request0);
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNull(httpConnection_Request0.requestBody());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertTrue(httpConnection_Request0.validateTLSCertificates());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertTrue(httpConnection_Request0.followRedirects());
      
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create("*43'5z;CC", "*43'5z;CC");
      assertNotNull(httpConnection_KeyVal0);
      assertEquals("*43'5z;CC", httpConnection_KeyVal0.key());
      assertNull(httpConnection_KeyVal0.contentType());
      assertFalse(httpConnection_KeyVal0.hasInputStream());
      assertEquals("*43'5z;CC", httpConnection_KeyVal0.value());
      
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.data((Connection.KeyVal) httpConnection_KeyVal0);
      assertNotNull(httpConnection_Request1);
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNull(httpConnection_Request0.requestBody());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertTrue(httpConnection_Request0.validateTLSCertificates());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals("*43'5z;CC", httpConnection_KeyVal0.key());
      assertNull(httpConnection_KeyVal0.contentType());
      assertFalse(httpConnection_KeyVal0.hasInputStream());
      assertEquals("*43'5z;CC", httpConnection_KeyVal0.value());
      assertTrue(httpConnection_Request1.followRedirects());
      assertEquals(1048576, httpConnection_Request1.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertTrue(httpConnection_Request1.validateTLSCertificates());
      assertEquals(30000, httpConnection_Request1.timeout());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertNull(httpConnection_Request1.requestBody());
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request1, httpConnection_Request0);
      
      // Undeclared exception!
      try { 
        httpConnection_Request1.maxBodySize((-146));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxSize must be 0 (unlimited) or larger
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      assertNotNull(httpConnection_Request0);
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertTrue(httpConnection_Request0.validateTLSCertificates());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertNull(httpConnection_Request0.requestBody());
      
      Connection.Request connection_Request0 = httpConnection_Request0.requestBody("");
      assertNotNull(connection_Request0);
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertTrue(httpConnection_Request0.validateTLSCertificates());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertEquals("", httpConnection_Request0.requestBody());
      assertEquals(1048576, connection_Request0.maxBodySize());
      assertEquals(30000, connection_Request0.timeout());
      assertEquals("UTF-8", connection_Request0.postDataCharset());
      assertFalse(connection_Request0.ignoreContentType());
      assertTrue(connection_Request0.validateTLSCertificates());
      assertTrue(connection_Request0.followRedirects());
      assertEquals("", connection_Request0.requestBody());
      assertFalse(connection_Request0.ignoreHttpErrors());
      assertSame(httpConnection_Request0, connection_Request0);
      assertSame(connection_Request0, httpConnection_Request0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create("5goF2>4,<Kk=N+/", "org.eclipse.jetty.io.SelectChannelEndPoint");
      assertNotNull(httpConnection_KeyVal0);
      assertEquals("org.eclipse.jetty.io.SelectChannelEndPoint", httpConnection_KeyVal0.value());
      assertNull(httpConnection_KeyVal0.contentType());
      assertEquals("5goF2>4,<Kk=N+/", httpConnection_KeyVal0.key());
      assertFalse(httpConnection_KeyVal0.hasInputStream());
      
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null);
      assertNotNull(pushbackInputStream0);
      
      HttpConnection.KeyVal httpConnection_KeyVal1 = HttpConnection.KeyVal.create("`::M~N ", "", (InputStream) pushbackInputStream0);
      assertNotNull(httpConnection_KeyVal1);
      assertFalse(httpConnection_KeyVal1.equals((Object)httpConnection_KeyVal0));
      assertTrue(httpConnection_KeyVal1.hasInputStream());
      assertEquals("`::M~N ", httpConnection_KeyVal1.key());
      assertEquals("", httpConnection_KeyVal1.value());
      assertNull(httpConnection_KeyVal1.contentType());
      assertNotSame(httpConnection_KeyVal1, httpConnection_KeyVal0);
      
      HttpConnection.KeyVal httpConnection_KeyVal2 = httpConnection_KeyVal0.value("org.eclipse.jetty.io.SelectChannelEndPoint");
      assertNotNull(httpConnection_KeyVal2);
      assertFalse(httpConnection_KeyVal0.equals((Object)httpConnection_KeyVal1));
      assertFalse(httpConnection_KeyVal2.equals((Object)httpConnection_KeyVal1));
      assertEquals("org.eclipse.jetty.io.SelectChannelEndPoint", httpConnection_KeyVal0.value());
      assertNull(httpConnection_KeyVal0.contentType());
      assertEquals("5goF2>4,<Kk=N+/", httpConnection_KeyVal0.key());
      assertFalse(httpConnection_KeyVal0.hasInputStream());
      assertFalse(httpConnection_KeyVal2.hasInputStream());
      assertEquals("org.eclipse.jetty.io.SelectChannelEndPoint", httpConnection_KeyVal2.value());
      assertEquals("5goF2>4,<Kk=N+/", httpConnection_KeyVal2.key());
      assertNull(httpConnection_KeyVal2.contentType());
      assertNotSame(httpConnection_KeyVal0, httpConnection_KeyVal1);
      assertSame(httpConnection_KeyVal0, httpConnection_KeyVal2);
      assertNotSame(httpConnection_KeyVal2, httpConnection_KeyVal1);
      assertSame(httpConnection_KeyVal2, httpConnection_KeyVal0);
      
      HttpConnection.KeyVal httpConnection_KeyVal3 = httpConnection_KeyVal0.value("org.eclipse.jetty.io.SelectChannelEndPoint");
      assertNotNull(httpConnection_KeyVal3);
      assertFalse(httpConnection_KeyVal0.equals((Object)httpConnection_KeyVal1));
      assertFalse(httpConnection_KeyVal3.equals((Object)httpConnection_KeyVal1));
      assertEquals("org.eclipse.jetty.io.SelectChannelEndPoint", httpConnection_KeyVal0.value());
      assertNull(httpConnection_KeyVal0.contentType());
      assertEquals("5goF2>4,<Kk=N+/", httpConnection_KeyVal0.key());
      assertFalse(httpConnection_KeyVal0.hasInputStream());
      assertEquals("org.eclipse.jetty.io.SelectChannelEndPoint", httpConnection_KeyVal3.value());
      assertFalse(httpConnection_KeyVal3.hasInputStream());
      assertNull(httpConnection_KeyVal3.contentType());
      assertEquals("5goF2>4,<Kk=N+/", httpConnection_KeyVal3.key());
      assertSame(httpConnection_KeyVal0, httpConnection_KeyVal3);
      assertNotSame(httpConnection_KeyVal0, httpConnection_KeyVal1);
      assertSame(httpConnection_KeyVal0, httpConnection_KeyVal2);
      assertSame(httpConnection_KeyVal3, httpConnection_KeyVal2);
      assertNotSame(httpConnection_KeyVal3, httpConnection_KeyVal1);
      assertSame(httpConnection_KeyVal3, httpConnection_KeyVal0);
      
      String string0 = httpConnection_KeyVal0.toString();
      assertEquals("5goF2>4,<Kk=N+/=org.eclipse.jetty.io.SelectChannelEndPoint", string0);
      assertNotNull(string0);
      assertFalse(httpConnection_KeyVal0.equals((Object)httpConnection_KeyVal1));
      assertEquals("org.eclipse.jetty.io.SelectChannelEndPoint", httpConnection_KeyVal0.value());
      assertNull(httpConnection_KeyVal0.contentType());
      assertEquals("5goF2>4,<Kk=N+/", httpConnection_KeyVal0.key());
      assertFalse(httpConnection_KeyVal0.hasInputStream());
      assertSame(httpConnection_KeyVal0, httpConnection_KeyVal3);
      assertNotSame(httpConnection_KeyVal0, httpConnection_KeyVal1);
      assertSame(httpConnection_KeyVal0, httpConnection_KeyVal2);
      
      String string1 = httpConnection_KeyVal0.contentType();
      assertNull(string1);
      assertFalse(httpConnection_KeyVal0.equals((Object)httpConnection_KeyVal1));
      assertEquals("org.eclipse.jetty.io.SelectChannelEndPoint", httpConnection_KeyVal0.value());
      assertNull(httpConnection_KeyVal0.contentType());
      assertEquals("5goF2>4,<Kk=N+/", httpConnection_KeyVal0.key());
      assertFalse(httpConnection_KeyVal0.hasInputStream());
      assertSame(httpConnection_KeyVal0, httpConnection_KeyVal3);
      assertNotSame(httpConnection_KeyVal0, httpConnection_KeyVal1);
      assertSame(httpConnection_KeyVal0, httpConnection_KeyVal2);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      assertNotNull(httpConnection_Request0);
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertTrue(httpConnection_Request0.validateTLSCertificates());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertTrue(httpConnection_Request0.followRedirects());
      assertNull(httpConnection_Request0.requestBody());
      assertEquals(30000, httpConnection_Request0.timeout());
      
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.timeout(0);
      assertNotNull(httpConnection_Request1);
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertTrue(httpConnection_Request0.validateTLSCertificates());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertTrue(httpConnection_Request0.followRedirects());
      assertNull(httpConnection_Request0.requestBody());
      assertEquals(0, httpConnection_Request0.timeout());
      assertEquals(1048576, httpConnection_Request1.maxBodySize());
      assertTrue(httpConnection_Request1.followRedirects());
      assertTrue(httpConnection_Request1.validateTLSCertificates());
      assertEquals(0, httpConnection_Request1.timeout());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertNull(httpConnection_Request1.requestBody());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request1, httpConnection_Request0);
      
      Proxy proxy0 = Proxy.NO_PROXY;
      assertNotNull(proxy0);
      assertEquals(Proxy.Type.DIRECT, proxy0.type());
      assertEquals("DIRECT", proxy0.toString());
      
      HttpConnection.Request httpConnection_Request2 = httpConnection_Request1.proxy(proxy0);
      assertNotNull(httpConnection_Request2);
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertTrue(httpConnection_Request0.validateTLSCertificates());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertTrue(httpConnection_Request0.followRedirects());
      assertNull(httpConnection_Request0.requestBody());
      assertEquals(0, httpConnection_Request0.timeout());
      assertEquals(1048576, httpConnection_Request1.maxBodySize());
      assertTrue(httpConnection_Request1.followRedirects());
      assertTrue(httpConnection_Request1.validateTLSCertificates());
      assertEquals(0, httpConnection_Request1.timeout());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertNull(httpConnection_Request1.requestBody());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertEquals(Proxy.Type.DIRECT, proxy0.type());
      assertEquals("DIRECT", proxy0.toString());
      assertTrue(httpConnection_Request2.followRedirects());
      assertEquals(1048576, httpConnection_Request2.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request2.postDataCharset());
      assertFalse(httpConnection_Request2.ignoreContentType());
      assertTrue(httpConnection_Request2.validateTLSCertificates());
      assertEquals(0, httpConnection_Request2.timeout());
      assertNull(httpConnection_Request2.requestBody());
      assertFalse(httpConnection_Request2.ignoreHttpErrors());
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request0, httpConnection_Request2);
      assertSame(httpConnection_Request1, httpConnection_Request2);
      assertSame(httpConnection_Request1, httpConnection_Request0);
      assertSame(httpConnection_Request2, httpConnection_Request0);
      assertSame(httpConnection_Request2, httpConnection_Request1);
      
      Connection.Request connection_Request0 = httpConnection_Request2.ignoreHttpErrors(true);
      assertNotNull(connection_Request0);
      assertTrue(httpConnection_Request0.ignoreHttpErrors());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertTrue(httpConnection_Request0.validateTLSCertificates());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertTrue(httpConnection_Request0.followRedirects());
      assertNull(httpConnection_Request0.requestBody());
      assertEquals(0, httpConnection_Request0.timeout());
      assertEquals(1048576, httpConnection_Request1.maxBodySize());
      assertTrue(httpConnection_Request1.followRedirects());
      assertTrue(httpConnection_Request1.ignoreHttpErrors());
      assertTrue(httpConnection_Request1.validateTLSCertificates());
      assertEquals(0, httpConnection_Request1.timeout());
      assertNull(httpConnection_Request1.requestBody());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertEquals(Proxy.Type.DIRECT, proxy0.type());
      assertEquals("DIRECT", proxy0.toString());
      assertTrue(httpConnection_Request2.followRedirects());
      assertEquals(1048576, httpConnection_Request2.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request2.postDataCharset());
      assertFalse(httpConnection_Request2.ignoreContentType());
      assertTrue(httpConnection_Request2.validateTLSCertificates());
      assertEquals(0, httpConnection_Request2.timeout());
      assertTrue(httpConnection_Request2.ignoreHttpErrors());
      assertNull(httpConnection_Request2.requestBody());
      assertEquals("UTF-8", connection_Request0.postDataCharset());
      assertFalse(connection_Request0.ignoreContentType());
      assertEquals(1048576, connection_Request0.maxBodySize());
      assertNull(connection_Request0.requestBody());
      assertTrue(connection_Request0.followRedirects());
      assertTrue(connection_Request0.validateTLSCertificates());
      assertEquals(0, connection_Request0.timeout());
      assertTrue(connection_Request0.ignoreHttpErrors());
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request0, connection_Request0);
      assertSame(httpConnection_Request0, httpConnection_Request2);
      assertSame(httpConnection_Request1, connection_Request0);
      assertSame(httpConnection_Request1, httpConnection_Request2);
      assertSame(httpConnection_Request1, httpConnection_Request0);
      assertSame(httpConnection_Request2, connection_Request0);
      assertSame(httpConnection_Request2, httpConnection_Request0);
      assertSame(httpConnection_Request2, httpConnection_Request1);
      assertSame(connection_Request0, httpConnection_Request0);
      assertSame(connection_Request0, httpConnection_Request2);
      assertSame(connection_Request0, httpConnection_Request1);
      
      // Undeclared exception!
      try { 
        HttpConnection.Response.execute(connection_Request0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      assertNotNull(httpConnection_Response0);
      assertNull(httpConnection_Response0.statusMessage());
      assertEquals(0, httpConnection_Response0.statusCode());
      assertNull(httpConnection_Response0.contentType());
      assertNull(httpConnection_Response0.charset());
      
      // Undeclared exception!
      try { 
        httpConnection_Response0.bufferUp();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Request must be executed (with .execute(), .get(), or .post() before getting response body
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)5;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 0, (-652));
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)5}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals((-652), byteArrayInputStream0.available());
      
      byteArrayInputStream0.reset();
      assertArrayEquals(new byte[] {(byte)5}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals((-652), byteArrayInputStream0.available());
      
      byteArrayInputStream0.close();
      assertArrayEquals(new byte[] {(byte)5}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals((-652), byteArrayInputStream0.available());
      
      boolean boolean0 = byteArrayInputStream0.markSupported();
      assertTrue(boolean0);
      assertArrayEquals(new byte[] {(byte)5}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals((-652), byteArrayInputStream0.available());
      
      byteArrayInputStream0.mark(0);
      assertArrayEquals(new byte[] {(byte)5}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals((-652), byteArrayInputStream0.available());
      
      int int0 = byteArrayInputStream0.read();
      assertEquals((-1), int0);
      assertArrayEquals(new byte[] {(byte)5}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals((-652), byteArrayInputStream0.available());
      
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create("{Yb&Mg,Wxb&c6,k/k(", "{Yb&Mg,Wxb&c6,k/k(", (InputStream) byteArrayInputStream0);
      assertNotNull(httpConnection_KeyVal0);
      assertArrayEquals(new byte[] {(byte)5}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals((-652), byteArrayInputStream0.available());
      assertEquals("{Yb&Mg,Wxb&c6,k/k(", httpConnection_KeyVal0.value());
      assertEquals("{Yb&Mg,Wxb&c6,k/k(", httpConnection_KeyVal0.key());
      assertTrue(httpConnection_KeyVal0.hasInputStream());
      assertNull(httpConnection_KeyVal0.contentType());
      
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      assertNotNull(httpConnection_Request0);
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertTrue(httpConnection_Request0.validateTLSCertificates());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNull(httpConnection_Request0.requestBody());
      
      // Undeclared exception!
      try { 
        httpConnection_Request0.removeCookie("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cookie name must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      assertNotNull(httpConnection_Response0);
      assertEquals(0, httpConnection_Response0.statusCode());
      assertNull(httpConnection_Response0.charset());
      assertNull(httpConnection_Response0.contentType());
      assertNull(httpConnection_Response0.statusMessage());
      
      HttpConnection.Response httpConnection_Response1 = httpConnection_Response0.charset("--");
      assertNotNull(httpConnection_Response1);
      assertEquals("--", httpConnection_Response0.charset());
      assertEquals(0, httpConnection_Response0.statusCode());
      assertNull(httpConnection_Response0.contentType());
      assertNull(httpConnection_Response0.statusMessage());
      assertEquals("--", httpConnection_Response1.charset());
      assertNull(httpConnection_Response1.statusMessage());
      assertEquals(0, httpConnection_Response1.statusCode());
      assertNull(httpConnection_Response1.contentType());
      assertSame(httpConnection_Response0, httpConnection_Response1);
      assertSame(httpConnection_Response1, httpConnection_Response0);
      
      URL uRL0 = MockURL.getHttpExample();
      assertNotNull(uRL0);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      
      URL uRL1 = HttpConnection.encodeUrl(uRL0);
      assertNotNull(uRL1);
      assertTrue(uRL1.equals((Object)uRL0));
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL1.toExternalForm());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL1.toString());
      assertNull(uRL1.getUserInfo());
      assertEquals((-1), uRL1.getPort());
      assertEquals("http", uRL1.getProtocol());
      assertNull(uRL1.getRef());
      assertEquals((-1), uRL1.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertNull(uRL1.getQuery());
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      
      URL uRL2 = MockURL.URL(uRL1, "Content-Type");
      assertNotNull(uRL2);
      assertTrue(uRL0.equals((Object)uRL1));
      assertTrue(uRL1.equals((Object)uRL0));
      assertFalse(uRL2.equals((Object)uRL1));
      assertFalse(uRL2.equals((Object)uRL0));
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL1.toExternalForm());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL1.toString());
      assertNull(uRL1.getUserInfo());
      assertEquals((-1), uRL1.getPort());
      assertEquals("http", uRL1.getProtocol());
      assertNull(uRL1.getRef());
      assertEquals((-1), uRL1.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertNull(uRL1.getQuery());
      assertEquals("http://www.someFakeButWellFormedURL.org/Content-Type", uRL2.toExternalForm());
      assertEquals("http://www.someFakeButWellFormedURL.org/Content-Type", uRL2.toString());
      assertNull(uRL2.getUserInfo());
      assertNull(uRL2.getQuery());
      assertEquals((-1), uRL2.getPort());
      assertEquals("http", uRL2.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL2.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL2.getAuthority());
      assertNull(uRL2.getRef());
      assertEquals((-1), uRL2.getDefaultPort());
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL0, uRL2);
      assertNotSame(uRL1, uRL2);
      assertNotSame(uRL1, uRL0);
      assertNotSame(uRL2, uRL1);
      assertNotSame(uRL2, uRL0);
      
      httpConnection_Response1.url = uRL2;
      assertEquals("--", httpConnection_Response0.charset());
      assertEquals(0, httpConnection_Response0.statusCode());
      assertNull(httpConnection_Response0.contentType());
      assertNull(httpConnection_Response0.statusMessage());
      assertEquals("--", httpConnection_Response1.charset());
      assertNull(httpConnection_Response1.statusMessage());
      assertEquals(0, httpConnection_Response1.statusCode());
      assertNull(httpConnection_Response1.contentType());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL1.toExternalForm());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL1.toString());
      assertNull(uRL1.getUserInfo());
      assertEquals((-1), uRL1.getPort());
      assertEquals("http", uRL1.getProtocol());
      assertNull(uRL1.getRef());
      assertEquals((-1), uRL1.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertNull(uRL1.getQuery());
      assertEquals("http://www.someFakeButWellFormedURL.org/Content-Type", uRL2.toExternalForm());
      assertEquals("http://www.someFakeButWellFormedURL.org/Content-Type", uRL2.toString());
      assertNull(uRL2.getUserInfo());
      assertNull(uRL2.getQuery());
      assertEquals((-1), uRL2.getPort());
      assertEquals("http", uRL2.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL2.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL2.getAuthority());
      assertNull(uRL2.getRef());
      assertEquals((-1), uRL2.getDefaultPort());
      assertEquals((-1), httpConnection_Response1.url.getPort());
      assertNull(httpConnection_Response1.url.getQuery());
      assertEquals("http://www.someFakeButWellFormedURL.org/Content-Type", httpConnection_Response1.url.toExternalForm());
      assertNull(httpConnection_Response1.url.getRef());
      assertEquals((-1), httpConnection_Response1.url.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", httpConnection_Response1.url.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/Content-Type", httpConnection_Response1.url.toString());
      assertEquals("http", httpConnection_Response1.url.getProtocol());
      assertNull(httpConnection_Response1.url.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", httpConnection_Response1.url.getHost());
      
      // Undeclared exception!
      try { 
        httpConnection_Response1.bodyStream();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Request must be executed (with .execute(), .get(), or .post() before getting response body
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      assertNotNull(httpConnection_Request0);
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNull(httpConnection_Request0.requestBody());
      assertTrue(httpConnection_Request0.validateTLSCertificates());
      
      PipedInputStream pipedInputStream0 = new PipedInputStream(2);
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0, 2);
      assertNotNull(pushbackInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create("Accept-Encoding", ".", (InputStream) pushbackInputStream0);
      assertNotNull(httpConnection_KeyVal0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals("Accept-Encoding", httpConnection_KeyVal0.key());
      assertEquals(".", httpConnection_KeyVal0.value());
      assertNull(httpConnection_KeyVal0.contentType());
      assertTrue(httpConnection_KeyVal0.hasInputStream());
      
      Connection.KeyVal connection_KeyVal0 = httpConnection_KeyVal0.contentType("oo,, .S!g7~");
      assertNotNull(connection_KeyVal0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals("oo,, .S!g7~", httpConnection_KeyVal0.contentType());
      assertEquals("Accept-Encoding", httpConnection_KeyVal0.key());
      assertEquals(".", httpConnection_KeyVal0.value());
      assertTrue(httpConnection_KeyVal0.hasInputStream());
      assertEquals("oo,, .S!g7~", connection_KeyVal0.contentType());
      assertEquals(".", connection_KeyVal0.value());
      assertEquals("Accept-Encoding", connection_KeyVal0.key());
      assertTrue(connection_KeyVal0.hasInputStream());
      assertSame(httpConnection_KeyVal0, connection_KeyVal0);
      assertSame(connection_KeyVal0, httpConnection_KeyVal0);
      
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.data(connection_KeyVal0);
      assertNotNull(httpConnection_Request1);
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNull(httpConnection_Request0.requestBody());
      assertTrue(httpConnection_Request0.validateTLSCertificates());
      assertEquals(0, pipedInputStream0.available());
      assertEquals("oo,, .S!g7~", httpConnection_KeyVal0.contentType());
      assertEquals("Accept-Encoding", httpConnection_KeyVal0.key());
      assertEquals(".", httpConnection_KeyVal0.value());
      assertTrue(httpConnection_KeyVal0.hasInputStream());
      assertEquals("oo,, .S!g7~", connection_KeyVal0.contentType());
      assertEquals(".", connection_KeyVal0.value());
      assertEquals("Accept-Encoding", connection_KeyVal0.key());
      assertTrue(connection_KeyVal0.hasInputStream());
      assertNull(httpConnection_Request1.requestBody());
      assertEquals(30000, httpConnection_Request1.timeout());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertEquals(1048576, httpConnection_Request1.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertTrue(httpConnection_Request1.validateTLSCertificates());
      assertTrue(httpConnection_Request1.followRedirects());
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_KeyVal0, connection_KeyVal0);
      assertSame(connection_KeyVal0, httpConnection_KeyVal0);
      assertSame(httpConnection_Request1, httpConnection_Request0);
      
      HttpConnection.Request httpConnection_Request2 = httpConnection_Request1.timeout(2);
      assertNotNull(httpConnection_Request2);
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertTrue(httpConnection_Request0.followRedirects());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNull(httpConnection_Request0.requestBody());
      assertEquals(2, httpConnection_Request0.timeout());
      assertTrue(httpConnection_Request0.validateTLSCertificates());
      assertEquals(0, pipedInputStream0.available());
      assertEquals("oo,, .S!g7~", httpConnection_KeyVal0.contentType());
      assertEquals("Accept-Encoding", httpConnection_KeyVal0.key());
      assertEquals(".", httpConnection_KeyVal0.value());
      assertTrue(httpConnection_KeyVal0.hasInputStream());
      assertEquals("oo,, .S!g7~", connection_KeyVal0.contentType());
      assertEquals(".", connection_KeyVal0.value());
      assertEquals("Accept-Encoding", connection_KeyVal0.key());
      assertTrue(connection_KeyVal0.hasInputStream());
      assertNull(httpConnection_Request1.requestBody());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertEquals(2, httpConnection_Request1.timeout());
      assertEquals(1048576, httpConnection_Request1.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertTrue(httpConnection_Request1.validateTLSCertificates());
      assertTrue(httpConnection_Request1.followRedirects());
      assertFalse(httpConnection_Request2.ignoreHttpErrors());
      assertTrue(httpConnection_Request2.validateTLSCertificates());
      assertEquals("UTF-8", httpConnection_Request2.postDataCharset());
      assertFalse(httpConnection_Request2.ignoreContentType());
      assertTrue(httpConnection_Request2.followRedirects());
      assertEquals(1048576, httpConnection_Request2.maxBodySize());
      assertEquals(2, httpConnection_Request2.timeout());
      assertNull(httpConnection_Request2.requestBody());
      assertSame(httpConnection_Request0, httpConnection_Request2);
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_KeyVal0, connection_KeyVal0);
      assertSame(connection_KeyVal0, httpConnection_KeyVal0);
      assertSame(httpConnection_Request1, httpConnection_Request2);
      assertSame(httpConnection_Request1, httpConnection_Request0);
      assertSame(httpConnection_Request2, httpConnection_Request1);
      assertSame(httpConnection_Request2, httpConnection_Request0);
      
      Proxy proxy0 = Proxy.NO_PROXY;
      assertNotNull(proxy0);
      assertEquals("DIRECT", proxy0.toString());
      assertEquals(Proxy.Type.DIRECT, proxy0.type());
      
      HttpConnection.Request httpConnection_Request3 = httpConnection_Request2.proxy(proxy0);
      assertNotNull(httpConnection_Request3);
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertTrue(httpConnection_Request0.followRedirects());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNull(httpConnection_Request0.requestBody());
      assertEquals(2, httpConnection_Request0.timeout());
      assertTrue(httpConnection_Request0.validateTLSCertificates());
      assertEquals(0, pipedInputStream0.available());
      assertEquals("oo,, .S!g7~", httpConnection_KeyVal0.contentType());
      assertEquals("Accept-Encoding", httpConnection_KeyVal0.key());
      assertEquals(".", httpConnection_KeyVal0.value());
      assertTrue(httpConnection_KeyVal0.hasInputStream());
      assertEquals("oo,, .S!g7~", connection_KeyVal0.contentType());
      assertEquals(".", connection_KeyVal0.value());
      assertEquals("Accept-Encoding", connection_KeyVal0.key());
      assertTrue(connection_KeyVal0.hasInputStream());
      assertNull(httpConnection_Request1.requestBody());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertEquals(2, httpConnection_Request1.timeout());
      assertEquals(1048576, httpConnection_Request1.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertTrue(httpConnection_Request1.validateTLSCertificates());
      assertTrue(httpConnection_Request1.followRedirects());
      assertFalse(httpConnection_Request2.ignoreHttpErrors());
      assertTrue(httpConnection_Request2.validateTLSCertificates());
      assertEquals("UTF-8", httpConnection_Request2.postDataCharset());
      assertFalse(httpConnection_Request2.ignoreContentType());
      assertTrue(httpConnection_Request2.followRedirects());
      assertEquals(1048576, httpConnection_Request2.maxBodySize());
      assertEquals(2, httpConnection_Request2.timeout());
      assertNull(httpConnection_Request2.requestBody());
      assertEquals("DIRECT", proxy0.toString());
      assertEquals(Proxy.Type.DIRECT, proxy0.type());
      assertEquals(2, httpConnection_Request3.timeout());
      assertNull(httpConnection_Request3.requestBody());
      assertFalse(httpConnection_Request3.ignoreHttpErrors());
      assertEquals("UTF-8", httpConnection_Request3.postDataCharset());
      assertFalse(httpConnection_Request3.ignoreContentType());
      assertEquals(1048576, httpConnection_Request3.maxBodySize());
      assertTrue(httpConnection_Request3.validateTLSCertificates());
      assertTrue(httpConnection_Request3.followRedirects());
      assertSame(httpConnection_Request0, httpConnection_Request3);
      assertSame(httpConnection_Request0, httpConnection_Request2);
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_KeyVal0, connection_KeyVal0);
      assertSame(connection_KeyVal0, httpConnection_KeyVal0);
      assertSame(httpConnection_Request1, httpConnection_Request3);
      assertSame(httpConnection_Request1, httpConnection_Request2);
      assertSame(httpConnection_Request1, httpConnection_Request0);
      assertSame(httpConnection_Request2, httpConnection_Request1);
      assertSame(httpConnection_Request2, httpConnection_Request0);
      assertSame(httpConnection_Request2, httpConnection_Request3);
      assertSame(httpConnection_Request3, httpConnection_Request2);
      assertSame(httpConnection_Request3, httpConnection_Request0);
      assertSame(httpConnection_Request3, httpConnection_Request1);
      
      Connection.Request connection_Request0 = httpConnection_Request3.followRedirects(true);
      assertNotNull(connection_Request0);
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertTrue(httpConnection_Request0.followRedirects());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNull(httpConnection_Request0.requestBody());
      assertEquals(2, httpConnection_Request0.timeout());
      assertTrue(httpConnection_Request0.validateTLSCertificates());
      assertEquals(0, pipedInputStream0.available());
      assertEquals("oo,, .S!g7~", httpConnection_KeyVal0.contentType());
      assertEquals("Accept-Encoding", httpConnection_KeyVal0.key());
      assertEquals(".", httpConnection_KeyVal0.value());
      assertTrue(httpConnection_KeyVal0.hasInputStream());
      assertEquals("oo,, .S!g7~", connection_KeyVal0.contentType());
      assertEquals(".", connection_KeyVal0.value());
      assertEquals("Accept-Encoding", connection_KeyVal0.key());
      assertTrue(connection_KeyVal0.hasInputStream());
      assertNull(httpConnection_Request1.requestBody());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertEquals(2, httpConnection_Request1.timeout());
      assertEquals(1048576, httpConnection_Request1.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertTrue(httpConnection_Request1.validateTLSCertificates());
      assertTrue(httpConnection_Request1.followRedirects());
      assertFalse(httpConnection_Request2.ignoreHttpErrors());
      assertTrue(httpConnection_Request2.validateTLSCertificates());
      assertEquals("UTF-8", httpConnection_Request2.postDataCharset());
      assertFalse(httpConnection_Request2.ignoreContentType());
      assertTrue(httpConnection_Request2.followRedirects());
      assertEquals(1048576, httpConnection_Request2.maxBodySize());
      assertEquals(2, httpConnection_Request2.timeout());
      assertNull(httpConnection_Request2.requestBody());
      assertEquals("DIRECT", proxy0.toString());
      assertEquals(Proxy.Type.DIRECT, proxy0.type());
      assertEquals(2, httpConnection_Request3.timeout());
      assertNull(httpConnection_Request3.requestBody());
      assertFalse(httpConnection_Request3.ignoreHttpErrors());
      assertEquals("UTF-8", httpConnection_Request3.postDataCharset());
      assertFalse(httpConnection_Request3.ignoreContentType());
      assertEquals(1048576, httpConnection_Request3.maxBodySize());
      assertTrue(httpConnection_Request3.validateTLSCertificates());
      assertTrue(httpConnection_Request3.followRedirects());
      assertFalse(connection_Request0.ignoreHttpErrors());
      assertNull(connection_Request0.requestBody());
      assertEquals("UTF-8", connection_Request0.postDataCharset());
      assertTrue(connection_Request0.validateTLSCertificates());
      assertEquals(2, connection_Request0.timeout());
      assertTrue(connection_Request0.followRedirects());
      assertFalse(connection_Request0.ignoreContentType());
      assertEquals(1048576, connection_Request0.maxBodySize());
      assertSame(httpConnection_Request0, connection_Request0);
      assertSame(httpConnection_Request0, httpConnection_Request3);
      assertSame(httpConnection_Request0, httpConnection_Request2);
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_KeyVal0, connection_KeyVal0);
      assertSame(connection_KeyVal0, httpConnection_KeyVal0);
      assertSame(httpConnection_Request1, httpConnection_Request3);
      assertSame(httpConnection_Request1, httpConnection_Request2);
      assertSame(httpConnection_Request1, connection_Request0);
      assertSame(httpConnection_Request1, httpConnection_Request0);
      assertSame(httpConnection_Request2, httpConnection_Request1);
      assertSame(httpConnection_Request2, httpConnection_Request0);
      assertSame(httpConnection_Request2, connection_Request0);
      assertSame(httpConnection_Request2, httpConnection_Request3);
      assertSame(httpConnection_Request3, httpConnection_Request2);
      assertSame(httpConnection_Request3, httpConnection_Request0);
      assertSame(httpConnection_Request3, connection_Request0);
      assertSame(httpConnection_Request3, httpConnection_Request1);
      assertSame(connection_Request0, httpConnection_Request3);
      assertSame(connection_Request0, httpConnection_Request1);
      assertSame(connection_Request0, httpConnection_Request0);
      assertSame(connection_Request0, httpConnection_Request2);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create("lv&iEh", "", (InputStream) pipedInputStream0);
      assertNotNull(httpConnection_KeyVal0);
      assertEquals(0, pipedInputStream0.available());
      assertTrue(httpConnection_KeyVal0.hasInputStream());
      assertEquals("", httpConnection_KeyVal0.value());
      assertEquals("lv&iEh", httpConnection_KeyVal0.key());
      assertNull(httpConnection_KeyVal0.contentType());
      
      HttpConnection.KeyVal httpConnection_KeyVal1 = httpConnection_KeyVal0.inputStream((InputStream) pipedInputStream0);
      assertNotNull(httpConnection_KeyVal1);
      assertEquals(0, pipedInputStream0.available());
      assertTrue(httpConnection_KeyVal0.hasInputStream());
      assertEquals("", httpConnection_KeyVal0.value());
      assertEquals("lv&iEh", httpConnection_KeyVal0.key());
      assertNull(httpConnection_KeyVal0.contentType());
      assertEquals("lv&iEh", httpConnection_KeyVal1.key());
      assertTrue(httpConnection_KeyVal1.hasInputStream());
      assertEquals("", httpConnection_KeyVal1.value());
      assertNull(httpConnection_KeyVal1.contentType());
      assertSame(httpConnection_KeyVal0, httpConnection_KeyVal1);
      assertSame(httpConnection_KeyVal1, httpConnection_KeyVal0);
      
      HttpConnection.KeyVal httpConnection_KeyVal2 = httpConnection_KeyVal1.key("lv&iEh");
      assertNotNull(httpConnection_KeyVal2);
      assertEquals(0, pipedInputStream0.available());
      assertTrue(httpConnection_KeyVal0.hasInputStream());
      assertEquals("", httpConnection_KeyVal0.value());
      assertEquals("lv&iEh", httpConnection_KeyVal0.key());
      assertNull(httpConnection_KeyVal0.contentType());
      assertEquals("lv&iEh", httpConnection_KeyVal1.key());
      assertTrue(httpConnection_KeyVal1.hasInputStream());
      assertEquals("", httpConnection_KeyVal1.value());
      assertNull(httpConnection_KeyVal1.contentType());
      assertEquals("", httpConnection_KeyVal2.value());
      assertNull(httpConnection_KeyVal2.contentType());
      assertTrue(httpConnection_KeyVal2.hasInputStream());
      assertEquals("lv&iEh", httpConnection_KeyVal2.key());
      assertSame(httpConnection_KeyVal0, httpConnection_KeyVal1);
      assertSame(httpConnection_KeyVal0, httpConnection_KeyVal2);
      assertSame(httpConnection_KeyVal1, httpConnection_KeyVal0);
      assertSame(httpConnection_KeyVal1, httpConnection_KeyVal2);
      assertSame(httpConnection_KeyVal2, httpConnection_KeyVal1);
      assertSame(httpConnection_KeyVal2, httpConnection_KeyVal0);
      
      boolean boolean0 = httpConnection_KeyVal2.hasInputStream();
      assertTrue(boolean0);
      assertEquals(0, pipedInputStream0.available());
      assertTrue(httpConnection_KeyVal0.hasInputStream());
      assertEquals("", httpConnection_KeyVal0.value());
      assertEquals("lv&iEh", httpConnection_KeyVal0.key());
      assertNull(httpConnection_KeyVal0.contentType());
      assertEquals("lv&iEh", httpConnection_KeyVal1.key());
      assertTrue(httpConnection_KeyVal1.hasInputStream());
      assertEquals("", httpConnection_KeyVal1.value());
      assertNull(httpConnection_KeyVal1.contentType());
      assertEquals("", httpConnection_KeyVal2.value());
      assertNull(httpConnection_KeyVal2.contentType());
      assertTrue(httpConnection_KeyVal2.hasInputStream());
      assertEquals("lv&iEh", httpConnection_KeyVal2.key());
      assertSame(httpConnection_KeyVal0, httpConnection_KeyVal1);
      assertSame(httpConnection_KeyVal0, httpConnection_KeyVal2);
      assertSame(httpConnection_KeyVal1, httpConnection_KeyVal0);
      assertSame(httpConnection_KeyVal1, httpConnection_KeyVal2);
      assertSame(httpConnection_KeyVal2, httpConnection_KeyVal1);
      assertSame(httpConnection_KeyVal2, httpConnection_KeyVal0);
      
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      assertNotNull(httpConnection_Request0);
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertTrue(httpConnection_Request0.validateTLSCertificates());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertTrue(httpConnection_Request0.followRedirects());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNull(httpConnection_Request0.requestBody());
      
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.parser((Parser) null);
      assertNotNull(httpConnection_Request1);
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertTrue(httpConnection_Request0.validateTLSCertificates());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertTrue(httpConnection_Request0.followRedirects());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNull(httpConnection_Request0.requestBody());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertTrue(httpConnection_Request1.validateTLSCertificates());
      assertTrue(httpConnection_Request1.followRedirects());
      assertEquals(30000, httpConnection_Request1.timeout());
      assertEquals(1048576, httpConnection_Request1.maxBodySize());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertNull(httpConnection_Request1.requestBody());
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request1, httpConnection_Request0);
      
      HttpConnection.Request httpConnection_Request2 = httpConnection_Request1.data((Connection.KeyVal) httpConnection_KeyVal2);
      assertNotNull(httpConnection_Request2);
      assertEquals(0, pipedInputStream0.available());
      assertTrue(httpConnection_KeyVal0.hasInputStream());
      assertEquals("", httpConnection_KeyVal0.value());
      assertEquals("lv&iEh", httpConnection_KeyVal0.key());
      assertNull(httpConnection_KeyVal0.contentType());
      assertEquals("lv&iEh", httpConnection_KeyVal1.key());
      assertTrue(httpConnection_KeyVal1.hasInputStream());
      assertEquals("", httpConnection_KeyVal1.value());
      assertNull(httpConnection_KeyVal1.contentType());
      assertEquals("", httpConnection_KeyVal2.value());
      assertNull(httpConnection_KeyVal2.contentType());
      assertTrue(httpConnection_KeyVal2.hasInputStream());
      assertEquals("lv&iEh", httpConnection_KeyVal2.key());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertTrue(httpConnection_Request0.validateTLSCertificates());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertTrue(httpConnection_Request0.followRedirects());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNull(httpConnection_Request0.requestBody());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertTrue(httpConnection_Request1.validateTLSCertificates());
      assertTrue(httpConnection_Request1.followRedirects());
      assertEquals(30000, httpConnection_Request1.timeout());
      assertEquals(1048576, httpConnection_Request1.maxBodySize());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertNull(httpConnection_Request1.requestBody());
      assertNull(httpConnection_Request2.requestBody());
      assertTrue(httpConnection_Request2.followRedirects());
      assertFalse(httpConnection_Request2.ignoreHttpErrors());
      assertTrue(httpConnection_Request2.validateTLSCertificates());
      assertEquals(30000, httpConnection_Request2.timeout());
      assertFalse(httpConnection_Request2.ignoreContentType());
      assertEquals(1048576, httpConnection_Request2.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request2.postDataCharset());
      assertSame(httpConnection_KeyVal0, httpConnection_KeyVal1);
      assertSame(httpConnection_KeyVal0, httpConnection_KeyVal2);
      assertSame(httpConnection_KeyVal1, httpConnection_KeyVal0);
      assertSame(httpConnection_KeyVal1, httpConnection_KeyVal2);
      assertSame(httpConnection_KeyVal2, httpConnection_KeyVal1);
      assertSame(httpConnection_KeyVal2, httpConnection_KeyVal0);
      assertSame(httpConnection_Request0, httpConnection_Request2);
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request1, httpConnection_Request0);
      assertSame(httpConnection_Request1, httpConnection_Request2);
      assertSame(httpConnection_Request2, httpConnection_Request1);
      assertSame(httpConnection_Request2, httpConnection_Request0);
      
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      httpConnection_Request2.headers = (Map<String, List<String>>) hashMap0;
      assertEquals(0, pipedInputStream0.available());
      assertTrue(httpConnection_KeyVal0.hasInputStream());
      assertEquals("", httpConnection_KeyVal0.value());
      assertEquals("lv&iEh", httpConnection_KeyVal0.key());
      assertNull(httpConnection_KeyVal0.contentType());
      assertEquals("lv&iEh", httpConnection_KeyVal1.key());
      assertTrue(httpConnection_KeyVal1.hasInputStream());
      assertEquals("", httpConnection_KeyVal1.value());
      assertNull(httpConnection_KeyVal1.contentType());
      assertEquals("", httpConnection_KeyVal2.value());
      assertNull(httpConnection_KeyVal2.contentType());
      assertTrue(httpConnection_KeyVal2.hasInputStream());
      assertEquals("lv&iEh", httpConnection_KeyVal2.key());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertTrue(httpConnection_Request0.validateTLSCertificates());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertTrue(httpConnection_Request0.followRedirects());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNull(httpConnection_Request0.requestBody());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertTrue(httpConnection_Request1.validateTLSCertificates());
      assertTrue(httpConnection_Request1.followRedirects());
      assertEquals(30000, httpConnection_Request1.timeout());
      assertEquals(1048576, httpConnection_Request1.maxBodySize());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertNull(httpConnection_Request1.requestBody());
      assertNull(httpConnection_Request2.requestBody());
      assertTrue(httpConnection_Request2.followRedirects());
      assertFalse(httpConnection_Request2.ignoreHttpErrors());
      assertTrue(httpConnection_Request2.validateTLSCertificates());
      assertEquals(30000, httpConnection_Request2.timeout());
      assertFalse(httpConnection_Request2.ignoreContentType());
      assertEquals(1048576, httpConnection_Request2.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request2.postDataCharset());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(httpConnection_Request2.headers.isEmpty());
      assertEquals(0, httpConnection_Request2.headers.size());
      
      HttpConnection.Request httpConnection_Request3 = httpConnection_Request2.proxy("", 191);
      assertNotNull(httpConnection_Request3);
      assertEquals(0, pipedInputStream0.available());
      assertTrue(httpConnection_KeyVal0.hasInputStream());
      assertEquals("", httpConnection_KeyVal0.value());
      assertEquals("lv&iEh", httpConnection_KeyVal0.key());
      assertNull(httpConnection_KeyVal0.contentType());
      assertEquals("lv&iEh", httpConnection_KeyVal1.key());
      assertTrue(httpConnection_KeyVal1.hasInputStream());
      assertEquals("", httpConnection_KeyVal1.value());
      assertNull(httpConnection_KeyVal1.contentType());
      assertEquals("", httpConnection_KeyVal2.value());
      assertNull(httpConnection_KeyVal2.contentType());
      assertTrue(httpConnection_KeyVal2.hasInputStream());
      assertEquals("lv&iEh", httpConnection_KeyVal2.key());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertTrue(httpConnection_Request0.validateTLSCertificates());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertTrue(httpConnection_Request0.followRedirects());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNull(httpConnection_Request0.requestBody());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertTrue(httpConnection_Request1.validateTLSCertificates());
      assertTrue(httpConnection_Request1.followRedirects());
      assertEquals(30000, httpConnection_Request1.timeout());
      assertEquals(1048576, httpConnection_Request1.maxBodySize());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertNull(httpConnection_Request1.requestBody());
      assertNull(httpConnection_Request2.requestBody());
      assertTrue(httpConnection_Request2.followRedirects());
      assertFalse(httpConnection_Request2.ignoreHttpErrors());
      assertTrue(httpConnection_Request2.validateTLSCertificates());
      assertEquals(30000, httpConnection_Request2.timeout());
      assertFalse(httpConnection_Request2.ignoreContentType());
      assertEquals(1048576, httpConnection_Request2.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request2.postDataCharset());
      assertEquals(30000, httpConnection_Request3.timeout());
      assertEquals("UTF-8", httpConnection_Request3.postDataCharset());
      assertFalse(httpConnection_Request3.ignoreContentType());
      assertEquals(1048576, httpConnection_Request3.maxBodySize());
      assertTrue(httpConnection_Request3.validateTLSCertificates());
      assertTrue(httpConnection_Request3.followRedirects());
      assertNull(httpConnection_Request3.requestBody());
      assertFalse(httpConnection_Request3.ignoreHttpErrors());
      assertSame(httpConnection_KeyVal0, httpConnection_KeyVal1);
      assertSame(httpConnection_KeyVal0, httpConnection_KeyVal2);
      assertSame(httpConnection_KeyVal1, httpConnection_KeyVal0);
      assertSame(httpConnection_KeyVal1, httpConnection_KeyVal2);
      assertSame(httpConnection_KeyVal2, httpConnection_KeyVal1);
      assertSame(httpConnection_KeyVal2, httpConnection_KeyVal0);
      assertSame(httpConnection_Request0, httpConnection_Request2);
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request0, httpConnection_Request3);
      assertSame(httpConnection_Request1, httpConnection_Request0);
      assertSame(httpConnection_Request1, httpConnection_Request3);
      assertSame(httpConnection_Request1, httpConnection_Request2);
      assertSame(httpConnection_Request2, httpConnection_Request3);
      assertSame(httpConnection_Request2, httpConnection_Request1);
      assertSame(httpConnection_Request2, httpConnection_Request0);
      assertSame(httpConnection_Request3, httpConnection_Request1);
      assertSame(httpConnection_Request3, httpConnection_Request2);
      assertSame(httpConnection_Request3, httpConnection_Request0);
      
      HttpConnection.Request httpConnection_Request4 = httpConnection_Request3.timeout(0);
      assertNotNull(httpConnection_Request4);
      assertEquals(0, pipedInputStream0.available());
      assertTrue(httpConnection_KeyVal0.hasInputStream());
      assertEquals("", httpConnection_KeyVal0.value());
      assertEquals("lv&iEh", httpConnection_KeyVal0.key());
      assertNull(httpConnection_KeyVal0.contentType());
      assertEquals("lv&iEh", httpConnection_KeyVal1.key());
      assertTrue(httpConnection_KeyVal1.hasInputStream());
      assertEquals("", httpConnection_KeyVal1.value());
      assertNull(httpConnection_KeyVal1.contentType());
      assertEquals("", httpConnection_KeyVal2.value());
      assertNull(httpConnection_KeyVal2.contentType());
      assertTrue(httpConnection_KeyVal2.hasInputStream());
      assertEquals("lv&iEh", httpConnection_KeyVal2.key());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertTrue(httpConnection_Request0.validateTLSCertificates());
      assertEquals(0, httpConnection_Request0.timeout());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertTrue(httpConnection_Request0.followRedirects());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNull(httpConnection_Request0.requestBody());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertTrue(httpConnection_Request1.validateTLSCertificates());
      assertTrue(httpConnection_Request1.followRedirects());
      assertEquals(1048576, httpConnection_Request1.maxBodySize());
      assertEquals(0, httpConnection_Request1.timeout());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertNull(httpConnection_Request1.requestBody());
      assertNull(httpConnection_Request2.requestBody());
      assertTrue(httpConnection_Request2.followRedirects());
      assertFalse(httpConnection_Request2.ignoreHttpErrors());
      assertTrue(httpConnection_Request2.validateTLSCertificates());
      assertEquals(0, httpConnection_Request2.timeout());
      assertFalse(httpConnection_Request2.ignoreContentType());
      assertEquals(1048576, httpConnection_Request2.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request2.postDataCharset());
      assertEquals("UTF-8", httpConnection_Request3.postDataCharset());
      assertFalse(httpConnection_Request3.ignoreContentType());
      assertEquals(0, httpConnection_Request3.timeout());
      assertEquals(1048576, httpConnection_Request3.maxBodySize());
      assertTrue(httpConnection_Request3.validateTLSCertificates());
      assertTrue(httpConnection_Request3.followRedirects());
      assertNull(httpConnection_Request3.requestBody());
      assertFalse(httpConnection_Request3.ignoreHttpErrors());
      assertEquals(0, httpConnection_Request4.timeout());
      assertEquals(1048576, httpConnection_Request4.maxBodySize());
      assertTrue(httpConnection_Request4.followRedirects());
      assertEquals("UTF-8", httpConnection_Request4.postDataCharset());
      assertFalse(httpConnection_Request4.ignoreContentType());
      assertFalse(httpConnection_Request4.ignoreHttpErrors());
      assertNull(httpConnection_Request4.requestBody());
      assertTrue(httpConnection_Request4.validateTLSCertificates());
      assertSame(httpConnection_KeyVal0, httpConnection_KeyVal1);
      assertSame(httpConnection_KeyVal0, httpConnection_KeyVal2);
      assertSame(httpConnection_KeyVal1, httpConnection_KeyVal0);
      assertSame(httpConnection_KeyVal1, httpConnection_KeyVal2);
      assertSame(httpConnection_KeyVal2, httpConnection_KeyVal1);
      assertSame(httpConnection_KeyVal2, httpConnection_KeyVal0);
      assertSame(httpConnection_Request0, httpConnection_Request2);
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request0, httpConnection_Request3);
      assertSame(httpConnection_Request0, httpConnection_Request4);
      assertSame(httpConnection_Request1, httpConnection_Request0);
      assertSame(httpConnection_Request1, httpConnection_Request3);
      assertSame(httpConnection_Request1, httpConnection_Request2);
      assertSame(httpConnection_Request1, httpConnection_Request4);
      assertSame(httpConnection_Request2, httpConnection_Request4);
      assertSame(httpConnection_Request2, httpConnection_Request3);
      assertSame(httpConnection_Request2, httpConnection_Request1);
      assertSame(httpConnection_Request2, httpConnection_Request0);
      assertSame(httpConnection_Request3, httpConnection_Request1);
      assertSame(httpConnection_Request3, httpConnection_Request2);
      assertSame(httpConnection_Request3, httpConnection_Request4);
      assertSame(httpConnection_Request3, httpConnection_Request0);
      assertSame(httpConnection_Request4, httpConnection_Request2);
      assertSame(httpConnection_Request4, httpConnection_Request3);
      assertSame(httpConnection_Request4, httpConnection_Request0);
      assertSame(httpConnection_Request4, httpConnection_Request1);
      
      httpConnection_Request4.validateTLSCertificates(false);
      assertEquals(0, pipedInputStream0.available());
      assertTrue(httpConnection_KeyVal0.hasInputStream());
      assertEquals("", httpConnection_KeyVal0.value());
      assertEquals("lv&iEh", httpConnection_KeyVal0.key());
      assertNull(httpConnection_KeyVal0.contentType());
      assertEquals("lv&iEh", httpConnection_KeyVal1.key());
      assertTrue(httpConnection_KeyVal1.hasInputStream());
      assertEquals("", httpConnection_KeyVal1.value());
      assertNull(httpConnection_KeyVal1.contentType());
      assertEquals("", httpConnection_KeyVal2.value());
      assertNull(httpConnection_KeyVal2.contentType());
      assertTrue(httpConnection_KeyVal2.hasInputStream());
      assertEquals("lv&iEh", httpConnection_KeyVal2.key());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertEquals(0, httpConnection_Request0.timeout());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertTrue(httpConnection_Request0.followRedirects());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertFalse(httpConnection_Request0.validateTLSCertificates());
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request1.validateTLSCertificates());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertTrue(httpConnection_Request1.followRedirects());
      assertEquals(1048576, httpConnection_Request1.maxBodySize());
      assertEquals(0, httpConnection_Request1.timeout());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertNull(httpConnection_Request1.requestBody());
      assertNull(httpConnection_Request2.requestBody());
      assertTrue(httpConnection_Request2.followRedirects());
      assertFalse(httpConnection_Request2.ignoreHttpErrors());
      assertFalse(httpConnection_Request2.validateTLSCertificates());
      assertEquals(0, httpConnection_Request2.timeout());
      assertFalse(httpConnection_Request2.ignoreContentType());
      assertEquals(1048576, httpConnection_Request2.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request2.postDataCharset());
      assertEquals("UTF-8", httpConnection_Request3.postDataCharset());
      assertFalse(httpConnection_Request3.ignoreContentType());
      assertEquals(0, httpConnection_Request3.timeout());
      assertEquals(1048576, httpConnection_Request3.maxBodySize());
      assertTrue(httpConnection_Request3.followRedirects());
      assertFalse(httpConnection_Request3.validateTLSCertificates());
      assertNull(httpConnection_Request3.requestBody());
      assertFalse(httpConnection_Request3.ignoreHttpErrors());
      assertEquals(0, httpConnection_Request4.timeout());
      assertEquals(1048576, httpConnection_Request4.maxBodySize());
      assertFalse(httpConnection_Request4.validateTLSCertificates());
      assertTrue(httpConnection_Request4.followRedirects());
      assertEquals("UTF-8", httpConnection_Request4.postDataCharset());
      assertFalse(httpConnection_Request4.ignoreContentType());
      assertFalse(httpConnection_Request4.ignoreHttpErrors());
      assertNull(httpConnection_Request4.requestBody());
      assertSame(httpConnection_KeyVal0, httpConnection_KeyVal1);
      assertSame(httpConnection_KeyVal0, httpConnection_KeyVal2);
      assertSame(httpConnection_KeyVal1, httpConnection_KeyVal0);
      assertSame(httpConnection_KeyVal1, httpConnection_KeyVal2);
      assertSame(httpConnection_KeyVal2, httpConnection_KeyVal1);
      assertSame(httpConnection_KeyVal2, httpConnection_KeyVal0);
      assertSame(httpConnection_Request0, httpConnection_Request2);
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request0, httpConnection_Request3);
      assertSame(httpConnection_Request0, httpConnection_Request4);
      assertSame(httpConnection_Request1, httpConnection_Request0);
      assertSame(httpConnection_Request1, httpConnection_Request3);
      assertSame(httpConnection_Request1, httpConnection_Request2);
      assertSame(httpConnection_Request1, httpConnection_Request4);
      assertSame(httpConnection_Request2, httpConnection_Request4);
      assertSame(httpConnection_Request2, httpConnection_Request3);
      assertSame(httpConnection_Request2, httpConnection_Request1);
      assertSame(httpConnection_Request2, httpConnection_Request0);
      assertSame(httpConnection_Request3, httpConnection_Request1);
      assertSame(httpConnection_Request3, httpConnection_Request2);
      assertSame(httpConnection_Request3, httpConnection_Request4);
      assertSame(httpConnection_Request3, httpConnection_Request0);
      assertSame(httpConnection_Request4, httpConnection_Request2);
      assertSame(httpConnection_Request4, httpConnection_Request3);
      assertSame(httpConnection_Request4, httpConnection_Request0);
      assertSame(httpConnection_Request4, httpConnection_Request1);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      assertNotNull(httpConnection_Request0);
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertTrue(httpConnection_Request0.validateTLSCertificates());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(30000, httpConnection_Request0.timeout());
      
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.proxy((Proxy) null);
      assertNotNull(httpConnection_Request1);
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertTrue(httpConnection_Request0.validateTLSCertificates());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertNull(httpConnection_Request1.requestBody());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertEquals(30000, httpConnection_Request1.timeout());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertTrue(httpConnection_Request1.validateTLSCertificates());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertTrue(httpConnection_Request1.followRedirects());
      assertEquals(1048576, httpConnection_Request1.maxBodySize());
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request1, httpConnection_Request0);
      
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create("Accept-Encoding", "*", (InputStream) null);
      assertNotNull(httpConnection_KeyVal0);
      assertNull(httpConnection_KeyVal0.contentType());
      assertEquals("Accept-Encoding", httpConnection_KeyVal0.key());
      assertEquals("*", httpConnection_KeyVal0.value());
      assertFalse(httpConnection_KeyVal0.hasInputStream());
      
      HttpConnection.Request httpConnection_Request2 = httpConnection_Request1.data((Connection.KeyVal) httpConnection_KeyVal0);
      assertNotNull(httpConnection_Request2);
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertTrue(httpConnection_Request0.validateTLSCertificates());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertNull(httpConnection_Request1.requestBody());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertEquals(30000, httpConnection_Request1.timeout());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertTrue(httpConnection_Request1.validateTLSCertificates());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertTrue(httpConnection_Request1.followRedirects());
      assertEquals(1048576, httpConnection_Request1.maxBodySize());
      assertNull(httpConnection_KeyVal0.contentType());
      assertEquals("Accept-Encoding", httpConnection_KeyVal0.key());
      assertEquals("*", httpConnection_KeyVal0.value());
      assertFalse(httpConnection_KeyVal0.hasInputStream());
      assertTrue(httpConnection_Request2.validateTLSCertificates());
      assertTrue(httpConnection_Request2.followRedirects());
      assertEquals(30000, httpConnection_Request2.timeout());
      assertEquals("UTF-8", httpConnection_Request2.postDataCharset());
      assertFalse(httpConnection_Request2.ignoreContentType());
      assertNull(httpConnection_Request2.requestBody());
      assertFalse(httpConnection_Request2.ignoreHttpErrors());
      assertEquals(1048576, httpConnection_Request2.maxBodySize());
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request0, httpConnection_Request2);
      assertSame(httpConnection_Request1, httpConnection_Request2);
      assertSame(httpConnection_Request1, httpConnection_Request0);
      assertSame(httpConnection_Request2, httpConnection_Request0);
      assertSame(httpConnection_Request2, httpConnection_Request1);
      
      HttpConnection.Request httpConnection_Request3 = httpConnection_Request2.timeout(0);
      assertNotNull(httpConnection_Request3);
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertTrue(httpConnection_Request0.validateTLSCertificates());
      assertEquals(0, httpConnection_Request0.timeout());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertTrue(httpConnection_Request0.followRedirects());
      assertNull(httpConnection_Request1.requestBody());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertEquals(0, httpConnection_Request1.timeout());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertTrue(httpConnection_Request1.validateTLSCertificates());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertTrue(httpConnection_Request1.followRedirects());
      assertEquals(1048576, httpConnection_Request1.maxBodySize());
      assertNull(httpConnection_KeyVal0.contentType());
      assertEquals("Accept-Encoding", httpConnection_KeyVal0.key());
      assertEquals("*", httpConnection_KeyVal0.value());
      assertFalse(httpConnection_KeyVal0.hasInputStream());
      assertTrue(httpConnection_Request2.validateTLSCertificates());
      assertTrue(httpConnection_Request2.followRedirects());
      assertEquals("UTF-8", httpConnection_Request2.postDataCharset());
      assertFalse(httpConnection_Request2.ignoreContentType());
      assertEquals(0, httpConnection_Request2.timeout());
      assertNull(httpConnection_Request2.requestBody());
      assertFalse(httpConnection_Request2.ignoreHttpErrors());
      assertEquals(1048576, httpConnection_Request2.maxBodySize());
      assertNull(httpConnection_Request3.requestBody());
      assertFalse(httpConnection_Request3.ignoreHttpErrors());
      assertEquals("UTF-8", httpConnection_Request3.postDataCharset());
      assertEquals(1048576, httpConnection_Request3.maxBodySize());
      assertTrue(httpConnection_Request3.validateTLSCertificates());
      assertFalse(httpConnection_Request3.ignoreContentType());
      assertEquals(0, httpConnection_Request3.timeout());
      assertTrue(httpConnection_Request3.followRedirects());
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request0, httpConnection_Request2);
      assertSame(httpConnection_Request0, httpConnection_Request3);
      assertSame(httpConnection_Request1, httpConnection_Request2);
      assertSame(httpConnection_Request1, httpConnection_Request3);
      assertSame(httpConnection_Request1, httpConnection_Request0);
      assertSame(httpConnection_Request2, httpConnection_Request0);
      assertSame(httpConnection_Request2, httpConnection_Request3);
      assertSame(httpConnection_Request2, httpConnection_Request1);
      assertSame(httpConnection_Request3, httpConnection_Request0);
      assertSame(httpConnection_Request3, httpConnection_Request2);
      assertSame(httpConnection_Request3, httpConnection_Request1);
      
      HttpConnection.Request httpConnection_Request4 = httpConnection_Request3.proxy("Accept-Encoding", 2600);
      assertNotNull(httpConnection_Request4);
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertTrue(httpConnection_Request0.validateTLSCertificates());
      assertEquals(0, httpConnection_Request0.timeout());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertTrue(httpConnection_Request0.followRedirects());
      assertNull(httpConnection_Request1.requestBody());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertEquals(0, httpConnection_Request1.timeout());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertTrue(httpConnection_Request1.validateTLSCertificates());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertTrue(httpConnection_Request1.followRedirects());
      assertEquals(1048576, httpConnection_Request1.maxBodySize());
      assertNull(httpConnection_KeyVal0.contentType());
      assertEquals("Accept-Encoding", httpConnection_KeyVal0.key());
      assertEquals("*", httpConnection_KeyVal0.value());
      assertFalse(httpConnection_KeyVal0.hasInputStream());
      assertTrue(httpConnection_Request2.validateTLSCertificates());
      assertTrue(httpConnection_Request2.followRedirects());
      assertEquals("UTF-8", httpConnection_Request2.postDataCharset());
      assertFalse(httpConnection_Request2.ignoreContentType());
      assertEquals(0, httpConnection_Request2.timeout());
      assertNull(httpConnection_Request2.requestBody());
      assertFalse(httpConnection_Request2.ignoreHttpErrors());
      assertEquals(1048576, httpConnection_Request2.maxBodySize());
      assertNull(httpConnection_Request3.requestBody());
      assertFalse(httpConnection_Request3.ignoreHttpErrors());
      assertEquals("UTF-8", httpConnection_Request3.postDataCharset());
      assertEquals(1048576, httpConnection_Request3.maxBodySize());
      assertTrue(httpConnection_Request3.validateTLSCertificates());
      assertFalse(httpConnection_Request3.ignoreContentType());
      assertEquals(0, httpConnection_Request3.timeout());
      assertTrue(httpConnection_Request3.followRedirects());
      assertFalse(httpConnection_Request4.ignoreHttpErrors());
      assertNull(httpConnection_Request4.requestBody());
      assertTrue(httpConnection_Request4.validateTLSCertificates());
      assertEquals(0, httpConnection_Request4.timeout());
      assertEquals(1048576, httpConnection_Request4.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request4.postDataCharset());
      assertFalse(httpConnection_Request4.ignoreContentType());
      assertTrue(httpConnection_Request4.followRedirects());
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request0, httpConnection_Request4);
      assertSame(httpConnection_Request0, httpConnection_Request2);
      assertSame(httpConnection_Request0, httpConnection_Request3);
      assertSame(httpConnection_Request1, httpConnection_Request4);
      assertSame(httpConnection_Request1, httpConnection_Request2);
      assertSame(httpConnection_Request1, httpConnection_Request3);
      assertSame(httpConnection_Request1, httpConnection_Request0);
      assertSame(httpConnection_Request2, httpConnection_Request0);
      assertSame(httpConnection_Request2, httpConnection_Request4);
      assertSame(httpConnection_Request2, httpConnection_Request3);
      assertSame(httpConnection_Request2, httpConnection_Request1);
      assertSame(httpConnection_Request3, httpConnection_Request0);
      assertSame(httpConnection_Request3, httpConnection_Request2);
      assertSame(httpConnection_Request3, httpConnection_Request1);
      assertSame(httpConnection_Request3, httpConnection_Request4);
      assertSame(httpConnection_Request4, httpConnection_Request1);
      assertSame(httpConnection_Request4, httpConnection_Request2);
      assertSame(httpConnection_Request4, httpConnection_Request3);
      assertSame(httpConnection_Request4, httpConnection_Request0);
      
      Parser parser0 = Parser.xmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      HttpConnection.Request httpConnection_Request5 = httpConnection_Request4.parser(parser0);
      assertNotNull(httpConnection_Request5);
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertTrue(httpConnection_Request0.validateTLSCertificates());
      assertEquals(0, httpConnection_Request0.timeout());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertTrue(httpConnection_Request0.followRedirects());
      assertNull(httpConnection_Request1.requestBody());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertEquals(0, httpConnection_Request1.timeout());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertTrue(httpConnection_Request1.validateTLSCertificates());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertTrue(httpConnection_Request1.followRedirects());
      assertEquals(1048576, httpConnection_Request1.maxBodySize());
      assertNull(httpConnection_KeyVal0.contentType());
      assertEquals("Accept-Encoding", httpConnection_KeyVal0.key());
      assertEquals("*", httpConnection_KeyVal0.value());
      assertFalse(httpConnection_KeyVal0.hasInputStream());
      assertTrue(httpConnection_Request2.validateTLSCertificates());
      assertTrue(httpConnection_Request2.followRedirects());
      assertEquals("UTF-8", httpConnection_Request2.postDataCharset());
      assertFalse(httpConnection_Request2.ignoreContentType());
      assertEquals(0, httpConnection_Request2.timeout());
      assertNull(httpConnection_Request2.requestBody());
      assertFalse(httpConnection_Request2.ignoreHttpErrors());
      assertEquals(1048576, httpConnection_Request2.maxBodySize());
      assertNull(httpConnection_Request3.requestBody());
      assertFalse(httpConnection_Request3.ignoreHttpErrors());
      assertEquals("UTF-8", httpConnection_Request3.postDataCharset());
      assertEquals(1048576, httpConnection_Request3.maxBodySize());
      assertTrue(httpConnection_Request3.validateTLSCertificates());
      assertFalse(httpConnection_Request3.ignoreContentType());
      assertEquals(0, httpConnection_Request3.timeout());
      assertTrue(httpConnection_Request3.followRedirects());
      assertFalse(httpConnection_Request4.ignoreHttpErrors());
      assertNull(httpConnection_Request4.requestBody());
      assertTrue(httpConnection_Request4.validateTLSCertificates());
      assertEquals(0, httpConnection_Request4.timeout());
      assertEquals(1048576, httpConnection_Request4.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request4.postDataCharset());
      assertFalse(httpConnection_Request4.ignoreContentType());
      assertTrue(httpConnection_Request4.followRedirects());
      assertFalse(parser0.isTrackErrors());
      assertNull(httpConnection_Request5.requestBody());
      assertTrue(httpConnection_Request5.followRedirects());
      assertFalse(httpConnection_Request5.ignoreHttpErrors());
      assertTrue(httpConnection_Request5.validateTLSCertificates());
      assertEquals(0, httpConnection_Request5.timeout());
      assertEquals(1048576, httpConnection_Request5.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request5.postDataCharset());
      assertFalse(httpConnection_Request5.ignoreContentType());
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request0, httpConnection_Request4);
      assertSame(httpConnection_Request0, httpConnection_Request2);
      assertSame(httpConnection_Request0, httpConnection_Request3);
      assertSame(httpConnection_Request0, httpConnection_Request5);
      assertSame(httpConnection_Request1, httpConnection_Request4);
      assertSame(httpConnection_Request1, httpConnection_Request2);
      assertSame(httpConnection_Request1, httpConnection_Request3);
      assertSame(httpConnection_Request1, httpConnection_Request5);
      assertSame(httpConnection_Request1, httpConnection_Request0);
      assertSame(httpConnection_Request2, httpConnection_Request0);
      assertSame(httpConnection_Request2, httpConnection_Request4);
      assertSame(httpConnection_Request2, httpConnection_Request3);
      assertSame(httpConnection_Request2, httpConnection_Request1);
      assertSame(httpConnection_Request2, httpConnection_Request5);
      assertSame(httpConnection_Request3, httpConnection_Request5);
      assertSame(httpConnection_Request3, httpConnection_Request0);
      assertSame(httpConnection_Request3, httpConnection_Request2);
      assertSame(httpConnection_Request3, httpConnection_Request1);
      assertSame(httpConnection_Request3, httpConnection_Request4);
      assertSame(httpConnection_Request4, httpConnection_Request1);
      assertSame(httpConnection_Request4, httpConnection_Request2);
      assertSame(httpConnection_Request4, httpConnection_Request5);
      assertSame(httpConnection_Request4, httpConnection_Request3);
      assertSame(httpConnection_Request4, httpConnection_Request0);
      assertSame(httpConnection_Request5, httpConnection_Request3);
      assertSame(httpConnection_Request5, httpConnection_Request1);
      assertSame(httpConnection_Request5, httpConnection_Request0);
      assertSame(httpConnection_Request5, httpConnection_Request2);
      assertSame(httpConnection_Request5, httpConnection_Request4);
      
      httpConnection_Request5.validateTLSCertificates(false);
      assertFalse(httpConnection_Request0.validateTLSCertificates());
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertEquals(0, httpConnection_Request0.timeout());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertTrue(httpConnection_Request0.followRedirects());
      assertFalse(httpConnection_Request1.validateTLSCertificates());
      assertNull(httpConnection_Request1.requestBody());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertEquals(0, httpConnection_Request1.timeout());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertTrue(httpConnection_Request1.followRedirects());
      assertEquals(1048576, httpConnection_Request1.maxBodySize());
      assertNull(httpConnection_KeyVal0.contentType());
      assertEquals("Accept-Encoding", httpConnection_KeyVal0.key());
      assertEquals("*", httpConnection_KeyVal0.value());
      assertFalse(httpConnection_KeyVal0.hasInputStream());
      assertTrue(httpConnection_Request2.followRedirects());
      assertEquals("UTF-8", httpConnection_Request2.postDataCharset());
      assertFalse(httpConnection_Request2.ignoreContentType());
      assertEquals(0, httpConnection_Request2.timeout());
      assertNull(httpConnection_Request2.requestBody());
      assertFalse(httpConnection_Request2.ignoreHttpErrors());
      assertFalse(httpConnection_Request2.validateTLSCertificates());
      assertEquals(1048576, httpConnection_Request2.maxBodySize());
      assertNull(httpConnection_Request3.requestBody());
      assertFalse(httpConnection_Request3.validateTLSCertificates());
      assertFalse(httpConnection_Request3.ignoreHttpErrors());
      assertEquals("UTF-8", httpConnection_Request3.postDataCharset());
      assertEquals(1048576, httpConnection_Request3.maxBodySize());
      assertFalse(httpConnection_Request3.ignoreContentType());
      assertEquals(0, httpConnection_Request3.timeout());
      assertTrue(httpConnection_Request3.followRedirects());
      assertFalse(httpConnection_Request4.ignoreHttpErrors());
      assertNull(httpConnection_Request4.requestBody());
      assertFalse(httpConnection_Request4.validateTLSCertificates());
      assertEquals(0, httpConnection_Request4.timeout());
      assertEquals(1048576, httpConnection_Request4.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request4.postDataCharset());
      assertFalse(httpConnection_Request4.ignoreContentType());
      assertTrue(httpConnection_Request4.followRedirects());
      assertFalse(parser0.isTrackErrors());
      assertFalse(httpConnection_Request5.validateTLSCertificates());
      assertNull(httpConnection_Request5.requestBody());
      assertTrue(httpConnection_Request5.followRedirects());
      assertFalse(httpConnection_Request5.ignoreHttpErrors());
      assertEquals(0, httpConnection_Request5.timeout());
      assertEquals(1048576, httpConnection_Request5.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request5.postDataCharset());
      assertFalse(httpConnection_Request5.ignoreContentType());
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request0, httpConnection_Request4);
      assertSame(httpConnection_Request0, httpConnection_Request2);
      assertSame(httpConnection_Request0, httpConnection_Request3);
      assertSame(httpConnection_Request0, httpConnection_Request5);
      assertSame(httpConnection_Request1, httpConnection_Request4);
      assertSame(httpConnection_Request1, httpConnection_Request2);
      assertSame(httpConnection_Request1, httpConnection_Request3);
      assertSame(httpConnection_Request1, httpConnection_Request5);
      assertSame(httpConnection_Request1, httpConnection_Request0);
      assertSame(httpConnection_Request2, httpConnection_Request0);
      assertSame(httpConnection_Request2, httpConnection_Request4);
      assertSame(httpConnection_Request2, httpConnection_Request3);
      assertSame(httpConnection_Request2, httpConnection_Request1);
      assertSame(httpConnection_Request2, httpConnection_Request5);
      assertSame(httpConnection_Request3, httpConnection_Request5);
      assertSame(httpConnection_Request3, httpConnection_Request0);
      assertSame(httpConnection_Request3, httpConnection_Request2);
      assertSame(httpConnection_Request3, httpConnection_Request1);
      assertSame(httpConnection_Request3, httpConnection_Request4);
      assertSame(httpConnection_Request4, httpConnection_Request1);
      assertSame(httpConnection_Request4, httpConnection_Request2);
      assertSame(httpConnection_Request4, httpConnection_Request5);
      assertSame(httpConnection_Request4, httpConnection_Request3);
      assertSame(httpConnection_Request4, httpConnection_Request0);
      assertSame(httpConnection_Request5, httpConnection_Request3);
      assertSame(httpConnection_Request5, httpConnection_Request1);
      assertSame(httpConnection_Request5, httpConnection_Request0);
      assertSame(httpConnection_Request5, httpConnection_Request2);
      assertSame(httpConnection_Request5, httpConnection_Request4);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      assertNotNull(httpConnection_Request0);
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertTrue(httpConnection_Request0.validateTLSCertificates());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNull(httpConnection_Request0.requestBody());
      
      // Undeclared exception!
      try { 
        httpConnection_Request0.data((Connection.KeyVal) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Key val must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertNotNull(fileDescriptor0);
      assertFalse(fileDescriptor0.valid());
      
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      assertNotNull(mockFileInputStream0);
      
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(mockFileInputStream0);
      assertNotNull(pushbackInputStream0);
      assertFalse(fileDescriptor0.valid());
      
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create("P9", "P9", (InputStream) pushbackInputStream0);
      assertNotNull(httpConnection_KeyVal0);
      assertFalse(fileDescriptor0.valid());
      assertNull(httpConnection_KeyVal0.contentType());
      assertEquals("P9", httpConnection_KeyVal0.value());
      assertTrue(httpConnection_KeyVal0.hasInputStream());
      assertEquals("P9", httpConnection_KeyVal0.key());
      
      String string0 = httpConnection_KeyVal0.key();
      assertEquals("P9", string0);
      assertNotNull(string0);
      assertFalse(fileDescriptor0.valid());
      assertNull(httpConnection_KeyVal0.contentType());
      assertEquals("P9", httpConnection_KeyVal0.value());
      assertTrue(httpConnection_KeyVal0.hasInputStream());
      assertEquals("P9", httpConnection_KeyVal0.key());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      assertNotNull(httpConnection_Request0);
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertTrue(httpConnection_Request0.validateTLSCertificates());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertTrue(httpConnection_Request0.followRedirects());
      
      int int0 = (-518);
      // Undeclared exception!
      try { 
        httpConnection_Request0.timeout((-518));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Timeout milliseconds must be 0 (infinite) or greater
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      assertNotNull(httpConnection_Request0);
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNull(httpConnection_Request0.requestBody());
      assertTrue(httpConnection_Request0.validateTLSCertificates());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertTrue(httpConnection_Request0.followRedirects());
      
      Connection.Request connection_Request0 = httpConnection_Request0.ignoreContentType(true);
      assertNotNull(connection_Request0);
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNull(httpConnection_Request0.requestBody());
      assertTrue(httpConnection_Request0.validateTLSCertificates());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertTrue(httpConnection_Request0.ignoreContentType());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertTrue(httpConnection_Request0.followRedirects());
      assertTrue(connection_Request0.ignoreContentType());
      assertTrue(connection_Request0.validateTLSCertificates());
      assertTrue(connection_Request0.followRedirects());
      assertEquals(1048576, connection_Request0.maxBodySize());
      assertEquals(30000, connection_Request0.timeout());
      assertEquals("UTF-8", connection_Request0.postDataCharset());
      assertFalse(connection_Request0.ignoreHttpErrors());
      assertNull(connection_Request0.requestBody());
      assertSame(httpConnection_Request0, connection_Request0);
      assertSame(connection_Request0, httpConnection_Request0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      assertNotNull(httpConnection_Request0);
      assertTrue(httpConnection_Request0.validateTLSCertificates());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertTrue(httpConnection_Request0.followRedirects());
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      
      // Undeclared exception!
      try { 
        HttpConnection.Response.execute(httpConnection_Request0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      // Undeclared exception!
      try { 
        HttpConnection.connect("v3U{/'J{iuG\"3");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Malformed URL: v3U{/'J{iuG\"3
         //
         verifyException("org.jsoup.helper.HttpConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      assertNotNull(httpConnection_Response0);
      assertEquals(0, httpConnection_Response0.statusCode());
      assertNull(httpConnection_Response0.statusMessage());
      assertNull(httpConnection_Response0.charset());
      assertNull(httpConnection_Response0.contentType());
      
      HttpConnection.Response httpConnection_Response1 = httpConnection_Response0.charset("{m`w+vyfb4qzr");
      assertNotNull(httpConnection_Response1);
      assertEquals(0, httpConnection_Response0.statusCode());
      assertEquals("{m`w+vyfb4qzr", httpConnection_Response0.charset());
      assertNull(httpConnection_Response0.statusMessage());
      assertNull(httpConnection_Response0.contentType());
      assertNull(httpConnection_Response1.statusMessage());
      assertNull(httpConnection_Response1.contentType());
      assertEquals("{m`w+vyfb4qzr", httpConnection_Response1.charset());
      assertEquals(0, httpConnection_Response1.statusCode());
      assertSame(httpConnection_Response0, httpConnection_Response1);
      assertSame(httpConnection_Response1, httpConnection_Response0);
      
      // Undeclared exception!
      try { 
        httpConnection_Response1.parse();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Request must be executed (with .execute(), .get(), or .post() before parsing response
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      assertNotNull(httpConnection_Request0);
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNull(httpConnection_Request0.requestBody());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertTrue(httpConnection_Request0.followRedirects());
      assertTrue(httpConnection_Request0.validateTLSCertificates());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.proxy("Unhandled content type. Must be text/*, application/xml, or application/xhtml+xml", 0);
      assertNotNull(httpConnection_Request1);
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNull(httpConnection_Request0.requestBody());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertTrue(httpConnection_Request0.followRedirects());
      assertTrue(httpConnection_Request0.validateTLSCertificates());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertTrue(httpConnection_Request1.validateTLSCertificates());
      assertNull(httpConnection_Request1.requestBody());
      assertTrue(httpConnection_Request1.followRedirects());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertEquals(1048576, httpConnection_Request1.maxBodySize());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertEquals(30000, httpConnection_Request1.timeout());
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request1, httpConnection_Request0);
      
      Proxy proxy0 = Proxy.NO_PROXY;
      assertNotNull(proxy0);
      assertEquals(Proxy.Type.DIRECT, proxy0.type());
      assertEquals("DIRECT", proxy0.toString());
      
      HttpConnection.Request httpConnection_Request2 = httpConnection_Request1.proxy(proxy0);
      assertNotNull(httpConnection_Request2);
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNull(httpConnection_Request0.requestBody());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertTrue(httpConnection_Request0.followRedirects());
      assertTrue(httpConnection_Request0.validateTLSCertificates());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertTrue(httpConnection_Request1.validateTLSCertificates());
      assertNull(httpConnection_Request1.requestBody());
      assertTrue(httpConnection_Request1.followRedirects());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertEquals(1048576, httpConnection_Request1.maxBodySize());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertEquals(30000, httpConnection_Request1.timeout());
      assertEquals(Proxy.Type.DIRECT, proxy0.type());
      assertEquals("DIRECT", proxy0.toString());
      assertFalse(httpConnection_Request2.ignoreHttpErrors());
      assertNull(httpConnection_Request2.requestBody());
      assertEquals(1048576, httpConnection_Request2.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request2.postDataCharset());
      assertTrue(httpConnection_Request2.validateTLSCertificates());
      assertFalse(httpConnection_Request2.ignoreContentType());
      assertEquals(30000, httpConnection_Request2.timeout());
      assertTrue(httpConnection_Request2.followRedirects());
      assertSame(httpConnection_Request0, httpConnection_Request2);
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request1, httpConnection_Request2);
      assertSame(httpConnection_Request1, httpConnection_Request0);
      assertSame(httpConnection_Request2, httpConnection_Request0);
      assertSame(httpConnection_Request2, httpConnection_Request1);
      
      boolean boolean0 = httpConnection_Request2.ignoreContentType();
      assertFalse(boolean0);
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNull(httpConnection_Request0.requestBody());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertTrue(httpConnection_Request0.followRedirects());
      assertTrue(httpConnection_Request0.validateTLSCertificates());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertTrue(httpConnection_Request1.validateTLSCertificates());
      assertNull(httpConnection_Request1.requestBody());
      assertTrue(httpConnection_Request1.followRedirects());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertEquals(1048576, httpConnection_Request1.maxBodySize());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertEquals(30000, httpConnection_Request1.timeout());
      assertEquals(Proxy.Type.DIRECT, proxy0.type());
      assertEquals("DIRECT", proxy0.toString());
      assertFalse(httpConnection_Request2.ignoreHttpErrors());
      assertNull(httpConnection_Request2.requestBody());
      assertEquals(1048576, httpConnection_Request2.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request2.postDataCharset());
      assertTrue(httpConnection_Request2.validateTLSCertificates());
      assertFalse(httpConnection_Request2.ignoreContentType());
      assertEquals(30000, httpConnection_Request2.timeout());
      assertTrue(httpConnection_Request2.followRedirects());
      assertSame(httpConnection_Request0, httpConnection_Request2);
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request1, httpConnection_Request2);
      assertSame(httpConnection_Request1, httpConnection_Request0);
      assertSame(httpConnection_Request2, httpConnection_Request0);
      assertSame(httpConnection_Request2, httpConnection_Request1);
      
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      assertNotNull(httpConnection_Response0);
      assertNull(httpConnection_Response0.charset());
      assertEquals(0, httpConnection_Response0.statusCode());
      assertNull(httpConnection_Response0.statusMessage());
      assertNull(httpConnection_Response0.contentType());
      
      // Undeclared exception!
      try { 
        httpConnection_Response0.body();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Request must be executed (with .execute(), .get(), or .post() before getting response body
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      assertNotNull(httpConnection_Request0);
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertTrue(httpConnection_Request0.validateTLSCertificates());
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      
      Parser parser0 = Parser.xmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.parser(parser0);
      assertNotNull(httpConnection_Request1);
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertTrue(httpConnection_Request0.validateTLSCertificates());
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertFalse(parser0.isTrackErrors());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertNull(httpConnection_Request1.requestBody());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertEquals(1048576, httpConnection_Request1.maxBodySize());
      assertTrue(httpConnection_Request1.validateTLSCertificates());
      assertEquals(30000, httpConnection_Request1.timeout());
      assertTrue(httpConnection_Request1.followRedirects());
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request1, httpConnection_Request0);
      
      HttpConnection.Request httpConnection_Request2 = httpConnection_Request1.proxy("cite", 162);
      assertNotNull(httpConnection_Request2);
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertTrue(httpConnection_Request0.validateTLSCertificates());
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertFalse(parser0.isTrackErrors());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertNull(httpConnection_Request1.requestBody());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertEquals(1048576, httpConnection_Request1.maxBodySize());
      assertTrue(httpConnection_Request1.validateTLSCertificates());
      assertEquals(30000, httpConnection_Request1.timeout());
      assertTrue(httpConnection_Request1.followRedirects());
      assertTrue(httpConnection_Request2.followRedirects());
      assertEquals(30000, httpConnection_Request2.timeout());
      assertFalse(httpConnection_Request2.ignoreHttpErrors());
      assertTrue(httpConnection_Request2.validateTLSCertificates());
      assertEquals(1048576, httpConnection_Request2.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request2.postDataCharset());
      assertFalse(httpConnection_Request2.ignoreContentType());
      assertNull(httpConnection_Request2.requestBody());
      assertSame(httpConnection_Request0, httpConnection_Request2);
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request1, httpConnection_Request0);
      assertSame(httpConnection_Request1, httpConnection_Request2);
      assertSame(httpConnection_Request2, httpConnection_Request0);
      assertSame(httpConnection_Request2, httpConnection_Request1);
      
      URL uRL0 = MockURL.getHttpExample();
      assertNotNull(uRL0);
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      
      Connection.Method connection_Method0 = Connection.Method.HEAD;
      HttpConnection.Request httpConnection_Request3 = (HttpConnection.Request)httpConnection_Request2.method(connection_Method0);
      assertNotNull(httpConnection_Request3);
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertTrue(httpConnection_Request0.validateTLSCertificates());
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertFalse(parser0.isTrackErrors());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertNull(httpConnection_Request1.requestBody());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertEquals(1048576, httpConnection_Request1.maxBodySize());
      assertTrue(httpConnection_Request1.validateTLSCertificates());
      assertEquals(30000, httpConnection_Request1.timeout());
      assertTrue(httpConnection_Request1.followRedirects());
      assertTrue(httpConnection_Request2.followRedirects());
      assertEquals(30000, httpConnection_Request2.timeout());
      assertFalse(httpConnection_Request2.ignoreHttpErrors());
      assertTrue(httpConnection_Request2.validateTLSCertificates());
      assertEquals(1048576, httpConnection_Request2.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request2.postDataCharset());
      assertFalse(httpConnection_Request2.ignoreContentType());
      assertNull(httpConnection_Request2.requestBody());
      assertEquals("UTF-8", httpConnection_Request3.postDataCharset());
      assertTrue(httpConnection_Request3.validateTLSCertificates());
      assertFalse(httpConnection_Request3.ignoreContentType());
      assertTrue(httpConnection_Request3.followRedirects());
      assertEquals(1048576, httpConnection_Request3.maxBodySize());
      assertEquals(30000, httpConnection_Request3.timeout());
      assertNull(httpConnection_Request3.requestBody());
      assertFalse(httpConnection_Request3.ignoreHttpErrors());
      assertSame(httpConnection_Request0, httpConnection_Request2);
      assertSame(httpConnection_Request0, httpConnection_Request3);
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request1, httpConnection_Request3);
      assertSame(httpConnection_Request1, httpConnection_Request0);
      assertSame(httpConnection_Request1, httpConnection_Request2);
      assertSame(httpConnection_Request2, httpConnection_Request0);
      assertSame(httpConnection_Request2, httpConnection_Request3);
      assertSame(httpConnection_Request2, httpConnection_Request1);
      assertSame(httpConnection_Request3, httpConnection_Request0);
      assertSame(httpConnection_Request3, httpConnection_Request2);
      assertSame(httpConnection_Request3, httpConnection_Request1);
      
      httpConnection_Request2.url = uRL0;
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertTrue(httpConnection_Request0.validateTLSCertificates());
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertFalse(parser0.isTrackErrors());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertNull(httpConnection_Request1.requestBody());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertEquals(1048576, httpConnection_Request1.maxBodySize());
      assertTrue(httpConnection_Request1.validateTLSCertificates());
      assertEquals(30000, httpConnection_Request1.timeout());
      assertTrue(httpConnection_Request1.followRedirects());
      assertTrue(httpConnection_Request2.followRedirects());
      assertEquals(30000, httpConnection_Request2.timeout());
      assertFalse(httpConnection_Request2.ignoreHttpErrors());
      assertTrue(httpConnection_Request2.validateTLSCertificates());
      assertEquals(1048576, httpConnection_Request2.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request2.postDataCharset());
      assertFalse(httpConnection_Request2.ignoreContentType());
      assertNull(httpConnection_Request2.requestBody());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals((-1), httpConnection_Request2.url.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", httpConnection_Request2.url.toString());
      assertNull(httpConnection_Request2.url.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", httpConnection_Request2.url.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", httpConnection_Request2.url.toExternalForm());
      assertNull(httpConnection_Request2.url.getQuery());
      assertNull(httpConnection_Request2.url.getUserInfo());
      assertEquals((-1), httpConnection_Request2.url.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", httpConnection_Request2.url.getHost());
      assertEquals("http", httpConnection_Request2.url.getProtocol());
      
      String string0 = httpConnection_Request2.postDataCharset();
      assertEquals("UTF-8", string0);
      assertNotNull(string0);
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertTrue(httpConnection_Request0.validateTLSCertificates());
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertFalse(parser0.isTrackErrors());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertNull(httpConnection_Request1.requestBody());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertEquals(1048576, httpConnection_Request1.maxBodySize());
      assertTrue(httpConnection_Request1.validateTLSCertificates());
      assertEquals(30000, httpConnection_Request1.timeout());
      assertTrue(httpConnection_Request1.followRedirects());
      assertTrue(httpConnection_Request2.followRedirects());
      assertEquals(30000, httpConnection_Request2.timeout());
      assertFalse(httpConnection_Request2.ignoreHttpErrors());
      assertTrue(httpConnection_Request2.validateTLSCertificates());
      assertEquals(1048576, httpConnection_Request2.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request2.postDataCharset());
      assertFalse(httpConnection_Request2.ignoreContentType());
      assertNull(httpConnection_Request2.requestBody());
      assertSame(httpConnection_Request0, httpConnection_Request2);
      assertSame(httpConnection_Request0, httpConnection_Request3);
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request1, httpConnection_Request3);
      assertSame(httpConnection_Request1, httpConnection_Request0);
      assertSame(httpConnection_Request1, httpConnection_Request2);
      assertSame(httpConnection_Request2, httpConnection_Request0);
      assertSame(httpConnection_Request2, httpConnection_Request3);
      assertSame(httpConnection_Request2, httpConnection_Request1);
      
      boolean boolean0 = httpConnection_Request0.ignoreContentType();
      assertFalse(boolean0);
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertTrue(httpConnection_Request0.validateTLSCertificates());
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertSame(httpConnection_Request0, httpConnection_Request2);
      assertSame(httpConnection_Request0, httpConnection_Request3);
      assertSame(httpConnection_Request0, httpConnection_Request1);
      
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      assertNotNull(httpConnection_Response0);
      assertEquals(0, httpConnection_Response0.statusCode());
      assertNull(httpConnection_Response0.statusMessage());
      assertNull(httpConnection_Response0.charset());
      assertNull(httpConnection_Response0.contentType());
      
      // Undeclared exception!
      try { 
        httpConnection_Response0.parse();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Request must be executed (with .execute(), .get(), or .post() before parsing response
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      assertNotNull(httpConnection_Request0);
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertTrue(httpConnection_Request0.followRedirects());
      assertTrue(httpConnection_Request0.validateTLSCertificates());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      
      // Undeclared exception!
      try { 
        httpConnection_Request0.proxy("fillable {}", (-1783));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // port out of range:-1783
         //
         verifyException("java.net.InetSocketAddress", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create("Header map must not be null", "Header map must not be null");
      assertNotNull(httpConnection_KeyVal0);
      assertEquals("Header map must not be null", httpConnection_KeyVal0.value());
      assertNull(httpConnection_KeyVal0.contentType());
      assertEquals("Header map must not be null", httpConnection_KeyVal0.key());
      assertFalse(httpConnection_KeyVal0.hasInputStream());
      
      String string0 = httpConnection_KeyVal0.toString();
      assertEquals("Header map must not be null=Header map must not be null", string0);
      assertNotNull(string0);
      assertEquals("Header map must not be null", httpConnection_KeyVal0.value());
      assertNull(httpConnection_KeyVal0.contentType());
      assertEquals("Header map must not be null", httpConnection_KeyVal0.key());
      assertFalse(httpConnection_KeyVal0.hasInputStream());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      assertNotNull(httpConnection_Request0);
      assertNull(httpConnection_Request0.requestBody());
      assertTrue(httpConnection_Request0.followRedirects());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertTrue(httpConnection_Request0.validateTLSCertificates());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.timeout(3616);
      assertNotNull(httpConnection_Request1);
      assertNull(httpConnection_Request0.requestBody());
      assertTrue(httpConnection_Request0.followRedirects());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertTrue(httpConnection_Request0.validateTLSCertificates());
      assertEquals(3616, httpConnection_Request0.timeout());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals(1048576, httpConnection_Request1.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertTrue(httpConnection_Request1.followRedirects());
      assertEquals(3616, httpConnection_Request1.timeout());
      assertTrue(httpConnection_Request1.validateTLSCertificates());
      assertNull(httpConnection_Request1.requestBody());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request1, httpConnection_Request0);
      
      HttpConnection.Request httpConnection_Request2 = (HttpConnection.Request)httpConnection_Request1.header("Request has already been read", "Fo=c4u8)xPh-`");
      assertNotNull(httpConnection_Request2);
      assertNull(httpConnection_Request0.requestBody());
      assertTrue(httpConnection_Request0.followRedirects());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertTrue(httpConnection_Request0.validateTLSCertificates());
      assertEquals(3616, httpConnection_Request0.timeout());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals(1048576, httpConnection_Request1.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertTrue(httpConnection_Request1.followRedirects());
      assertEquals(3616, httpConnection_Request1.timeout());
      assertTrue(httpConnection_Request1.validateTLSCertificates());
      assertNull(httpConnection_Request1.requestBody());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertEquals("UTF-8", httpConnection_Request2.postDataCharset());
      assertTrue(httpConnection_Request2.validateTLSCertificates());
      assertFalse(httpConnection_Request2.ignoreContentType());
      assertEquals(1048576, httpConnection_Request2.maxBodySize());
      assertTrue(httpConnection_Request2.followRedirects());
      assertEquals(3616, httpConnection_Request2.timeout());
      assertNull(httpConnection_Request2.requestBody());
      assertFalse(httpConnection_Request2.ignoreHttpErrors());
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request0, httpConnection_Request2);
      assertSame(httpConnection_Request1, httpConnection_Request0);
      assertSame(httpConnection_Request1, httpConnection_Request2);
      assertSame(httpConnection_Request2, httpConnection_Request1);
      assertSame(httpConnection_Request2, httpConnection_Request0);
      
      boolean boolean0 = httpConnection_Request1.followRedirects();
      assertTrue(boolean0);
      assertNull(httpConnection_Request0.requestBody());
      assertTrue(httpConnection_Request0.followRedirects());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertTrue(httpConnection_Request0.validateTLSCertificates());
      assertEquals(3616, httpConnection_Request0.timeout());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals(1048576, httpConnection_Request1.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertTrue(httpConnection_Request1.followRedirects());
      assertEquals(3616, httpConnection_Request1.timeout());
      assertTrue(httpConnection_Request1.validateTLSCertificates());
      assertNull(httpConnection_Request1.requestBody());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request0, httpConnection_Request2);
      assertSame(httpConnection_Request1, httpConnection_Request0);
      assertSame(httpConnection_Request1, httpConnection_Request2);
      
      String string0 = httpConnection_Request1.requestBody();
      assertNull(string0);
      assertNull(httpConnection_Request0.requestBody());
      assertTrue(httpConnection_Request0.followRedirects());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertTrue(httpConnection_Request0.validateTLSCertificates());
      assertEquals(3616, httpConnection_Request0.timeout());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals(1048576, httpConnection_Request1.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertTrue(httpConnection_Request1.followRedirects());
      assertEquals(3616, httpConnection_Request1.timeout());
      assertTrue(httpConnection_Request1.validateTLSCertificates());
      assertNull(httpConnection_Request1.requestBody());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request0, httpConnection_Request2);
      assertSame(httpConnection_Request1, httpConnection_Request0);
      assertSame(httpConnection_Request1, httpConnection_Request2);
      
      String string1 = httpConnection_Request1.requestBody();
      assertNull(string1);
      assertNull(httpConnection_Request0.requestBody());
      assertTrue(httpConnection_Request0.followRedirects());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertTrue(httpConnection_Request0.validateTLSCertificates());
      assertEquals(3616, httpConnection_Request0.timeout());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals(1048576, httpConnection_Request1.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertTrue(httpConnection_Request1.followRedirects());
      assertEquals(3616, httpConnection_Request1.timeout());
      assertTrue(httpConnection_Request1.validateTLSCertificates());
      assertNull(httpConnection_Request1.requestBody());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request0, httpConnection_Request2);
      assertSame(httpConnection_Request1, httpConnection_Request0);
      assertSame(httpConnection_Request1, httpConnection_Request2);
      
      String string2 = "";
      String string3 = "";
      MockFile mockFile0 = new MockFile("");
      assertNotNull(mockFile0);
      
      MockFileInputStream mockFileInputStream0 = null;
      try {
        mockFileInputStream0 = new MockFileInputStream(mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      assertNotNull(httpConnection_Request0);
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNull(httpConnection_Request0.requestBody());
      assertTrue(httpConnection_Request0.validateTLSCertificates());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.timeout(32768);
      assertNotNull(httpConnection_Request1);
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNull(httpConnection_Request0.requestBody());
      assertTrue(httpConnection_Request0.validateTLSCertificates());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(32768, httpConnection_Request0.timeout());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertTrue(httpConnection_Request1.validateTLSCertificates());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertTrue(httpConnection_Request1.followRedirects());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertEquals(32768, httpConnection_Request1.timeout());
      assertEquals(1048576, httpConnection_Request1.maxBodySize());
      assertNull(httpConnection_Request1.requestBody());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request1, httpConnection_Request0);
      
      URL uRL0 = MockURL.getHttpExample();
      assertNotNull(uRL0);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      
      HttpConnection.Request httpConnection_Request2 = (HttpConnection.Request)httpConnection_Request1.url(uRL0);
      assertNotNull(httpConnection_Request2);
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNull(httpConnection_Request0.requestBody());
      assertTrue(httpConnection_Request0.validateTLSCertificates());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(32768, httpConnection_Request0.timeout());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertTrue(httpConnection_Request1.validateTLSCertificates());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertTrue(httpConnection_Request1.followRedirects());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertEquals(32768, httpConnection_Request1.timeout());
      assertEquals(1048576, httpConnection_Request1.maxBodySize());
      assertNull(httpConnection_Request1.requestBody());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals(32768, httpConnection_Request2.timeout());
      assertEquals(1048576, httpConnection_Request2.maxBodySize());
      assertTrue(httpConnection_Request2.validateTLSCertificates());
      assertTrue(httpConnection_Request2.followRedirects());
      assertFalse(httpConnection_Request2.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request2.postDataCharset());
      assertNull(httpConnection_Request2.requestBody());
      assertFalse(httpConnection_Request2.ignoreHttpErrors());
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request0, httpConnection_Request2);
      assertSame(httpConnection_Request1, httpConnection_Request2);
      assertSame(httpConnection_Request1, httpConnection_Request0);
      assertSame(httpConnection_Request2, httpConnection_Request0);
      assertSame(httpConnection_Request2, httpConnection_Request1);
      
      HttpConnection.Request httpConnection_Request3 = httpConnection_Request1.parser((Parser) null);
      assertNotNull(httpConnection_Request3);
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNull(httpConnection_Request0.requestBody());
      assertTrue(httpConnection_Request0.validateTLSCertificates());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(32768, httpConnection_Request0.timeout());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertTrue(httpConnection_Request1.validateTLSCertificates());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertTrue(httpConnection_Request1.followRedirects());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertEquals(32768, httpConnection_Request1.timeout());
      assertEquals(1048576, httpConnection_Request1.maxBodySize());
      assertNull(httpConnection_Request1.requestBody());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertEquals("UTF-8", httpConnection_Request3.postDataCharset());
      assertFalse(httpConnection_Request3.ignoreContentType());
      assertEquals(1048576, httpConnection_Request3.maxBodySize());
      assertEquals(32768, httpConnection_Request3.timeout());
      assertTrue(httpConnection_Request3.validateTLSCertificates());
      assertTrue(httpConnection_Request3.followRedirects());
      assertNull(httpConnection_Request3.requestBody());
      assertFalse(httpConnection_Request3.ignoreHttpErrors());
      assertSame(httpConnection_Request0, httpConnection_Request3);
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request0, httpConnection_Request2);
      assertSame(httpConnection_Request1, httpConnection_Request2);
      assertSame(httpConnection_Request1, httpConnection_Request0);
      assertSame(httpConnection_Request1, httpConnection_Request3);
      assertSame(httpConnection_Request3, httpConnection_Request2);
      assertSame(httpConnection_Request3, httpConnection_Request0);
      assertSame(httpConnection_Request3, httpConnection_Request1);
      
      byte[] byteArray0 = new byte[3];
      Connection.Method connection_Method0 = Connection.Method.POST;
      httpConnection_Request0.method = connection_Method0;
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNull(httpConnection_Request0.requestBody());
      assertTrue(httpConnection_Request0.validateTLSCertificates());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(32768, httpConnection_Request0.timeout());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertTrue(httpConnection_Request0.method.hasBody());
      
      byteArray0[0] = (byte)20;
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      byteArray0[1] = (byte) (-90);
      byteArray0[2] = (byte)9;
      HttpConnection.Request httpConnection_Request4 = (HttpConnection.Request)httpConnection_Request3.url(uRL0);
      assertNotNull(httpConnection_Request4);
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNull(httpConnection_Request0.requestBody());
      assertTrue(httpConnection_Request0.validateTLSCertificates());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(32768, httpConnection_Request0.timeout());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertTrue(httpConnection_Request1.validateTLSCertificates());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertTrue(httpConnection_Request1.followRedirects());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertEquals(32768, httpConnection_Request1.timeout());
      assertEquals(1048576, httpConnection_Request1.maxBodySize());
      assertNull(httpConnection_Request1.requestBody());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("UTF-8", httpConnection_Request3.postDataCharset());
      assertFalse(httpConnection_Request3.ignoreContentType());
      assertEquals(1048576, httpConnection_Request3.maxBodySize());
      assertEquals(32768, httpConnection_Request3.timeout());
      assertTrue(httpConnection_Request3.validateTLSCertificates());
      assertTrue(httpConnection_Request3.followRedirects());
      assertNull(httpConnection_Request3.requestBody());
      assertFalse(httpConnection_Request3.ignoreHttpErrors());
      assertEquals(1048576, httpConnection_Request4.maxBodySize());
      assertFalse(httpConnection_Request4.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request4.postDataCharset());
      assertTrue(httpConnection_Request4.validateTLSCertificates());
      assertNull(httpConnection_Request4.requestBody());
      assertTrue(httpConnection_Request4.followRedirects());
      assertFalse(httpConnection_Request4.ignoreHttpErrors());
      assertEquals(32768, httpConnection_Request4.timeout());
      assertSame(httpConnection_Request0, httpConnection_Request3);
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request0, httpConnection_Request2);
      assertSame(httpConnection_Request0, httpConnection_Request4);
      assertSame(httpConnection_Request1, httpConnection_Request2);
      assertSame(httpConnection_Request1, httpConnection_Request4);
      assertSame(httpConnection_Request1, httpConnection_Request0);
      assertSame(httpConnection_Request1, httpConnection_Request3);
      assertSame(httpConnection_Request3, httpConnection_Request4);
      assertSame(httpConnection_Request3, httpConnection_Request2);
      assertSame(httpConnection_Request3, httpConnection_Request0);
      assertSame(httpConnection_Request3, httpConnection_Request1);
      assertSame(httpConnection_Request4, httpConnection_Request0);
      assertSame(httpConnection_Request4, httpConnection_Request2);
      assertSame(httpConnection_Request4, httpConnection_Request1);
      assertSame(httpConnection_Request4, httpConnection_Request3);
      
      boolean boolean2 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertArrayEquals(new byte[] {(byte)20, (byte) (-90), (byte)9}, byteArray0);
      assertEquals(3, byteArray0.length);
      
      Proxy proxy0 = Proxy.NO_PROXY;
      assertNotNull(proxy0);
      assertEquals("DIRECT", proxy0.toString());
      assertEquals(Proxy.Type.DIRECT, proxy0.type());
      
      HttpConnection.Request httpConnection_Request5 = httpConnection_Request1.proxy(proxy0);
      assertNotNull(httpConnection_Request5);
      assertNull(httpConnection_Request5.requestBody());
      assertTrue(httpConnection_Request5.followRedirects());
      assertFalse(httpConnection_Request5.ignoreHttpErrors());
      assertTrue(httpConnection_Request5.validateTLSCertificates());
      assertEquals(32768, httpConnection_Request5.timeout());
      assertEquals(1048576, httpConnection_Request5.maxBodySize());
      assertFalse(httpConnection_Request5.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request5.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNull(httpConnection_Request0.requestBody());
      assertTrue(httpConnection_Request0.validateTLSCertificates());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(32768, httpConnection_Request0.timeout());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertTrue(httpConnection_Request1.validateTLSCertificates());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertTrue(httpConnection_Request1.followRedirects());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertEquals(32768, httpConnection_Request1.timeout());
      assertEquals(1048576, httpConnection_Request1.maxBodySize());
      assertNull(httpConnection_Request1.requestBody());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertEquals("DIRECT", proxy0.toString());
      assertEquals(Proxy.Type.DIRECT, proxy0.type());
      assertSame(httpConnection_Request5, httpConnection_Request3);
      assertSame(httpConnection_Request5, httpConnection_Request1);
      assertSame(httpConnection_Request5, httpConnection_Request2);
      assertSame(httpConnection_Request5, httpConnection_Request4);
      assertSame(httpConnection_Request5, httpConnection_Request0);
      assertSame(httpConnection_Request0, httpConnection_Request3);
      assertSame(httpConnection_Request0, httpConnection_Request5);
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request0, httpConnection_Request2);
      assertSame(httpConnection_Request0, httpConnection_Request4);
      assertSame(httpConnection_Request1, httpConnection_Request2);
      assertSame(httpConnection_Request1, httpConnection_Request4);
      assertSame(httpConnection_Request1, httpConnection_Request0);
      assertSame(httpConnection_Request1, httpConnection_Request3);
      assertSame(httpConnection_Request1, httpConnection_Request5);
      
      boolean boolean3 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      
      HttpConnection.Request httpConnection_Request6 = httpConnection_Request3.proxy("d", 32768);
      assertNotNull(httpConnection_Request6);
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNull(httpConnection_Request0.requestBody());
      assertTrue(httpConnection_Request0.validateTLSCertificates());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(32768, httpConnection_Request0.timeout());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request6.postDataCharset());
      assertFalse(httpConnection_Request6.ignoreContentType());
      assertTrue(httpConnection_Request6.validateTLSCertificates());
      assertEquals(32768, httpConnection_Request6.timeout());
      assertTrue(httpConnection_Request6.followRedirects());
      assertEquals(1048576, httpConnection_Request6.maxBodySize());
      assertFalse(httpConnection_Request6.ignoreHttpErrors());
      assertNull(httpConnection_Request6.requestBody());
      assertTrue(httpConnection_Request1.validateTLSCertificates());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertTrue(httpConnection_Request1.followRedirects());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertEquals(32768, httpConnection_Request1.timeout());
      assertEquals(1048576, httpConnection_Request1.maxBodySize());
      assertNull(httpConnection_Request1.requestBody());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertEquals("UTF-8", httpConnection_Request3.postDataCharset());
      assertFalse(httpConnection_Request3.ignoreContentType());
      assertEquals(1048576, httpConnection_Request3.maxBodySize());
      assertEquals(32768, httpConnection_Request3.timeout());
      assertTrue(httpConnection_Request3.validateTLSCertificates());
      assertTrue(httpConnection_Request3.followRedirects());
      assertNull(httpConnection_Request3.requestBody());
      assertFalse(httpConnection_Request3.ignoreHttpErrors());
      assertSame(httpConnection_Request0, httpConnection_Request3);
      assertSame(httpConnection_Request0, httpConnection_Request5);
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request0, httpConnection_Request2);
      assertSame(httpConnection_Request0, httpConnection_Request4);
      assertSame(httpConnection_Request0, httpConnection_Request6);
      assertSame(httpConnection_Request6, httpConnection_Request2);
      assertSame(httpConnection_Request6, httpConnection_Request4);
      assertSame(httpConnection_Request6, httpConnection_Request0);
      assertSame(httpConnection_Request6, httpConnection_Request3);
      assertSame(httpConnection_Request6, httpConnection_Request5);
      assertSame(httpConnection_Request6, httpConnection_Request1);
      assertSame(httpConnection_Request1, httpConnection_Request2);
      assertSame(httpConnection_Request1, httpConnection_Request6);
      assertSame(httpConnection_Request1, httpConnection_Request4);
      assertSame(httpConnection_Request1, httpConnection_Request0);
      assertSame(httpConnection_Request1, httpConnection_Request3);
      assertSame(httpConnection_Request1, httpConnection_Request5);
      assertSame(httpConnection_Request3, httpConnection_Request4);
      assertSame(httpConnection_Request3, httpConnection_Request2);
      assertSame(httpConnection_Request3, httpConnection_Request6);
      assertSame(httpConnection_Request3, httpConnection_Request0);
      assertSame(httpConnection_Request3, httpConnection_Request1);
      assertSame(httpConnection_Request3, httpConnection_Request5);
      
      try { 
        HttpConnection.Response.execute(httpConnection_Request6);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // java.lang.UnsupportedOperationException: Method not implemented.
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create("multipart/form-data", "multipart/form-data");
      assertNotNull(httpConnection_KeyVal0);
      assertNull(httpConnection_KeyVal0.contentType());
      assertEquals("multipart/form-data", httpConnection_KeyVal0.value());
      assertFalse(httpConnection_KeyVal0.hasInputStream());
      assertEquals("multipart/form-data", httpConnection_KeyVal0.key());
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      String string0 = httpConnection_KeyVal0.toString();
      assertEquals("multipart/form-data=multipart/form-data", string0);
      assertNotNull(string0);
      assertNull(httpConnection_KeyVal0.contentType());
      assertEquals("multipart/form-data", httpConnection_KeyVal0.value());
      assertFalse(httpConnection_KeyVal0.hasInputStream());
      assertEquals("multipart/form-data", httpConnection_KeyVal0.key());
      
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      assertNotNull(httpConnection_Request0);
      assertTrue(httpConnection_Request0.validateTLSCertificates());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      
      URL uRL0 = MockURL.getHttpExample();
      assertNotNull(uRL0);
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      
      HttpConnection.Request httpConnection_Request1 = (HttpConnection.Request)httpConnection_Request0.url(uRL0);
      assertNotNull(httpConnection_Request1);
      assertTrue(httpConnection_Request0.validateTLSCertificates());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertNull(httpConnection_Request1.requestBody());
      assertEquals(30000, httpConnection_Request1.timeout());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertEquals(1048576, httpConnection_Request1.maxBodySize());
      assertTrue(httpConnection_Request1.followRedirects());
      assertTrue(httpConnection_Request1.validateTLSCertificates());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request1, httpConnection_Request0);
      
      HttpConnection.KeyVal httpConnection_KeyVal1 = httpConnection_KeyVal0.key("multipart/form-data");
      assertNotNull(httpConnection_KeyVal1);
      assertNull(httpConnection_KeyVal0.contentType());
      assertEquals("multipart/form-data", httpConnection_KeyVal0.value());
      assertFalse(httpConnection_KeyVal0.hasInputStream());
      assertEquals("multipart/form-data", httpConnection_KeyVal0.key());
      assertFalse(httpConnection_KeyVal1.hasInputStream());
      assertEquals("multipart/form-data", httpConnection_KeyVal1.key());
      assertNull(httpConnection_KeyVal1.contentType());
      assertEquals("multipart/form-data", httpConnection_KeyVal1.value());
      assertSame(httpConnection_KeyVal0, httpConnection_KeyVal1);
      assertSame(httpConnection_KeyVal1, httpConnection_KeyVal0);
      
      String string1 = httpConnection_KeyVal0.toString();
      assertEquals("multipart/form-data=multipart/form-data", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertNull(httpConnection_KeyVal0.contentType());
      assertEquals("multipart/form-data", httpConnection_KeyVal0.value());
      assertFalse(httpConnection_KeyVal0.hasInputStream());
      assertEquals("multipart/form-data", httpConnection_KeyVal0.key());
      assertSame(httpConnection_KeyVal0, httpConnection_KeyVal1);
      
      HttpConnection.Request httpConnection_Request2 = httpConnection_Request1.data((Connection.KeyVal) httpConnection_KeyVal0);
      assertNotNull(httpConnection_Request2);
      assertNull(httpConnection_KeyVal0.contentType());
      assertEquals("multipart/form-data", httpConnection_KeyVal0.value());
      assertFalse(httpConnection_KeyVal0.hasInputStream());
      assertEquals("multipart/form-data", httpConnection_KeyVal0.key());
      assertTrue(httpConnection_Request0.validateTLSCertificates());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertNull(httpConnection_Request1.requestBody());
      assertEquals(30000, httpConnection_Request1.timeout());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertEquals(1048576, httpConnection_Request1.maxBodySize());
      assertTrue(httpConnection_Request1.followRedirects());
      assertTrue(httpConnection_Request1.validateTLSCertificates());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertNull(httpConnection_Request2.requestBody());
      assertFalse(httpConnection_Request2.ignoreHttpErrors());
      assertTrue(httpConnection_Request2.validateTLSCertificates());
      assertEquals(30000, httpConnection_Request2.timeout());
      assertFalse(httpConnection_Request2.ignoreContentType());
      assertEquals(1048576, httpConnection_Request2.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request2.postDataCharset());
      assertTrue(httpConnection_Request2.followRedirects());
      assertSame(httpConnection_KeyVal0, httpConnection_KeyVal1);
      assertSame(httpConnection_Request0, httpConnection_Request2);
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request1, httpConnection_Request2);
      assertSame(httpConnection_Request1, httpConnection_Request0);
      assertSame(httpConnection_Request2, httpConnection_Request1);
      assertSame(httpConnection_Request2, httpConnection_Request0);
      
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      assertNotNull(httpConnection_Response0);
      assertNull(httpConnection_Response0.statusMessage());
      assertEquals(0, httpConnection_Response0.statusCode());
      assertNull(httpConnection_Response0.contentType());
      assertNull(httpConnection_Response0.charset());
      
      try { 
        HttpConnection.Response.execute(httpConnection_Request2, httpConnection_Response0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // HTTP error fetching URL
         //
         verifyException("org.jsoup.helper.HttpConnection$Response", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      System.setCurrentTimeMillis(648L);
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      assertNotNull(httpConnection_Request0);
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertTrue(httpConnection_Request0.validateTLSCertificates());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(30000, httpConnection_Request0.timeout());
      
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null);
      assertNotNull(pushbackInputStream0);
      
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create("tqlsP!vF6W^", "tqlsP!vF6W^", (InputStream) pushbackInputStream0);
      assertNotNull(httpConnection_KeyVal0);
      assertEquals("tqlsP!vF6W^", httpConnection_KeyVal0.value());
      assertEquals("tqlsP!vF6W^", httpConnection_KeyVal0.key());
      assertNull(httpConnection_KeyVal0.contentType());
      assertTrue(httpConnection_KeyVal0.hasInputStream());
      
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.data((Connection.KeyVal) httpConnection_KeyVal0);
      assertNotNull(httpConnection_Request1);
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertTrue(httpConnection_Request0.validateTLSCertificates());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertEquals("tqlsP!vF6W^", httpConnection_KeyVal0.value());
      assertEquals("tqlsP!vF6W^", httpConnection_KeyVal0.key());
      assertNull(httpConnection_KeyVal0.contentType());
      assertTrue(httpConnection_KeyVal0.hasInputStream());
      assertTrue(httpConnection_Request1.followRedirects());
      assertTrue(httpConnection_Request1.validateTLSCertificates());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertEquals(1048576, httpConnection_Request1.maxBodySize());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertNull(httpConnection_Request1.requestBody());
      assertEquals(30000, httpConnection_Request1.timeout());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request1, httpConnection_Request0);
      
      Proxy.Type proxy_Type0 = Proxy.Type.HTTP;
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress(95);
      assertNotNull(mockInetSocketAddress0);
      
      Proxy proxy0 = new Proxy(proxy_Type0, mockInetSocketAddress0);
      assertNotNull(proxy0);
      assertEquals(95, mockInetSocketAddress0.getPort());
      assertFalse(mockInetSocketAddress0.isUnresolved());
      assertEquals("192.168.1.42", mockInetSocketAddress0.getHostString());
      assertEquals("/192.168.1.42:95", mockInetSocketAddress0.toString());
      assertEquals(Proxy.Type.HTTP, proxy0.type());
      assertEquals("HTTP @ /192.168.1.42:95", proxy0.toString());
      
      HttpConnection.Request httpConnection_Request2 = httpConnection_Request1.proxy(proxy0);
      assertNotNull(httpConnection_Request2);
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertTrue(httpConnection_Request0.validateTLSCertificates());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertEquals("tqlsP!vF6W^", httpConnection_KeyVal0.value());
      assertEquals("tqlsP!vF6W^", httpConnection_KeyVal0.key());
      assertNull(httpConnection_KeyVal0.contentType());
      assertTrue(httpConnection_KeyVal0.hasInputStream());
      assertTrue(httpConnection_Request1.followRedirects());
      assertTrue(httpConnection_Request1.validateTLSCertificates());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertEquals(1048576, httpConnection_Request1.maxBodySize());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertNull(httpConnection_Request1.requestBody());
      assertEquals(30000, httpConnection_Request1.timeout());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertEquals(95, mockInetSocketAddress0.getPort());
      assertFalse(mockInetSocketAddress0.isUnresolved());
      assertEquals("192.168.1.42", mockInetSocketAddress0.getHostString());
      assertEquals("/192.168.1.42:95", mockInetSocketAddress0.toString());
      assertEquals(Proxy.Type.HTTP, proxy0.type());
      assertEquals("HTTP @ /192.168.1.42:95", proxy0.toString());
      assertNull(httpConnection_Request2.requestBody());
      assertFalse(httpConnection_Request2.ignoreHttpErrors());
      assertEquals(1048576, httpConnection_Request2.maxBodySize());
      assertEquals(30000, httpConnection_Request2.timeout());
      assertEquals("UTF-8", httpConnection_Request2.postDataCharset());
      assertFalse(httpConnection_Request2.ignoreContentType());
      assertTrue(httpConnection_Request2.validateTLSCertificates());
      assertTrue(httpConnection_Request2.followRedirects());
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request0, httpConnection_Request2);
      assertSame(httpConnection_Request1, httpConnection_Request2);
      assertSame(httpConnection_Request1, httpConnection_Request0);
      assertSame(httpConnection_Request2, httpConnection_Request0);
      assertSame(httpConnection_Request2, httpConnection_Request1);
      
      Connection.Request connection_Request0 = httpConnection_Request2.maxBodySize(95);
      assertNotNull(connection_Request0);
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals(95, httpConnection_Request0.maxBodySize());
      assertTrue(httpConnection_Request0.validateTLSCertificates());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertEquals("tqlsP!vF6W^", httpConnection_KeyVal0.value());
      assertEquals("tqlsP!vF6W^", httpConnection_KeyVal0.key());
      assertNull(httpConnection_KeyVal0.contentType());
      assertTrue(httpConnection_KeyVal0.hasInputStream());
      assertTrue(httpConnection_Request1.followRedirects());
      assertEquals(95, httpConnection_Request1.maxBodySize());
      assertTrue(httpConnection_Request1.validateTLSCertificates());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertNull(httpConnection_Request1.requestBody());
      assertEquals(30000, httpConnection_Request1.timeout());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertEquals(95, mockInetSocketAddress0.getPort());
      assertFalse(mockInetSocketAddress0.isUnresolved());
      assertEquals("192.168.1.42", mockInetSocketAddress0.getHostString());
      assertEquals("/192.168.1.42:95", mockInetSocketAddress0.toString());
      assertEquals(Proxy.Type.HTTP, proxy0.type());
      assertEquals("HTTP @ /192.168.1.42:95", proxy0.toString());
      assertNull(httpConnection_Request2.requestBody());
      assertFalse(httpConnection_Request2.ignoreHttpErrors());
      assertEquals(95, httpConnection_Request2.maxBodySize());
      assertEquals(30000, httpConnection_Request2.timeout());
      assertEquals("UTF-8", httpConnection_Request2.postDataCharset());
      assertFalse(httpConnection_Request2.ignoreContentType());
      assertTrue(httpConnection_Request2.validateTLSCertificates());
      assertTrue(httpConnection_Request2.followRedirects());
      assertFalse(connection_Request0.ignoreHttpErrors());
      assertNull(connection_Request0.requestBody());
      assertEquals(95, connection_Request0.maxBodySize());
      assertTrue(connection_Request0.followRedirects());
      assertEquals(30000, connection_Request0.timeout());
      assertTrue(connection_Request0.validateTLSCertificates());
      assertEquals("UTF-8", connection_Request0.postDataCharset());
      assertFalse(connection_Request0.ignoreContentType());
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request0, connection_Request0);
      assertSame(httpConnection_Request0, httpConnection_Request2);
      assertSame(httpConnection_Request1, httpConnection_Request2);
      assertSame(httpConnection_Request1, httpConnection_Request0);
      assertSame(httpConnection_Request1, connection_Request0);
      assertSame(httpConnection_Request2, httpConnection_Request0);
      assertSame(httpConnection_Request2, connection_Request0);
      assertSame(httpConnection_Request2, httpConnection_Request1);
      assertSame(connection_Request0, httpConnection_Request1);
      assertSame(connection_Request0, httpConnection_Request0);
      assertSame(connection_Request0, httpConnection_Request2);
      
      // Undeclared exception!
      try { 
        HttpConnection.Response.execute(connection_Request0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      assertNotNull(httpConnection_Response0);
      assertNull(httpConnection_Response0.statusMessage());
      assertEquals(0, httpConnection_Response0.statusCode());
      assertNull(httpConnection_Response0.charset());
      assertNull(httpConnection_Response0.contentType());
      
      // Undeclared exception!
      try { 
        httpConnection_Response0.body();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Request must be executed (with .execute(), .get(), or .post() before getting response body
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      assertNotNull(httpConnection_Request0);
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertTrue(httpConnection_Request0.validateTLSCertificates());
      
      Parser parser0 = Parser.htmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      String string0 = "@JZ:N@T\"`Lc:cJZ";
      HttpConnection.Request httpConnection_Request1 = (HttpConnection.Request)httpConnection_Request0.header("@JZ:N@T\"`Lc:cJZ", "@JZ:N@T\"`Lc:cJZ");
      assertNotNull(httpConnection_Request1);
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertTrue(httpConnection_Request0.validateTLSCertificates());
      assertNull(httpConnection_Request1.requestBody());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertTrue(httpConnection_Request1.validateTLSCertificates());
      assertEquals(30000, httpConnection_Request1.timeout());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertEquals(1048576, httpConnection_Request1.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertTrue(httpConnection_Request1.followRedirects());
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request1, httpConnection_Request0);
      
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      httpConnection_Request0.headers = (Map<String, List<String>>) hashMap0;
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertTrue(httpConnection_Request0.validateTLSCertificates());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(httpConnection_Request0.headers.isEmpty());
      assertEquals(0, httpConnection_Request0.headers.size());
      
      String string1 = "";
      httpConnection_Request0.validateTLSCertificates(true);
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertTrue(httpConnection_Request0.validateTLSCertificates());
      assertSame(httpConnection_Request0, httpConnection_Request1);
      
      // Undeclared exception!
      try { 
        httpConnection_Request1.postDataCharset("");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // 
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      try { 
        MockURL.URL("5>&!l(<(<_U", "5>&!l(<(<_U", "5>&!l(<(<_U");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // unknown protocol: 5>&!l(<(<_u
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      assertNotNull(httpConnection_Request0);
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertTrue(httpConnection_Request0.validateTLSCertificates());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      Map<String, List<String>> map0 = httpConnection_Response0.headers;
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      httpConnection_Response0.header("gzip", "kU*|Wt6g(Lc6");
      Vector<String> vector0 = new Vector<String>();
      hashMap0.put("", vector0);
      httpConnection_Response0.processResponseHeaders(hashMap0);
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      httpConnection_Request0.followRedirects(false);
      // Undeclared exception!
      try { 
        httpConnection_Request0.timeout((-1278));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Timeout milliseconds must be 0 (infinite) or greater
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }
}
