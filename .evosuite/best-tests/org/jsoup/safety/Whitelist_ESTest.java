/*
 * This file was automatically generated by EvoSuite
 * Tue Mar 22 23:25:38 GMT 2022
 */

package org.jsoup.safety;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.ConcurrentModificationException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.nodes.Attribute;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.Element;
import org.jsoup.parser.ParseSettings;
import org.jsoup.parser.Tag;
import org.jsoup.safety.Whitelist;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Whitelist_ESTest extends Whitelist_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.none();
      Whitelist.Protocol whitelist_Protocol0 = new Whitelist.Protocol(".K|&#qK:Bgk~m@c.M");
      boolean boolean0 = whitelist_Protocol0.equals(whitelist0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Whitelist.Protocol whitelist_Protocol0 = new Whitelist.Protocol("3");
      boolean boolean0 = whitelist_Protocol0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.none();
      Attributes attributes0 = whitelist0.getEnforcedAttributes("lnB");
      assertEquals(0, attributes0.size());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.none();
      Whitelist whitelist1 = whitelist0.addEnforcedAttribute(".K|&#qK:Bgk~m@c.M", "EMh3J!2<&m:dxFA", "EMh3J!2<&m:dxFA");
      Tag tag0 = Tag.valueOf("EMh3J!2<&m:dxFA");
      Element element0 = new Element(tag0, "b", (Attributes) null);
      Attribute attribute0 = Attribute.createFromEncoded("EMh3J!2<&m:dxFA", "P5,cE");
      boolean boolean0 = whitelist1.isSafeAttribute(".K|&#qK:Bgk~m@c.M", element0, attribute0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.basic();
      Whitelist whitelist1 = whitelist0.addEnforcedAttribute("3", "3", "3");
      ParseSettings parseSettings0 = new ParseSettings(true, true);
      Tag tag0 = Tag.valueOf("3", parseSettings0);
      Element element0 = new Element(tag0, "tt");
      Attribute attribute0 = new Attribute("}HDKtF{", "dt");
      boolean boolean0 = whitelist1.isSafeAttribute("3", element0, attribute0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.basic();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "3";
      stringArray0[1] = "3";
      stringArray0[2] = "3";
      stringArray0[3] = "3";
      Whitelist whitelist1 = whitelist0.addAttributes("3", stringArray0);
      ParseSettings parseSettings0 = new ParseSettings(true, true);
      Tag tag0 = Tag.valueOf("3", parseSettings0);
      Element element0 = new Element(tag0, "tt");
      Attribute attribute0 = Attribute.createFromEncoded("3", "3");
      boolean boolean0 = whitelist1.isSafeAttribute("3", element0, attribute0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.basic();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "3";
      stringArray0[1] = "3";
      stringArray0[2] = "3";
      stringArray0[3] = "3";
      whitelist0.addAttributes("3", stringArray0);
      ParseSettings parseSettings0 = new ParseSettings(true, true);
      Tag tag0 = Tag.valueOf("3", parseSettings0);
      Element element0 = new Element(tag0, "tt");
      Attribute attribute0 = new Attribute("}HDKtF{", "dt");
      boolean boolean0 = whitelist0.isSafeAttribute("3", element0, attribute0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.simpleText();
      boolean boolean0 = whitelist0.isSafeTag("em");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.basic();
      boolean boolean0 = whitelist0.isSafeTag("I0UiI");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.none();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "`U'U1cC0O%[!\"RXY ";
      stringArray0[1] = "em";
      stringArray0[2] = "<fill f={} uf={} {}";
      stringArray0[3] = "<fill f={} uf={} {}";
      stringArray0[4] = "strong";
      stringArray0[5] = "m";
      stringArray0[6] = "S8(mJ}DU03{6af/";
      stringArray0[7] = "em";
      stringArray0[8] = "ebg<3<n%`lBf";
      whitelist0.addProtocols("`U'U1cC0O%[!\"RXY ", ":all", stringArray0);
      Whitelist whitelist1 = whitelist0.addProtocols("`U'U1cC0O%[!\"RXY ", "em", stringArray0);
      Whitelist whitelist2 = whitelist1.removeProtocols("`U'U1cC0O%[!\"RXY ", "em", stringArray0);
      assertSame(whitelist0, whitelist2);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.basic();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "#wm]wr_";
      stringArray0[1] = "#wm]wr_";
      stringArray0[2] = "#wm]wr_";
      stringArray0[3] = "#wm]wr_";
      Whitelist whitelist1 = whitelist0.addProtocols("#wm]wr_", "#wm]wr_", stringArray0);
      String[] stringArray1 = new String[0];
      Whitelist whitelist2 = whitelist1.removeProtocols("#wm]wr_", "#wm]wr_", stringArray1);
      assertSame(whitelist2, whitelist0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.none();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "`U'U1cC0O%[!\"RXY ";
      stringArray0[1] = "em";
      stringArray0[2] = "<fill f={} uf={} {}";
      stringArray0[3] = "<fill f={} uf={} {}";
      stringArray0[4] = "strong";
      stringArray0[5] = "m";
      stringArray0[6] = "S8(mJ}DU03{6af/";
      stringArray0[7] = "em";
      stringArray0[8] = "ebg<3<n%`lBf";
      Whitelist whitelist1 = whitelist0.addProtocols("`U'U1cC0O%[!\"RXY ", "em", stringArray0);
      Whitelist whitelist2 = whitelist1.removeProtocols("`U'U1cC0O%[!\"RXY ", "em", stringArray0);
      assertSame(whitelist2, whitelist0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.none();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "`U'U1cC0O%[!\"RXY ";
      stringArray0[1] = "em";
      stringArray0[2] = "<fill f={} uf={} {}";
      stringArray0[3] = "<fill f={} uf={} {}";
      stringArray0[4] = "strong";
      stringArray0[5] = "m";
      stringArray0[6] = "S8(mJ}DU03{6af/";
      stringArray0[7] = "em";
      stringArray0[8] = "ebg<3<n%`lBf";
      Whitelist whitelist1 = whitelist0.addProtocols("`U'U1cC0O%[!\"RXY ", ":all", stringArray0);
      // Undeclared exception!
      try { 
        whitelist1.removeProtocols("`U'U1cC0O%[!\"RXY ", "em", stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot remove a protocol that is not set.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.relaxed();
      String[] stringArray0 = new String[9];
      // Undeclared exception!
      try { 
        whitelist0.removeProtocols("`U'U1cC0O%[!\"RXY ", "h", stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot remove a protocol that is not set.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.none();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "rowspan";
      stringArray0[1] = "rowspan";
      Whitelist whitelist1 = whitelist0.addProtocols("rowspan", "rowspan", stringArray0);
      Whitelist whitelist2 = whitelist1.addProtocols("rowspan", "rowspan", stringArray0);
      assertSame(whitelist1, whitelist2);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.basicWithImages();
      Whitelist whitelist1 = whitelist0.addEnforcedAttribute("G];,6e&=<2", "G];,6e&=<2", "G];,6e&=<2");
      Whitelist whitelist2 = whitelist1.removeEnforcedAttribute("G];,6e&=<2", "G];,6e&=<2");
      assertSame(whitelist2, whitelist1);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.basic();
      Whitelist whitelist1 = whitelist0.addEnforcedAttribute("3", "3", "3");
      Whitelist whitelist2 = whitelist1.removeEnforcedAttribute("3", "X>SEKC4:K~?q!`npwIF");
      assertSame(whitelist2, whitelist1);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.basic();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "3";
      stringArray0[1] = "3";
      stringArray0[2] = "3";
      stringArray0[3] = "3";
      Whitelist whitelist1 = whitelist0.addAttributes("3", stringArray0);
      Whitelist whitelist2 = whitelist1.removeEnforcedAttribute("3", "X>SEKC4:K~?q!`npwIF");
      assertSame(whitelist1, whitelist2);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.simpleText();
      Whitelist whitelist1 = whitelist0.removeEnforcedAttribute("/X\"#__Ta%7R|=L?&)#A", "4");
      assertSame(whitelist0, whitelist1);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.basicWithImages();
      Whitelist whitelist1 = whitelist0.addEnforcedAttribute("]!nLuFSac+", "]!nLuFSac+", "]!nLuFSac+");
      Whitelist whitelist2 = whitelist1.addEnforcedAttribute("]!nLuFSac+", "1n'8|WyQW.:-", "1n'8|WyQW.:-");
      assertSame(whitelist0, whitelist2);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.basic();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "3";
      stringArray0[1] = "3";
      stringArray0[2] = "3";
      stringArray0[3] = "3";
      Whitelist whitelist1 = whitelist0.addAttributes("3", stringArray0);
      // Undeclared exception!
      try { 
        whitelist1.removeAttributes(":all", stringArray0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.HashMap$HashIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.basic();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "3";
      stringArray0[1] = "3";
      stringArray0[2] = "3";
      stringArray0[3] = "3";
      Whitelist whitelist1 = whitelist0.removeAttributes(":all", stringArray0);
      assertSame(whitelist0, whitelist1);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.basicWithImages();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "a";
      stringArray0[1] = "a";
      stringArray0[2] = "a";
      Whitelist whitelist1 = whitelist0.removeAttributes("a", stringArray0);
      assertSame(whitelist0, whitelist1);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.simpleText();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "4";
      stringArray0[1] = "4";
      stringArray0[2] = "4";
      stringArray0[3] = "4";
      stringArray0[4] = "4";
      stringArray0[5] = "4";
      stringArray0[6] = "4";
      Whitelist whitelist1 = whitelist0.addTags(stringArray0);
      Whitelist whitelist2 = whitelist1.removeAttributes("4", stringArray0);
      assertSame(whitelist1, whitelist2);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.basic();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "3";
      stringArray0[1] = "3";
      stringArray0[2] = "3";
      stringArray0[3] = "3";
      whitelist0.addAttributes("3", stringArray0);
      Whitelist whitelist1 = whitelist0.removeAttributes("3", stringArray0);
      assertSame(whitelist1, whitelist0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Whitelist whitelist0 = new Whitelist();
      String[] stringArray0 = new String[0];
      // Undeclared exception!
      try { 
        whitelist0.removeAttributes("8w-<ZA*&~GrRhz>_{", stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No attribute names supplied.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.relaxed();
      String[] stringArray0 = new String[0];
      // Undeclared exception!
      try { 
        whitelist0.addAttributes("completeWrite exception", stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No attribute names supplied.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.basicWithImages();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "org.jsoup.select.StructuralEvaluator$Has";
      stringArray0[1] = "org.eclipse.jetty.io.FillInterest";
      Whitelist whitelist1 = whitelist0.removeTags(stringArray0);
      assertSame(whitelist0, whitelist1);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.basic();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "3";
      stringArray0[1] = "3";
      stringArray0[2] = "3";
      stringArray0[3] = "3";
      Whitelist whitelist1 = whitelist0.addAttributes("3", stringArray0);
      Whitelist whitelist2 = whitelist1.addAttributes("3", stringArray0);
      assertSame(whitelist2, whitelist0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.none();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "EMh3J!2<&m:dxFA";
      stringArray0[1] = ".K|&#qK:Bgk~m@c.M";
      Whitelist whitelist1 = whitelist0.addTags(stringArray0);
      Whitelist whitelist2 = whitelist1.removeTags(stringArray0);
      assertSame(whitelist1, whitelist2);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.simpleText();
      Whitelist whitelist1 = whitelist0.preserveRelativeLinks(false);
      assertSame(whitelist1, whitelist0);
  }
}
