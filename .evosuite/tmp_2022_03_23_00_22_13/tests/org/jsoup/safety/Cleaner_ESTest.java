/*
 * This file was automatically generated by EvoSuite
 * Tue Mar 22 23:33:08 GMT 2022
 */

package org.jsoup.safety;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.safety.Cleaner;
import org.jsoup.safety.Whitelist;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Cleaner_ESTest extends Cleaner_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Whitelist whitelist0 = mock(Whitelist.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, false, false).when(whitelist0).isSafeTag(anyString());
      Cleaner cleaner0 = new Cleaner(whitelist0);
      cleaner0.isValidBodyHtml("4xCaX9<ZHF&i8>");
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Whitelist whitelist0 = mock(Whitelist.class, new ViolatedAssumptionAnswer());
      doReturn(false, true, false, false).when(whitelist0).isSafeTag(anyString());
      Cleaner cleaner0 = new Cleaner(whitelist0);
      String string0 = "org.jsoup.safety.Cleaner$1";
      cleaner0.isValidBodyHtml("org.jsoup.safety.Cleaner$1");
      String string1 = "nN+Vyut}`z>2&b;";
      Document document0 = mock(Document.class, new ViolatedAssumptionAnswer());
      doReturn((Element) null).when(document0).body();
      doReturn("axis").when(document0).baseUri();
      Document document1 = cleaner0.clean(document0);
      cleaner0.clean(document1);
      Document document2 = mock(Document.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(document2).baseUri();
      // Undeclared exception!
      try { 
        cleaner0.clean(document2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Whitelist whitelist0 = mock(Whitelist.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(whitelist0).isSafeTag(anyString());
      Cleaner cleaner0 = new Cleaner(whitelist0);
      cleaner0.isValidBodyHtml("^S#@e8q<=|HU/#");
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Whitelist whitelist0 = mock(Whitelist.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(whitelist0).isSafeTag(anyString());
      Cleaner cleaner0 = new Cleaner(whitelist0);
      cleaner0.isValidBodyHtml("<!--");
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Whitelist whitelist0 = mock(Whitelist.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(whitelist0).isSafeTag(anyString());
      Cleaner cleaner0 = new Cleaner(whitelist0);
      Document document0 = mock(Document.class, new ViolatedAssumptionAnswer());
      doReturn((Element) null).when(document0).body();
      doReturn("").when(document0).baseUri();
      Document document1 = cleaner0.clean(document0);
      cleaner0.isValid(document1);
  }
}
